import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { v1 as uniqueKey } from 'uuid';
import AppBar from '@material-ui/core/AppBar';
import {
  List,
  ListItem,
  Collapse,
  Tabs,
  Tab,
  Hidden,
  Typography,
} from '@material-ui/core';
import IconButton from '@material-ui/core/IconButton';
import MenuIcon from '@material-ui/icons/Menu';
import CloseIcon from '@material-ui/icons/Close';
import Link from '@material-ui/core/Link';
import { makeStyles } from '@material-ui/core/styles';
import { NavLink } from 'react-router-dom';
import Logo from '../images/icons/geOps_logo_md.svg';

var propTypes = {
  /**
   * Title
   */
  title: PropTypes.string.isRequired,

  /**
   * List tabs configuration.
   */
  tabs: PropTypes.arrayOf(
    PropTypes.shape({
      /**
       * The tab label.
       */
      label: PropTypes.string.isRequired,

      /**
       * href
       */
      href: PropTypes.string,

      /**
       * The to path
       */
      to: PropTypes.string,
    })
  ),
};

var defaultProps = {
  tabs: [],
};

var useStyles = makeStyles(function (theme) {
  var obj, obj$1, obj$2, obj$3, obj$4;

  return ({
  appBar: ( obj = {}, obj[theme.breakpoints.down('sm')] = {
      padding: '0 20px',
    }, obj.display = 'flex', obj.alignItems = 'center', obj.padding = '0 70px', obj.boxShadow = '0px 10px 15px #35353520', obj.background = 'white', obj.height = '100px', obj ),
  brand: {
    display: 'flex',
    alignItems: 'center',
    fontSize: 22,
  },
  logo: ( obj$1 = {}, obj$1[theme.breakpoints.down('xs')] = {
      width: 100,
    }, obj$1.width = 120, obj$1 ),
  title: ( obj$2 = {}, obj$2[theme.breakpoints.down('xs')] = {
      fontSize: 15,
      marginLeft: 10,
    }, obj$2.fontSize = 22, obj$2.color = theme.palette.text.primary, obj$2.fontWeight = 500, obj$2.marginLeft = 15, obj$2.marginBottom = 2, obj$2 ),
  buttonCollapse: ( obj$3 = {}, obj$3[theme.breakpoints.up('md')] = {
      display: 'none',
    }, obj$3.boxShadow = 'none', obj$3 ),
  menuList: {
    boxShadow: '0px 10px 15px #35353520',
    backgroundColor: 'white',
    '& .active': {
      fontWeight: 'bold',
      color: theme.colors.primaryGreen,
    },
    zIndex: 1200,
    padding: 0,
  },
  menuListItem: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    height: 60,
    borderBottom: '1px solid #0000001f',
    '&.active': {
      borderBottomWidth: 2,
      borderBottomColor: theme.colors.primaryGreen,
    },
  },
  tabs: ( obj$4 = {}, obj$4[theme.breakpoints.down('sm')] = {
      display: 'none',
    }, obj$4['& .active'] = {
      fontWeight: 'bold',
      color: theme.colors.primaryGreen,
    }, obj$4 ),
  tab: {
    fontWeight: 400,
    color: theme.colors.primaryBlue,
  },
  collapse: {
    position: 'sticky',
    top: 100,
    left: 'auto',
    right: 0,
    background: 'white',
    zIndex: 1100,
  },
});
});

var selectInitialTab = function (pathValue, tabs) {
  var newTab = tabs.find(function (option) { return option.to === pathValue; });
  // Return route from URL, else return false (no tab selected)
  return newTab ? newTab.label : false;
};

var handleChange = function (event, newValue, tabOptions, setValue) {
  var tab = tabOptions.find(function (tabOption) { return tabOption.label === newValue; });
  if (tab.to) {
    setValue(newValue);
  }
};

var Header = function (ref) {
  var title = ref.title;
  var tabs = ref.tabs;

  var classes = useStyles();
  var ref$1 = useState(false);
  var open = ref$1[0];
  var setMenuOpen = ref$1[1];
  var path = window.location.pathname.split('/')[1];
  var ref$2 = useState(selectInitialTab(path, tabs));
  var value = ref$2[0];
  var setValue = ref$2[1];

  return (
    React.createElement( React.Fragment, null,
      React.createElement( AppBar, { position: "sticky", className: classes.appBar },
        React.createElement( Link, { href: "/", underline: "none" },
          React.createElement( 'div', { className: classes.brand },
            React.createElement( 'img', { className: classes.logo, src: Logo, alt: "Logo" }),
            React.createElement( Typography, { className: classes.title }, title)
          )
        )

        /* Show menu button only if there are more than one tab (when the tabs don't fit) */,
        tabs.length > 1 && (
          React.createElement( 'div', { className: classes.buttonCollapse },
            React.createElement( IconButton, { onClick: function () { return setMenuOpen(!open); } },
              open ? React.createElement( CloseIcon, null ) : React.createElement( MenuIcon, null )
            )
          )
        )

        /* Hide tabs when there are more than one (when they don't fit) */,
        React.createElement( Tabs, {
          className: tabs.length > 1 ? classes.tabs : undefined, value: value, onChange: function (evt, newValue) { return handleChange(evt, newValue, tabs, setValue); }, variant: "fullWidth" },
          tabs.map(function (option) { return (
            React.createElement( Tab, {
              key: uniqueKey(), value: option.label, label: option.label, component: option.href ? 'a' : NavLink, to: option.to, href: option.href, target: option.href ? '_blank' : null, rel: option.href ? 'noopener' : null, className: classes.tab })
          ); })
        )
      ),

      React.createElement( Hidden, { mdUp: true },
        React.createElement( 'div', { className: classes.collapse },
          React.createElement( Collapse, { in: open },
            React.createElement( List, { className: classes.menuList },
              tabs.map(function (option) { return (
                React.createElement( ListItem, {
                  key: uniqueKey(), button: true, className: classes.menuListItem, component: option.href ? 'a' : NavLink, onClick: function () { return setMenuOpen(false); }, to: option.to, href: option.href, target: option.href ? '_blank' : null, rel: option.href ? 'noopener' : null },
                  option.label
                )
              ); })
            )
          )
        )
      )
    )
  );
};

Header.propTypes = propTypes;
Header.defaultProps = defaultProps;

export default Header;

//# sourceMappingURL=Header.js.map