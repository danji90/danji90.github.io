{"ast":null,"code":"import removeDuplicate from './removeDuplicate';\n/**\n * Return the copyright a Mapbox map.\n * @param {mapboxgl.Map} map A Mapbox map\n * @ignore\n */\n\nvar getMapboxMapCopyrights = function getMapboxMapCopyrights(map) {\n  if (!map || !map.style) {\n    return [];\n  }\n\n  var sourceCaches = map.style.sourceCaches;\n  var copyrights = [];\n  Object.values(sourceCaches).forEach(function (sourceCache) {\n    if (sourceCache.used) {\n      var source = sourceCache.getSource();\n      var attribution = source.attribution || source.options && source.options.attribution;\n\n      if (attribution) {\n        copyrights = copyrights.concat(attribution.replace(/&copy;/g, '©').split(/(<a.*?<\\/a>)/));\n      }\n    }\n  });\n  return removeDuplicate(copyrights);\n};\n\nexport default getMapboxMapCopyrights;","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/common/utils/getMapboxMapCopyrights.js"],"names":["removeDuplicate","getMapboxMapCopyrights","map","style","sourceCaches","copyrights","Object","values","forEach","sourceCache","used","source","getSource","attribution","options","concat","replace","split"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,GAAD,EAAS;AACtC,MAAI,CAACA,GAAD,IAAQ,CAACA,GAAG,CAACC,KAAjB,EAAwB;AACtB,WAAO,EAAP;AACD;;AACD,MAAQC,YAAR,GAAyBF,GAAG,CAACC,KAA7B,CAAQC,YAAR;AACA,MAAIC,UAAU,GAAG,EAAjB;AACAC,EAAAA,MAAM,CAACC,MAAP,CAAcH,YAAd,EAA4BI,OAA5B,CAAoC,UAACC,WAAD,EAAiB;AACnD,QAAIA,WAAW,CAACC,IAAhB,EAAsB;AACpB,UAAMC,MAAM,GAAGF,WAAW,CAACG,SAAZ,EAAf;AACA,UAAMC,WAAW,GACfF,MAAM,CAACE,WAAP,IAAuBF,MAAM,CAACG,OAAP,IAAkBH,MAAM,CAACG,OAAP,CAAeD,WAD1D;;AAEA,UAAIA,WAAJ,EAAiB;AACfR,QAAAA,UAAU,GAAGA,UAAU,CAACU,MAAX,CACXF,WAAW,CAACG,OAAZ,CAAoB,SAApB,EAA+B,GAA/B,EAAoCC,KAApC,CAA0C,cAA1C,CADW,CAAb;AAGD;AACF;AACF,GAXD;AAaA,SAAOjB,eAAe,CAACK,UAAD,CAAtB;AACD,CApBD;;AAsBA,eAAeJ,sBAAf","sourcesContent":["import removeDuplicate from './removeDuplicate';\n\n/**\n * Return the copyright a Mapbox map.\n * @param {mapboxgl.Map} map A Mapbox map\n * @ignore\n */\nconst getMapboxMapCopyrights = (map) => {\n  if (!map || !map.style) {\n    return [];\n  }\n  const { sourceCaches } = map.style;\n  let copyrights = [];\n  Object.values(sourceCaches).forEach((sourceCache) => {\n    if (sourceCache.used) {\n      const source = sourceCache.getSource();\n      const attribution =\n        source.attribution || (source.options && source.options.attribution);\n      if (attribution) {\n        copyrights = copyrights.concat(\n          attribution.replace(/&copy;/g, '©').split(/(<a.*?<\\/a>)/),\n        );\n      }\n    }\n  });\n\n  return removeDuplicate(copyrights);\n};\n\nexport default getMapboxMapCopyrights;\n"]},"metadata":{},"sourceType":"module"}