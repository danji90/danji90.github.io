{"ast":null,"code":"import _objectSpread from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { translateTrajCollResponse, translateTrajStationsResp } from './TrajservAPIUtils';\nimport API from '../../common/api/api';\n/**\n * Access to the [Realtime service](https://developer.geops.io/apis/5dcbd5c9a256d90001cf1360/).\n *\n * @example\n * import { TrajservAPI } from 'mobility-toolbox-js/api';\n *\n * const api = new TrajservAPI({\n *   url: 'https://api.geops.io/tracker/v1',\n *   apiKey: [yourApiKey]\n * });\n *\n */\n\nvar TrajservAPI = /*#__PURE__*/function (_API) {\n  _inherits(TrajservAPI, _API);\n\n  var _super = _createSuper(TrajservAPI);\n\n  /**\n   * Constructor\n   *\n   * @param {Object} options Options.\n   * @param {string} [options.url='https://api.geops.io/tracker/v1'] Service url.\n   * @param {string} options.apiKey Access key for [geOps services](https://developer.geops.io/).\n   */\n  function TrajservAPI() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TrajservAPI);\n\n    return _super.call(this, _objectSpread({\n      url: 'https://api.geops.io/tracker/v1'\n    }, options));\n  }\n  /**\n   * Fetch a trajectory by id.\n   *\n   * @param {GetTrajectoryByIdParams} params Request parameters. See [Realtime service documentation](https://developer.geops.io/apis/5dcbd5c9a256d90001cf1360/#/default/get_trajectorybyid).\n   * @param {AbortController} abortController Abort controller used to cancel the request.\n   * @returns {Promise<TrajservTrajectory>} A trajectory.\n   */\n\n\n  _createClass(TrajservAPI, [{\n    key: \"fetchTrajectoryById\",\n    value: function fetchTrajectoryById(params) {\n      var abortController = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.fetch(\"/trajectorybyid\", params, {\n        signal: abortController.signal\n      });\n    }\n    /**\n     * Fetch trajectories.\n     *\n     * @param {GetTrajectoriesParams} params Request parameters. See [Realtime service documentation](https://developer.geops.io/apis/5dcbd5c9a256d90001cf1360/#/default/get_trajectory_collection).\n     * @param {AbortController} abortController Abort controller used to cancel the request.\n     * @returns {Promise<Trajectory[]>} A list of trajectories.\n     */\n\n  }, {\n    key: \"fetchTrajectories\",\n    value: function fetchTrajectories(params) {\n      var abortController = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.fetch(\"/trajectory_collection\", params, {\n        signal: abortController.signal\n      }).then(function (data) {\n        return translateTrajCollResponse(data.features);\n      });\n    }\n    /**\n     * Fetch stations informations about a trajectory.\n     *\n     * @param {GetTrajectoryStationsParams} params Request parameters. See [Realtime service documentation](https://developer.geops.io/apis/5dcbd5c9a256d90001cf1360/#/default/get_trajstations).\n     * @param {AbortController} abortController Abort controller used to cancel the request.\n     * @returns {Promise<TrajectoryStation[]>} A list of stations.\n     */\n\n  }, {\n    key: \"fetchTrajectoryStations\",\n    value: function fetchTrajectoryStations(params) {\n      var abortController = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.fetch(\"/trajstations\", params, {\n        signal: abortController.signal\n      }).then(function (data) {\n        return translateTrajStationsResp(data);\n      });\n    }\n  }]);\n\n  return TrajservAPI;\n}(API);\n\nexport default TrajservAPI;","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/api/trajserv/TrajservAPI.js"],"names":["translateTrajCollResponse","translateTrajStationsResp","API","TrajservAPI","options","url","params","abortController","fetch","signal","then","data","features"],"mappings":";;;;;AAAA,SACEA,yBADF,EAEEC,yBAFF,QAGO,oBAHP;AAIA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,W;;;;;AACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACE,yBAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAAA;AAChBC,MAAAA,GAAG,EAAE;AADW,OAC2BD,OAD3B;AAEzB;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;WACE,6BAAoBE,MAApB,EAAkD;AAAA,UAAtBC,eAAsB,uEAAJ,EAAI;AAChD,aAAO,KAAKC,KAAL,oBAA8BF,MAA9B,EAAsC;AAC3CG,QAAAA,MAAM,EAAEF,eAAe,CAACE;AADmB,OAAtC,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,2BAAkBH,MAAlB,EAAgD;AAAA,UAAtBC,eAAsB,uEAAJ,EAAI;AAC9C,aAAO,KAAKC,KAAL,2BAAqCF,MAArC,EAA6C;AAClDG,QAAAA,MAAM,EAAEF,eAAe,CAACE;AAD0B,OAA7C,EAEJC,IAFI,CAEC,UAACC,IAAD,EAAU;AAChB,eAAOX,yBAAyB,CAACW,IAAI,CAACC,QAAN,CAAhC;AACD,OAJM,CAAP;AAKD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,iCAAwBN,MAAxB,EAAsD;AAAA,UAAtBC,eAAsB,uEAAJ,EAAI;AACpD,aAAO,KAAKC,KAAL,kBAA4BF,MAA5B,EAAoC;AACzCG,QAAAA,MAAM,EAAEF,eAAe,CAACE;AADiB,OAApC,EAEJC,IAFI,CAEC,UAACC,IAAD,EAAU;AAChB,eAAOV,yBAAyB,CAACU,IAAD,CAAhC;AACD,OAJM,CAAP;AAKD;;;;EArDuBT,G;;AAwD1B,eAAeC,WAAf","sourcesContent":["import {\n  translateTrajCollResponse,\n  translateTrajStationsResp,\n} from './TrajservAPIUtils';\nimport API from '../../common/api/api';\n\n/**\n * Access to the [Realtime service](https://developer.geops.io/apis/5dcbd5c9a256d90001cf1360/).\n *\n * @example\n * import { TrajservAPI } from 'mobility-toolbox-js/api';\n *\n * const api = new TrajservAPI({\n *   url: 'https://api.geops.io/tracker/v1',\n *   apiKey: [yourApiKey]\n * });\n *\n */\nclass TrajservAPI extends API {\n  /**\n   * Constructor\n   *\n   * @param {Object} options Options.\n   * @param {string} [options.url='https://api.geops.io/tracker/v1'] Service url.\n   * @param {string} options.apiKey Access key for [geOps services](https://developer.geops.io/).\n   */\n  constructor(options = {}) {\n    super({ url: 'https://api.geops.io/tracker/v1', ...options });\n  }\n\n  /**\n   * Fetch a trajectory by id.\n   *\n   * @param {GetTrajectoryByIdParams} params Request parameters. See [Realtime service documentation](https://developer.geops.io/apis/5dcbd5c9a256d90001cf1360/#/default/get_trajectorybyid).\n   * @param {AbortController} abortController Abort controller used to cancel the request.\n   * @returns {Promise<TrajservTrajectory>} A trajectory.\n   */\n  fetchTrajectoryById(params, abortController = {}) {\n    return this.fetch(`/trajectorybyid`, params, {\n      signal: abortController.signal,\n    });\n  }\n\n  /**\n   * Fetch trajectories.\n   *\n   * @param {GetTrajectoriesParams} params Request parameters. See [Realtime service documentation](https://developer.geops.io/apis/5dcbd5c9a256d90001cf1360/#/default/get_trajectory_collection).\n   * @param {AbortController} abortController Abort controller used to cancel the request.\n   * @returns {Promise<Trajectory[]>} A list of trajectories.\n   */\n  fetchTrajectories(params, abortController = {}) {\n    return this.fetch(`/trajectory_collection`, params, {\n      signal: abortController.signal,\n    }).then((data) => {\n      return translateTrajCollResponse(data.features);\n    });\n  }\n\n  /**\n   * Fetch stations informations about a trajectory.\n   *\n   * @param {GetTrajectoryStationsParams} params Request parameters. See [Realtime service documentation](https://developer.geops.io/apis/5dcbd5c9a256d90001cf1360/#/default/get_trajstations).\n   * @param {AbortController} abortController Abort controller used to cancel the request.\n   * @returns {Promise<TrajectoryStation[]>} A list of stations.\n   */\n  fetchTrajectoryStations(params, abortController = {}) {\n    return this.fetch(`/trajstations`, params, {\n      signal: abortController.signal,\n    }).then((data) => {\n      return translateTrajStationsResp(data);\n    });\n  }\n}\n\nexport default TrajservAPI;\n"]},"metadata":{},"sourceType":"module"}