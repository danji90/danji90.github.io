{"ast":null,"code":"import _objectSpread from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport BaseObject from 'ol/Object';\n/**\n * A class representing a control to display on map.\n *\n * @example\n * const control = new Control();\n *\n * @classproperty {ol/Map~Map|mapboxgl.Map} map - The map which the control refers to.\n * @classproperty {boolean} active - Active the control.\n * @classproperty {function} render - Render function called whenever the control needs to be rerendered.\n * @classproperty {HTMLElement} element - The HTML element used to render the control. Read only.\n * @classproperty {HTMLElement} target - The HTML element where to render the element property. Default is the map's element. Read only.\n */\n\nvar Control = /*#__PURE__*/function (_BaseObject) {\n  _inherits(Control, _BaseObject);\n\n  var _super = _createSuper(Control);\n\n  /**\n   * Constructor\n   *\n   * @param {Object} [options] Control options.\n   * @param {boolean} [options.active = true] Whether the control is active or not.\n   * @param {HTMLElement} [options.element] The HTML element used to render the control.\n   * @param {HTMLElement} [options.target] The HTML element where to render the element property. Default is the map's element.\n   * @param {HTMLElement} [options.render] Render function called whenever the control needs to be rerendered.\n   */\n  function Control() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Control);\n\n    _this = _super.call(this, options);\n\n    _this.defineProperties(options);\n\n    var _active$options = _objectSpread({\n      active: options.active !== false\n    }, options),\n        active = _active$options.active;\n    /**\n     * @ignore\n     */\n\n\n    _this.active = active;\n    return _this;\n  }\n  /**\n   * Define control's properties.\n   *\n   * @ignore\n   */\n\n\n  _createClass(Control, [{\n    key: \"defineProperties\",\n    value: function defineProperties(options) {\n      var _this2 = this;\n\n      var _options = _objectSpread({}, options),\n          target = _options.target,\n          element = _options.element,\n          render = _options.render;\n\n      Object.defineProperties(this, {\n        active: {\n          get: function get() {\n            return _this2.get('active');\n          },\n          set: function set(newActive) {\n            _this2.set('active', newActive);\n\n            if (newActive) {\n              _this2.activate();\n            } else {\n              _this2.deactivate();\n            }\n\n            _this2.render();\n          }\n        },\n        map: {\n          get: function get() {\n            return _this2.get('map');\n          },\n          set: function set(map) {\n            // Remove previous node.\n            if (_this2.map && _this2.element && _this2.element.parentNode) {\n              _this2.element.parentNode.removeChild(_this2.element);\n            } // Clean listeners\n\n\n            _this2.deactivate();\n\n            _this2.set('map', map);\n\n            if (_this2.map) {\n              // Add new node\n              var targett = _this2.target || _this2.map.getContainer();\n\n              if (!_this2.element) {\n                _this2.createDefaultElement();\n              }\n\n              if (_this2.element) {\n                targett.appendChild(_this2.element);\n              } // Add listeners\n\n\n              if (_this2.active) {\n                _this2.activate();\n              }\n            }\n\n            _this2.render();\n          }\n        },\n        target: {\n          value: target\n        },\n        element: {\n          value: element,\n          writable: true\n        },\n        render: {\n          /**\n           * @ignore\n           */\n          value: render || this.render,\n          writable: true\n        }\n      });\n    }\n    /**\n     * Add listeners then renders the control.\n     * To be defined in inherited classes.\n     */\n\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      this.deactivate();\n    }\n    /**\n     * Remove listeners added by activate() function then renders the control.\n     * To be defined in inherited classes.\n     */\n    // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {}\n    /**\n     * The default render function. It renders content in the HTML element.\n     * To be defined in inherited classes.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {}\n    /**\n     * The default element to display if this.element is not defined.\n     * To be defined in inherited classes.\n     * @private\n     */\n    // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"createDefaultElement\",\n    value: function createDefaultElement() {}\n  }]);\n\n  return Control;\n}(BaseObject);\n\nexport default Control;","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/common/controls/Control.js"],"names":["BaseObject","Control","options","defineProperties","active","target","element","render","Object","get","set","newActive","activate","deactivate","map","parentNode","removeChild","targett","getContainer","createDefaultElement","appendChild","value","writable"],"mappings":"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","sourcesContent":["import BaseObject from 'ol/Object';\n\n/**\n * A class representing a control to display on map.\n *\n * @example\n * const control = new Control();\n *\n * @classproperty {ol/Map~Map|mapboxgl.Map} map - The map which the control refers to.\n * @classproperty {boolean} active - Active the control.\n * @classproperty {function} render - Render function called whenever the control needs to be rerendered.\n * @classproperty {HTMLElement} element - The HTML element used to render the control. Read only.\n * @classproperty {HTMLElement} target - The HTML element where to render the element property. Default is the map's element. Read only.\n */\nclass Control extends BaseObject {\n  /**\n   * Constructor\n   *\n   * @param {Object} [options] Control options.\n   * @param {boolean} [options.active = true] Whether the control is active or not.\n   * @param {HTMLElement} [options.element] The HTML element used to render the control.\n   * @param {HTMLElement} [options.target] The HTML element where to render the element property. Default is the map's element.\n   * @param {HTMLElement} [options.render] Render function called whenever the control needs to be rerendered.\n   */\n  constructor(options = {}) {\n    super(options);\n    this.defineProperties(options);\n\n    const { active } = {\n      active: options.active !== false,\n      ...options,\n    };\n\n    /**\n     * @ignore\n     */\n    this.active = active;\n  }\n\n  /**\n   * Define control's properties.\n   *\n   * @ignore\n   */\n  defineProperties(options) {\n    const { target, element, render } = {\n      ...options,\n    };\n\n    Object.defineProperties(this, {\n      active: {\n        get: () => {\n          return this.get('active');\n        },\n        set: (newActive) => {\n          this.set('active', newActive);\n          if (newActive) {\n            this.activate();\n          } else {\n            this.deactivate();\n          }\n          this.render();\n        },\n      },\n      map: {\n        get: () => {\n          return this.get('map');\n        },\n        set: (map) => {\n          // Remove previous node.\n          if (this.map && this.element && this.element.parentNode) {\n            this.element.parentNode.removeChild(this.element);\n          }\n\n          // Clean listeners\n          this.deactivate();\n\n          this.set('map', map);\n\n          if (this.map) {\n            // Add new node\n            const targett = this.target || this.map.getContainer();\n\n            if (!this.element) {\n              this.createDefaultElement();\n            }\n\n            if (this.element) {\n              targett.appendChild(this.element);\n            }\n\n            // Add listeners\n            if (this.active) {\n              this.activate();\n            }\n          }\n          this.render();\n        },\n      },\n      target: {\n        value: target,\n      },\n      element: {\n        value: element,\n        writable: true,\n      },\n      render: {\n        /**\n         * @ignore\n         */\n        value: render || this.render,\n        writable: true,\n      },\n    });\n  }\n\n  /**\n   * Add listeners then renders the control.\n   * To be defined in inherited classes.\n   */\n  activate() {\n    this.deactivate();\n  }\n\n  /**\n   * Remove listeners added by activate() function then renders the control.\n   * To be defined in inherited classes.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  deactivate() {}\n\n  /**\n   * The default render function. It renders content in the HTML element.\n   * To be defined in inherited classes.\n   */\n  render() {}\n\n  /**\n   * The default element to display if this.element is not defined.\n   * To be defined in inherited classes.\n   * @private\n   */\n  // eslint-disable-next-line class-methods-use-this\n  createDefaultElement() {}\n}\n\nexport default Control;\n"]},"metadata":{},"sourceType":"module"}