{"ast":null,"code":"import _slicedToArray from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* eslint-disable no-underscore-dangle */\nimport { toLonLat } from 'ol/proj';\nimport mapboxgl from 'mapbox-gl';\nimport Source from 'ol/source/Source';\nimport OLLayer from 'ol/layer/Layer';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport Layer from './Layer';\nimport getMapboxMapCopyrights from '../../common/utils/getMapboxMapCopyrights';\nimport getMapboxStyleUrl from '../../common/utils/getMapboxStyleUrl';\n/**\n * A class representing Mapboxlayer to display on BasicMap\n *\n * @example\n * import { MapboxLayer } from 'mobility-toolbox-js/ol';\n *\n * const layer = new MapboxLayer({\n *   url: 'https://maps.geops.io/styles/travic_v2/style.json',\n *   apikey: 'yourApiKey',\n * });\n *\n * @extends {Layer}\n */\n\nvar MapboxLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(MapboxLayer, _Layer);\n\n  var _super = _createSuper(MapboxLayer);\n\n  /**\n   * Constructor.\n   *\n   * @param {Object} options\n   * @param {boolean} [options.preserveDrawingBuffer=false] If true able to export the canvas.\n   * @param {number} [options.fadeDuration=300] Duration of the fade effect in ms.\n   */\n  function MapboxLayer() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, MapboxLayer);\n\n    var mbLayer = new OLLayer({\n      source: new Source({}),\n      render: function render(frameState) {\n        if (!_this.mbMap) {\n          // eslint-disable-next-line no-console\n          console.warn(\"Mapbox map doesn't exist.\");\n          return null;\n        }\n\n        var changed = false;\n\n        var canvas = _this.mbMap.getCanvas();\n\n        var viewState = frameState.viewState;\n\n        var visible = _this.olLayer.getVisible();\n\n        if (_this.renderState.visible !== visible) {\n          canvas.style.display = visible ? 'block' : 'none';\n          _this.renderState.visible = visible; // Needed since mapbox-gl 1.9.0.\n          // Without you don't see others ol layers on top.\n\n          canvas.style.position = 'absolute';\n        }\n\n        var opacity = _this.olLayer.getOpacity();\n\n        if (_this.renderState.opacity !== opacity) {\n          canvas.style.opacity = opacity;\n          _this.renderState.opacity = opacity;\n        } // adjust view parameters in mapbox\n\n\n        var rotation = viewState.rotation;\n\n        if (_this.renderState.rotation !== rotation) {\n          _this.mbMap.rotateTo(-(rotation || 0) * 180 / Math.PI, {\n            animate: false\n          });\n\n          changed = true;\n          _this.renderState.rotation = rotation;\n        }\n\n        if (_this.renderState.zoom !== viewState.zoom || _this.renderState.center[0] !== viewState.center[0] || _this.renderState.center[1] !== viewState.center[1]) {\n          _this.mbMap.jumpTo({\n            center: toLonLat(viewState.center),\n            zoom: viewState.zoom - 1,\n            animate: false\n          });\n\n          changed = true;\n          _this.renderState.zoom = viewState.zoom;\n          _this.renderState.center = viewState.center;\n        }\n\n        var size = _this.map.getSize();\n\n        if (_this.renderState.size[0] !== size[0] || _this.renderState.size[1] !== size[1]) {\n          changed = true;\n          _this.renderState.size = size;\n        } // cancel the scheduled update & trigger synchronous redraw\n        // see https://github.com/mapbox/mapbox-gl-js/issues/7893#issue-408992184\n        // NOTE: THIS MIGHT BREAK WHEN UPDATING MAPBOX\n\n\n        if (_this.mbMap && _this.mbMap.style && _this.mbMap.isStyleLoaded() && changed) {\n          try {\n            if (_this.mbMap._frame) {\n              _this.mbMap._frame.cancel();\n\n              _this.mbMap._frame = null;\n            }\n\n            _this.mbMap._render();\n          } catch (err) {\n            // ignore render errors because it's probably related to\n            // a render during an update of the style.\n            // eslint-disable-next-line no-console\n            console.warn(err);\n          }\n        }\n\n        return canvas;\n      }\n    });\n    _this = _super.call(this, _objectSpread(_objectSpread({}, options), {}, {\n      olLayer: mbLayer\n    }));\n    /**\n     * Url of the mapbox style.\n     * @type {string}\n     * @private\n     */\n\n    _this.styleUrl = options.url;\n    /**\n     * Api key for the url of the mapbox style.\n     * If set to false, the apiKey is not required.\n     * @type {string}\n     * @private\n     */\n\n    _this.apiKey = options.apiKey;\n    /**\n     * Name of the apiKey to set in the url request.\n     * Default is 'key'.\n     * @type {string}\n     * @private\n     */\n\n    _this.apiKeyName = options.apiKeyName || 'key';\n    /**\n     * @ignores\n     */\n\n    _this.updateAttribution = _this.updateAttribution.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * Initialize the layer and listen to feature clicks.\n   * @param {ol/Map~Map} map\n   */\n\n\n  _createClass(MapboxLayer, [{\n    key: \"init\",\n    value: function init(map) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(MapboxLayer.prototype), \"init\", this).call(this, map);\n\n      if (!this.map || this.mbMap) {\n        return;\n      }\n      /**\n       * The feature format.\n       * @type {ol/format/GeoJSON}\n       */\n\n\n      this.format = new GeoJSON({\n        featureProjection: this.map.getView().getProjection()\n      });\n      this.loadMbMap();\n      this.olListenersKeys.push(this.map.on('change:size', function () {\n        try {\n          if (_this2.mbMap) {\n            _this2.mbMap.resize();\n          }\n        } catch (err) {\n          // ignore render errors\n          // eslint-disable-next-line no-console\n          console.warn(err);\n        }\n      }));\n    }\n    /**\n     * Returns a style URL with apiKey & apiKeyName infos.\n     */\n\n  }, {\n    key: \"createStyleUrl\",\n    value: function createStyleUrl() {\n      return getMapboxStyleUrl(this.apiKey, this.apiKeyName, this.styleUrl);\n    }\n    /**\n     * Create the mapbox map.\n     * @private\n     */\n\n  }, {\n    key: \"loadMbMap\",\n    value: function loadMbMap() {\n      var _this3 = this;\n\n      this.olListenersKeys.push(this.map.on('change:target', function () {\n        _this3.loadMbMap();\n      }));\n\n      if (!this.map.getTargetElement()) {\n        return;\n      }\n\n      if (!this.visible) {\n        // On next change of visibility we load the map\n        this.olListenersKeys.push(this.once('change:visible', function () {\n          _this3.loadMbMap();\n        }));\n        return;\n      } // If the map hasn't been resized, the center could be [NaN,NaN].\n      // We set default good value for the mapbox map, to avoid the app crashes.\n\n\n      var _this$map$getView$get = this.map.getView().getCenter(),\n          _this$map$getView$get2 = _slicedToArray(_this$map$getView$get, 2),\n          x = _this$map$getView$get2[0],\n          y = _this$map$getView$get2[1];\n\n      if (!x || !y) {\n        x = 0;\n        y = 0;\n      }\n\n      var style = this.createStyleUrl();\n\n      try {\n        /**\n         * A mapbox map\n         * @type {mapboxgl.Map}\n         */\n        this.mbMap = new mapboxgl.Map({\n          style: style,\n          attributionControl: false,\n          boxZoom: false,\n          center: toLonLat([x, y]),\n          container: this.map.getTargetElement(),\n          interactive: false,\n          fadeDuration: 'fadeDuration' in this.options ? this.options.fadeDuration : 300,\n          // Needs to be true to able to export the canvas, but could lead to performance issue on mobile.\n          preserveDrawingBuffer: this.options.preserveDrawingBuffer || false\n        });\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.warn('Failed creating mapbox map: ', err);\n      } // Options the last render run did happen. If something changes\n      // we have to render again\n\n      /** @ignore */\n\n\n      this.renderState = {\n        center: [x, y],\n        zoom: null,\n        rotation: null,\n        visible: null,\n        opacity: null,\n        size: [0, 0]\n      };\n      this.mbMap.once('load', function () {\n        /**\n         * Is the map loaded.\n         * @type {boolean}\n         */\n        _this3.loaded = true;\n        _this3.copyrights = _this3.copyrights || getMapboxMapCopyrights(_this3.mbMap) || [];\n\n        _this3.olLayer.getSource().setAttributions(_this3.copyrights);\n\n        _this3.dispatchEvent({\n          type: 'load',\n          target: _this3\n        });\n      });\n      var mapboxCanvas = this.mbMap.getCanvas();\n\n      if (mapboxCanvas) {\n        if (this.options.tabIndex) {\n          mapboxCanvas.setAttribute('tabindex', this.options.tabIndex);\n        } else {\n          // With a tabIndex='-1' the mouse events works but the map is not focused when we click on it\n          // so we remove completely the tabIndex attribute.\n          mapboxCanvas.removeAttribute('tabindex');\n        }\n      }\n\n      this.mbMap.on('idle', this.updateAttribution);\n    }\n  }, {\n    key: \"updateAttribution\",\n    value: function updateAttribution(evt) {\n      var newAttributions = this.copyrights || getMapboxMapCopyrights(evt.target) || [];\n\n      if (this.copyrights.toString() !== newAttributions.toString()) {\n        this.olLayer.getSource().setAttributions(newAttributions);\n      }\n    }\n    /**\n     * Request feature information for a given coordinate.\n     * @param {ol/coordinate~Coordinate} coordinate Coordinate to request the information at.\n     * @param {Object} options A [mapboxgl.Map#queryrenderedfeatures](https://docs.mapbox.com/mapbox-gl-js/api/map/#map#queryrenderedfeatures) options parameter.\n     * @returns {Promise<Object>} Promise with features, layer and coordinate\n     *  or null if no feature was hit. The original Mapbox feature is available as a property named 'mapboxFeature'.\n     */\n\n  }, {\n    key: \"getFeatureInfoAtCoordinate\",\n    value: function getFeatureInfoAtCoordinate(coordinate, options) {\n      var _this4 = this;\n\n      // Ignore the getFeatureInfo until the mapbox map is loaded\n      if (!options || !this.format || !this.mbMap || !this.mbMap.isStyleLoaded()) {\n        return Promise.resolve({\n          coordinate: coordinate,\n          features: [],\n          layer: this\n        });\n      }\n\n      var pixel = coordinate && this.mbMap.project(toLonLat(coordinate)); // At this point we get GeoJSON Mapbox feature, we transform it to an OpenLayers\n      // feature to be consistent with other layers.\n\n      var features = this.mbMap.queryRenderedFeatures(pixel, options).map(function (feature) {\n        var olFeature = _this4.format.readFeature(feature);\n\n        if (olFeature) {\n          // We save the original mapbox feature to avoid losing informations\n          // potentially needed for other functionnality like highlighting\n          // (id, layer id, source, sourceLayer ...)\n          olFeature.set('mapboxFeature', feature);\n        }\n\n        return olFeature;\n      });\n      return Promise.resolve({\n        layer: this,\n        features: features,\n        coordinate: coordinate\n      });\n    }\n    /**\n     * Terminate what was initialized in init function. Remove layer, events...\n     */\n\n  }, {\n    key: \"terminate\",\n    value: function terminate() {\n      if (this.mbMap) {\n        this.mbMap.off('idle', this.updateAttribution); // Some asynchrone repaints are triggered even if the mbMap has been removed,\n        // to avoid display of errors we set an empty function.\n\n        this.mbMap.triggerRepaint = function () {};\n\n        this.mbMap.remove();\n        this.mbMap = null;\n      }\n\n      this.loaded = false;\n\n      _get(_getPrototypeOf(MapboxLayer.prototype), \"terminate\", this).call(this);\n    }\n    /**\n     * Create a copy of the MapboxLayer.\n     * @param {Object} newOptions Options to override\n     * @returns {MapboxLayer} A MapboxLayer\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(newOptions) {\n      return new MapboxLayer(_objectSpread(_objectSpread({}, this.options), newOptions));\n    }\n  }]);\n\n  return MapboxLayer;\n}(Layer);\n\nexport { MapboxLayer as default };","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/ol/layers/MapboxLayer.js"],"names":["toLonLat","mapboxgl","Source","OLLayer","GeoJSON","Layer","getMapboxMapCopyrights","getMapboxStyleUrl","MapboxLayer","options","mbLayer","source","render","frameState","mbMap","console","warn","changed","canvas","getCanvas","viewState","visible","olLayer","getVisible","renderState","style","display","position","opacity","getOpacity","rotation","rotateTo","Math","PI","animate","zoom","center","jumpTo","size","map","getSize","isStyleLoaded","_frame","cancel","_render","err","styleUrl","url","apiKey","apiKeyName","updateAttribution","bind","format","featureProjection","getView","getProjection","loadMbMap","olListenersKeys","push","on","resize","getTargetElement","once","getCenter","x","y","createStyleUrl","Map","attributionControl","boxZoom","container","interactive","fadeDuration","preserveDrawingBuffer","loaded","copyrights","getSource","setAttributions","dispatchEvent","type","target","mapboxCanvas","tabIndex","setAttribute","removeAttribute","evt","newAttributions","toString","coordinate","Promise","resolve","features","layer","pixel","project","queryRenderedFeatures","feature","olFeature","readFeature","set","off","triggerRepaint","remove","newOptions"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { toLonLat } from 'ol/proj';\nimport mapboxgl from 'mapbox-gl';\nimport Source from 'ol/source/Source';\nimport OLLayer from 'ol/layer/Layer';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport Layer from './Layer';\nimport getMapboxMapCopyrights from '../../common/utils/getMapboxMapCopyrights';\nimport getMapboxStyleUrl from '../../common/utils/getMapboxStyleUrl';\n\n/**\n * A class representing Mapboxlayer to display on BasicMap\n *\n * @example\n * import { MapboxLayer } from 'mobility-toolbox-js/ol';\n *\n * const layer = new MapboxLayer({\n *   url: 'https://maps.geops.io/styles/travic_v2/style.json',\n *   apikey: 'yourApiKey',\n * });\n *\n * @extends {Layer}\n */\nexport default class MapboxLayer extends Layer {\n  /**\n   * Constructor.\n   *\n   * @param {Object} options\n   * @param {boolean} [options.preserveDrawingBuffer=false] If true able to export the canvas.\n   * @param {number} [options.fadeDuration=300] Duration of the fade effect in ms.\n   */\n  constructor(options = {}) {\n    const mbLayer = new OLLayer({\n      source: new Source({}),\n      render: (frameState) => {\n        if (!this.mbMap) {\n          // eslint-disable-next-line no-console\n          console.warn(\"Mapbox map doesn't exist.\");\n          return null;\n        }\n        let changed = false;\n        const canvas = this.mbMap.getCanvas();\n        const { viewState } = frameState;\n\n        const visible = this.olLayer.getVisible();\n        if (this.renderState.visible !== visible) {\n          canvas.style.display = visible ? 'block' : 'none';\n          this.renderState.visible = visible;\n          // Needed since mapbox-gl 1.9.0.\n          // Without you don't see others ol layers on top.\n          canvas.style.position = 'absolute';\n        }\n\n        const opacity = this.olLayer.getOpacity();\n        if (this.renderState.opacity !== opacity) {\n          canvas.style.opacity = opacity;\n          this.renderState.opacity = opacity;\n        }\n\n        // adjust view parameters in mapbox\n        const { rotation } = viewState;\n        if (this.renderState.rotation !== rotation) {\n          this.mbMap.rotateTo((-(rotation || 0) * 180) / Math.PI, {\n            animate: false,\n          });\n          changed = true;\n          this.renderState.rotation = rotation;\n        }\n\n        if (\n          this.renderState.zoom !== viewState.zoom ||\n          this.renderState.center[0] !== viewState.center[0] ||\n          this.renderState.center[1] !== viewState.center[1]\n        ) {\n          this.mbMap.jumpTo({\n            center: toLonLat(viewState.center),\n            zoom: viewState.zoom - 1,\n            animate: false,\n          });\n          changed = true;\n          this.renderState.zoom = viewState.zoom;\n          this.renderState.center = viewState.center;\n        }\n\n        const size = this.map.getSize();\n        if (\n          this.renderState.size[0] !== size[0] ||\n          this.renderState.size[1] !== size[1]\n        ) {\n          changed = true;\n          this.renderState.size = size;\n        }\n\n        // cancel the scheduled update & trigger synchronous redraw\n        // see https://github.com/mapbox/mapbox-gl-js/issues/7893#issue-408992184\n        // NOTE: THIS MIGHT BREAK WHEN UPDATING MAPBOX\n        if (\n          this.mbMap &&\n          this.mbMap.style &&\n          this.mbMap.isStyleLoaded() &&\n          changed\n        ) {\n          try {\n            if (this.mbMap._frame) {\n              this.mbMap._frame.cancel();\n              this.mbMap._frame = null;\n            }\n            this.mbMap._render();\n          } catch (err) {\n            // ignore render errors because it's probably related to\n            // a render during an update of the style.\n            // eslint-disable-next-line no-console\n            console.warn(err);\n          }\n        }\n\n        return canvas;\n      },\n    });\n\n    super({\n      ...options,\n      olLayer: mbLayer,\n    });\n\n    /**\n     * Url of the mapbox style.\n     * @type {string}\n     * @private\n     */\n    this.styleUrl = options.url;\n\n    /**\n     * Api key for the url of the mapbox style.\n     * If set to false, the apiKey is not required.\n     * @type {string}\n     * @private\n     */\n    this.apiKey = options.apiKey;\n\n    /**\n     * Name of the apiKey to set in the url request.\n     * Default is 'key'.\n     * @type {string}\n     * @private\n     */\n    this.apiKeyName = options.apiKeyName || 'key';\n\n    /**\n     * @ignores\n     */\n    this.updateAttribution = this.updateAttribution.bind(this);\n  }\n\n  /**\n   * Initialize the layer and listen to feature clicks.\n   * @param {ol/Map~Map} map\n   */\n  init(map) {\n    super.init(map);\n\n    if (!this.map || this.mbMap) {\n      return;\n    }\n\n    /**\n     * The feature format.\n     * @type {ol/format/GeoJSON}\n     */\n    this.format = new GeoJSON({\n      featureProjection: this.map.getView().getProjection(),\n    });\n\n    this.loadMbMap();\n\n    this.olListenersKeys.push(\n      this.map.on('change:size', () => {\n        try {\n          if (this.mbMap) {\n            this.mbMap.resize();\n          }\n        } catch (err) {\n          // ignore render errors\n          // eslint-disable-next-line no-console\n          console.warn(err);\n        }\n      }),\n    );\n  }\n\n  /**\n   * Returns a style URL with apiKey & apiKeyName infos.\n   */\n  createStyleUrl() {\n    return getMapboxStyleUrl(this.apiKey, this.apiKeyName, this.styleUrl);\n  }\n\n  /**\n   * Create the mapbox map.\n   * @private\n   */\n  loadMbMap() {\n    this.olListenersKeys.push(\n      this.map.on('change:target', () => {\n        this.loadMbMap();\n      }),\n    );\n\n    if (!this.map.getTargetElement()) {\n      return;\n    }\n\n    if (!this.visible) {\n      // On next change of visibility we load the map\n      this.olListenersKeys.push(\n        this.once('change:visible', () => {\n          this.loadMbMap();\n        }),\n      );\n      return;\n    }\n\n    // If the map hasn't been resized, the center could be [NaN,NaN].\n    // We set default good value for the mapbox map, to avoid the app crashes.\n    let [x, y] = this.map.getView().getCenter();\n    if (!x || !y) {\n      x = 0;\n      y = 0;\n    }\n\n    const style = this.createStyleUrl();\n    try {\n      /**\n       * A mapbox map\n       * @type {mapboxgl.Map}\n       */\n      this.mbMap = new mapboxgl.Map({\n        style,\n        attributionControl: false,\n        boxZoom: false,\n        center: toLonLat([x, y]),\n        container: this.map.getTargetElement(),\n        interactive: false,\n        fadeDuration:\n          'fadeDuration' in this.options ? this.options.fadeDuration : 300,\n        // Needs to be true to able to export the canvas, but could lead to performance issue on mobile.\n        preserveDrawingBuffer: this.options.preserveDrawingBuffer || false,\n      });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.warn('Failed creating mapbox map: ', err);\n    }\n\n    // Options the last render run did happen. If something changes\n    // we have to render again\n    /** @ignore */\n    this.renderState = {\n      center: [x, y],\n      zoom: null,\n      rotation: null,\n      visible: null,\n      opacity: null,\n      size: [0, 0],\n    };\n\n    this.mbMap.once('load', () => {\n      /**\n       * Is the map loaded.\n       * @type {boolean}\n       */\n      this.loaded = true;\n\n      this.copyrights =\n        this.copyrights || getMapboxMapCopyrights(this.mbMap) || [];\n\n      this.olLayer.getSource().setAttributions(this.copyrights);\n\n      this.dispatchEvent({\n        type: 'load',\n        target: this,\n      });\n    });\n\n    const mapboxCanvas = this.mbMap.getCanvas();\n    if (mapboxCanvas) {\n      if (this.options.tabIndex) {\n        mapboxCanvas.setAttribute('tabindex', this.options.tabIndex);\n      } else {\n        // With a tabIndex='-1' the mouse events works but the map is not focused when we click on it\n        // so we remove completely the tabIndex attribute.\n        mapboxCanvas.removeAttribute('tabindex');\n      }\n    }\n\n    this.mbMap.on('idle', this.updateAttribution);\n  }\n\n  updateAttribution(evt) {\n    const newAttributions =\n      this.copyrights || getMapboxMapCopyrights(evt.target) || [];\n    if (this.copyrights.toString() !== newAttributions.toString()) {\n      this.olLayer.getSource().setAttributions(newAttributions);\n    }\n  }\n\n  /**\n   * Request feature information for a given coordinate.\n   * @param {ol/coordinate~Coordinate} coordinate Coordinate to request the information at.\n   * @param {Object} options A [mapboxgl.Map#queryrenderedfeatures](https://docs.mapbox.com/mapbox-gl-js/api/map/#map#queryrenderedfeatures) options parameter.\n   * @returns {Promise<Object>} Promise with features, layer and coordinate\n   *  or null if no feature was hit. The original Mapbox feature is available as a property named 'mapboxFeature'.\n   */\n  getFeatureInfoAtCoordinate(coordinate, options) {\n    // Ignore the getFeatureInfo until the mapbox map is loaded\n    if (\n      !options ||\n      !this.format ||\n      !this.mbMap ||\n      !this.mbMap.isStyleLoaded()\n    ) {\n      return Promise.resolve({ coordinate, features: [], layer: this });\n    }\n\n    const pixel = coordinate && this.mbMap.project(toLonLat(coordinate));\n    // At this point we get GeoJSON Mapbox feature, we transform it to an OpenLayers\n    // feature to be consistent with other layers.\n    const features = this.mbMap\n      .queryRenderedFeatures(pixel, options)\n      .map((feature) => {\n        const olFeature = this.format.readFeature(feature);\n        if (olFeature) {\n          // We save the original mapbox feature to avoid losing informations\n          // potentially needed for other functionnality like highlighting\n          // (id, layer id, source, sourceLayer ...)\n          olFeature.set('mapboxFeature', feature);\n        }\n        return olFeature;\n      });\n\n    return Promise.resolve({\n      layer: this,\n      features,\n      coordinate,\n    });\n  }\n\n  /**\n   * Terminate what was initialized in init function. Remove layer, events...\n   */\n  terminate() {\n    if (this.mbMap) {\n      this.mbMap.off('idle', this.updateAttribution);\n      // Some asynchrone repaints are triggered even if the mbMap has been removed,\n      // to avoid display of errors we set an empty function.\n      this.mbMap.triggerRepaint = () => {};\n      this.mbMap.remove();\n      this.mbMap = null;\n    }\n    this.loaded = false;\n    super.terminate();\n  }\n\n  /**\n   * Create a copy of the MapboxLayer.\n   * @param {Object} newOptions Options to override\n   * @returns {MapboxLayer} A MapboxLayer\n   */\n  clone(newOptions) {\n    return new MapboxLayer({ ...this.options, ...newOptions });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}