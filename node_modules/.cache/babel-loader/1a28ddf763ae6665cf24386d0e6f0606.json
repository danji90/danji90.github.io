{"ast":null,"code":"import _toConsumableArray from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport OLMap from 'ol/Map';\nimport { defaults as defaultControls } from 'ol/control';\nimport Layer from './layers/Layer';\nimport mixin from '../common/mixins/MapMixin';\nimport CopyrightControl from './controls/CopyrightControl';\n/**\n * An OpenLayers map for handling mobility layers and controls.\n *\n * @example\n * import { Map } from 'mobility-toolbox-js/ol';\n *\n * const map = new Map({\n *   target: 'map',\n *   view: new View({\n *     center: [0, 0],\n *     zoom: 1,\n *  }),\n * });\n *\n * @see <a href=\"/example/ol-map\">Map example</a>\n *\n * @extends {ol/Map~Map}\n */\n\nvar Map = /*#__PURE__*/function (_mixin) {\n  _inherits(Map, _mixin);\n\n  var _super = _createSuper(Map);\n\n  /**\n   * Constructor.\n   *\n   * @param {Object} options See [ol/Map~Map](https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html) options documentation.\n   * @param {Array<Layer|ol/layer/Layer~Layer>} [options.layers] Array of layers.\n   */\n  function Map() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Map);\n\n    return _super.call(this, _objectSpread({\n      controls: [].concat(_toConsumableArray(defaultControls({\n        attribution: false\n      }).getArray()), [new CopyrightControl()])\n    }, options));\n  }\n  /**\n   * Get the HTML element containing the map.\n   *\n   * @return {HTMLElement} The HTML element of the container.\n   */\n\n\n  _createClass(Map, [{\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this.getTargetElement();\n    }\n    /**\n     * Adds a layer to the map.\n     * @param {Layer|ol/layer/Layer~Layer} layer The layer to add.\n     */\n\n  }, {\n    key: \"addLayer\",\n    value: function addLayer(layer) {\n      if (layer instanceof Layer) {\n        // layer is an mobility layer\n        layer.init(this);\n        this.mobilityLayers.push(layer);\n\n        if (layer.olLayer) {\n          _get(_getPrototypeOf(Map.prototype), \"addLayer\", this).call(this, layer.olLayer);\n        }\n\n        this.dispatchEvent({\n          type: 'change:mobilityLayers',\n          target: this\n        });\n      } else {\n        // layer is an OpenLayer layer\n        _get(_getPrototypeOf(Map.prototype), \"addLayer\", this).call(this, layer);\n      }\n    }\n    /**\n     * Removes a given layer from the map.\n     * @param {Layer|ol/layer/Layer~Layer} layer The layer to remove.\n     */\n\n  }, {\n    key: \"removeLayer\",\n    value: function removeLayer(layer) {\n      if (layer instanceof Layer) {\n        layer.terminate();\n        this.mobilityLayers = this.mobilityLayers.filter(function (l) {\n          return l !== layer;\n        });\n\n        if (layer.olLayer) {\n          _get(_getPrototypeOf(Map.prototype), \"removeLayer\", this).call(this, layer);\n        }\n      } else {\n        // layer is an OpenLayer layer\n        _get(_getPrototypeOf(Map.prototype), \"removeLayer\", this).call(this, layer);\n      }\n    }\n    /**\n     * Adds a given control to the map.\n     * @param {Control|ol/control/Control~Control} control The control to add.\n     */\n\n  }, {\n    key: \"addControl\",\n    value: function addControl(control) {\n      _get(_getPrototypeOf(Map.prototype), \"addControl\", this).call(this, control);\n    }\n    /**\n     * Removes a given control to the map.\n     * @param {Control|ol/control/Control~Control} control The control to remove.\n     */\n\n  }, {\n    key: \"removeControl\",\n    value: function removeControl(control) {\n      _get(_getPrototypeOf(Map.prototype), \"removeControl\", this).call(this, control);\n    }\n  }]);\n\n  return Map;\n}(mixin(OLMap));\n\nexport default Map;","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/ol/Map.js"],"names":["OLMap","defaults","defaultControls","Layer","mixin","CopyrightControl","Map","options","controls","attribution","getArray","getTargetElement","layer","init","mobilityLayers","push","olLayer","dispatchEvent","type","target","terminate","filter","l","control"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,QAAlB;AACA,SAASC,QAAQ,IAAIC,eAArB,QAA4C,YAA5C;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,G;;;;;AACJ;AACF;AACA;AACA;AACA;AACA;AACE,iBAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAAA;AAEtBC,MAAAA,QAAQ,+BACHN,eAAe,CAAC;AAAEO,QAAAA,WAAW,EAAE;AAAf,OAAD,CAAf,CAAwCC,QAAxC,EADG,IAEN,IAAIL,gBAAJ,EAFM;AAFc,OAMnBE,OANmB;AAQzB;AAED;AACF;AACA;AACA;AACA;;;;;WACE,wBAAe;AACb,aAAO,KAAKI,gBAAL,EAAP;AACD;AAED;AACF;AACA;AACA;;;;WACE,kBAASC,KAAT,EAAgB;AACd,UAAIA,KAAK,YAAYT,KAArB,EAA4B;AAC1B;AACAS,QAAAA,KAAK,CAACC,IAAN,CAAW,IAAX;AACA,aAAKC,cAAL,CAAoBC,IAApB,CAAyBH,KAAzB;;AAEA,YAAIA,KAAK,CAACI,OAAV,EAAmB;AACjB,4EAAeJ,KAAK,CAACI,OAArB;AACD;;AAED,aAAKC,aAAL,CAAmB;AACjBC,UAAAA,IAAI,EAAE,uBADW;AAEjBC,UAAAA,MAAM,EAAE;AAFS,SAAnB;AAID,OAbD,MAaO;AACL;AACA,0EAAeP,KAAf;AACD;AACF;AAED;AACF;AACA;AACA;;;;WACE,qBAAYA,KAAZ,EAAmB;AACjB,UAAIA,KAAK,YAAYT,KAArB,EAA4B;AAC1BS,QAAAA,KAAK,CAACQ,SAAN;AACA,aAAKN,cAAL,GAAsB,KAAKA,cAAL,CAAoBO,MAApB,CAA2B,UAACC,CAAD;AAAA,iBAAOA,CAAC,KAAKV,KAAb;AAAA,SAA3B,CAAtB;;AACA,YAAIA,KAAK,CAACI,OAAV,EAAmB;AACjB,+EAAkBJ,KAAlB;AACD;AACF,OAND,MAMO;AACL;AACA,6EAAkBA,KAAlB;AACD;AACF;AAED;AACF;AACA;AACA;;;;WACE,oBAAWW,OAAX,EAAoB;AAClB,0EAAiBA,OAAjB;AACD;AAED;AACF;AACA;AACA;;;;WACE,uBAAcA,OAAd,EAAuB;AACrB,6EAAoBA,OAApB;AACD;;;;EAjFenB,KAAK,CAACJ,KAAD,C;;AAoFvB,eAAeM,GAAf","sourcesContent":["import OLMap from 'ol/Map';\nimport { defaults as defaultControls } from 'ol/control';\nimport Layer from './layers/Layer';\nimport mixin from '../common/mixins/MapMixin';\nimport CopyrightControl from './controls/CopyrightControl';\n\n/**\n * An OpenLayers map for handling mobility layers and controls.\n *\n * @example\n * import { Map } from 'mobility-toolbox-js/ol';\n *\n * const map = new Map({\n *   target: 'map',\n *   view: new View({\n *     center: [0, 0],\n *     zoom: 1,\n *  }),\n * });\n *\n * @see <a href=\"/example/ol-map\">Map example</a>\n *\n * @extends {ol/Map~Map}\n */\nclass Map extends mixin(OLMap) {\n  /**\n   * Constructor.\n   *\n   * @param {Object} options See [ol/Map~Map](https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html) options documentation.\n   * @param {Array<Layer|ol/layer/Layer~Layer>} [options.layers] Array of layers.\n   */\n  constructor(options = {}) {\n    super({\n      controls: [\n        ...defaultControls({ attribution: false }).getArray(),\n        new CopyrightControl(),\n      ],\n      ...options,\n    });\n  }\n\n  /**\n   * Get the HTML element containing the map.\n   *\n   * @return {HTMLElement} The HTML element of the container.\n   */\n  getContainer() {\n    return this.getTargetElement();\n  }\n\n  /**\n   * Adds a layer to the map.\n   * @param {Layer|ol/layer/Layer~Layer} layer The layer to add.\n   */\n  addLayer(layer) {\n    if (layer instanceof Layer) {\n      // layer is an mobility layer\n      layer.init(this);\n      this.mobilityLayers.push(layer);\n\n      if (layer.olLayer) {\n        super.addLayer(layer.olLayer);\n      }\n\n      this.dispatchEvent({\n        type: 'change:mobilityLayers',\n        target: this,\n      });\n    } else {\n      // layer is an OpenLayer layer\n      super.addLayer(layer);\n    }\n  }\n\n  /**\n   * Removes a given layer from the map.\n   * @param {Layer|ol/layer/Layer~Layer} layer The layer to remove.\n   */\n  removeLayer(layer) {\n    if (layer instanceof Layer) {\n      layer.terminate();\n      this.mobilityLayers = this.mobilityLayers.filter((l) => l !== layer);\n      if (layer.olLayer) {\n        super.removeLayer(layer);\n      }\n    } else {\n      // layer is an OpenLayer layer\n      super.removeLayer(layer);\n    }\n  }\n\n  /**\n   * Adds a given control to the map.\n   * @param {Control|ol/control/Control~Control} control The control to add.\n   */\n  addControl(control) {\n    super.addControl(control);\n  }\n\n  /**\n   * Removes a given control to the map.\n   * @param {Control|ol/control/Control~Control} control The control to remove.\n   */\n  removeControl(control) {\n    super.removeControl(control);\n  }\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}