{"ast":null,"code":"import _objectSpread from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _get from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable class-methods-use-this */\n\n/* eslint-disable max-classes-per-file */\nimport qs from 'query-string';\nimport { getUTCDateString, getUTCTimeString } from '../timeUtils';\nimport { getRadius, getBgColor, getDelayColor, getDelayText, getTextColor, getTextSize } from '../trackerConfig';\nimport { TrajservAPI } from '../../api';\n/**\n * TrajservLayerInterface.\n *\n * @classproperty {boolean} isTrackerLayer - Property for duck typing since `instanceof` is not working when the instance was created on different bundles.\n * @classproperty {boolean} isHoverActive - Activate/deactivate pointer hover effect.\n * @classproperty {function} style - Style of the vehicle.\n * @classproperty {FilterFunction} filter - Time speed.\n * @classproperty {function} sort - Set the filter for tracker features.\n *\n * @extends {TrackerLayerInterface}\n */\n\nexport var TrajservLayerInterface = /*#__PURE__*/function () {\n  function TrajservLayerInterface() {\n    _classCallCheck(this, TrajservLayerInterface);\n  }\n\n  _createClass(TrajservLayerInterface, [{\n    key: \"init\",\n    value:\n    /**\n     * Initialize the layer and listen to feature clicks.\n     * @param {ol/Map~Map|mapboxgl.Map} map A map.\n     * @override\n     */\n    function init(map) {}\n    /**\n     * Start to update trajectories and initialize the filter.\n     * @override\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {}\n    /**\n     * Stop to update trajectories.\n     * @override\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {}\n    /**\n     * Set the tracker filter property using class properties.\n     * @private\n     */\n\n  }, {\n    key: \"addTrackerFilters\",\n    value: function addTrackerFilters() {}\n    /**\n     * Abort http requests.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"abortFetchTrajectories\",\n    value: function abortFetchTrajectories() {}\n    /**\n     * Fetch stations information with a trajectory id.\n     * @param {number} trajId The id of the trajectory.\n     * @private\n     */\n\n  }, {\n    key: \"updateTrajectoryStations\",\n    value: function updateTrajectoryStations(trajId) {}\n    /**\n     * Returns the URL parameters.\n     * @param {Object} extraParams Extra parameters\n     * @returns {Object}\n     * @private\n     */\n\n  }, {\n    key: \"getParams\",\n    value: function getParams() {\n      var extraParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    }\n    /**\n     * Start the update of trajectories.\n     * @private\n     */\n\n  }, {\n    key: \"startUpdateTrajectories\",\n    value: function startUpdateTrajectories() {}\n    /**\n     * Stop the update of trajectories.\n     * @private\n     */\n\n  }, {\n    key: \"stopUpdateTrajectories\",\n    value: function stopUpdateTrajectories() {}\n    /**\n     * Update the trajectories\n     * @private\n     */\n\n  }, {\n    key: \"updateTrajectories\",\n    value: function updateTrajectories() {}\n    /**\n     * Define the style of the vehicle.\n     * Draw a colored circle depending on train delay.\n     *\n     * @param {Object} props Properties\n     * @private\n     */\n\n  }, {\n    key: \"defaultStyle\",\n    value: function defaultStyle(props) {}\n  }]);\n\n  return TrajservLayerInterface;\n}();\nvar LINE_FILTER = 'publishedlinename';\nvar ROUTE_FILTER = 'tripnumber';\nvar OPERATOR_FILTER = 'operator';\n/**\n * Create a array of filter functions based on some parameters.\n * @param {string} line\n * @param {string} route\n * @param {string} operator\n * @param {string} regexLine\n * @private\n */\n\nvar createFilters = function createFilters(line, route, operator, regexLine) {\n  var filterList = [];\n\n  if (!line && !route && !operator && !regexLine) {\n    return null;\n  }\n\n  if (regexLine) {\n    var regexLineList = typeof regexLine === 'string' ? [regexLine] : regexLine;\n\n    var lineFilter = function lineFilter(t) {\n      return regexLineList.some(function (tr) {\n        return new RegExp(tr, 'i').test(t.name);\n      });\n    };\n\n    filterList.push(lineFilter);\n  }\n\n  if (line) {\n    var lineFiltersList = typeof line === 'string' ? line.split(',') : line;\n    var lineList = lineFiltersList.map(function (l) {\n      return l.replace(/\\s+/g, '').toUpperCase();\n    });\n\n    var _lineFilter = function _lineFilter(l) {\n      return lineList.some(function (filter) {\n        return filter === l.name.toUpperCase();\n      });\n    };\n\n    filterList.push(_lineFilter);\n  }\n\n  if (route) {\n    var routes = typeof route === 'string' ? route.split(',') : route;\n    var routeList = routes.map(function (item) {\n      return parseInt(item, 10);\n    });\n\n    var routeFilter = function routeFilter(item) {\n      var routeId = parseInt(item.routeIdentifier.split('.')[0], 10);\n      return routeList.some(function (id) {\n        return id === routeId;\n      });\n    };\n\n    filterList.push(routeFilter);\n  }\n\n  if (operator) {\n    var operatorList = typeof operator === 'string' ? [operator] : operator;\n\n    var operatorFilter = function operatorFilter(t) {\n      return operatorList.some(function (op) {\n        return new RegExp(op, 'i').test(t.operator);\n      });\n    };\n\n    filterList.push(operatorFilter);\n  }\n\n  if (!filterList.length) {\n    return null;\n  }\n\n  return function (t) {\n    for (var i = 0; i < filterList.length; i += 1) {\n      if (!filterList[i](t)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n};\n/**\n * Mixin for TrajservLayerInterface.\n *\n * @param {TrackerLayer} TrackerLayer A {TrackerLayer} class to extend with {TrajservLayerInterface} functionnalities.\n * @return {Class}  A class that implements {TrajservLayerInterface} class and extends Base;\n * @private\n */\n\n\nvar TrajservLayerMixin = function TrajservLayerMixin(TrackerLayer) {\n  return /*#__PURE__*/function (_TrackerLayer) {\n    _inherits(_class, _TrackerLayer);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(_class, [{\n      key: \"defineProperties\",\n      value:\n      /**\n       * Define layer's properties.\n       *\n       * @ignore\n       */\n      function defineProperties(options) {\n        var _this = this;\n\n        _get(_getPrototypeOf(_class.prototype), \"defineProperties\", this).call(this, options);\n\n        var regexPublishedLineName = options.regexPublishedLineName,\n            publishedLineName = options.publishedLineName,\n            tripNumber = options.tripNumber,\n            operator = options.operator;\n        var defaultApi;\n\n        if (!options.api) {\n          var apiOptions = {};\n\n          if (options.url) {\n            apiOptions.url = options.url;\n          }\n\n          if (options.apiKey) {\n            apiOptions.apiKey = options.apiKey;\n          }\n\n          defaultApi = new TrajservAPI(apiOptions);\n        }\n\n        Object.defineProperties(this, {\n          showVehicleTraj: {\n            value: options.showVehicleTraj !== undefined ? options.showVehicleTraj : true,\n            writable: true\n          },\n          delayDisplay: {\n            value: options.delayDisplay || 300000,\n            writable: true\n          },\n          delayOutlineColor: {\n            value: options.delayOutlineColor || '#000000',\n            writable: true\n          },\n          useDelayStyle: {\n            value: options.useDelayStyle || false,\n            writable: true\n          },\n          requestIntervalSeconds: {\n            value: 3,\n            writable: true\n          },\n          publishedLineName: {\n            get: function get() {\n              return publishedLineName;\n            },\n            set: function set(newPublishedLineName) {\n              publishedLineName = newPublishedLineName;\n\n              _this.updateFilters();\n            }\n          },\n          tripNumber: {\n            get: function get() {\n              return tripNumber;\n            },\n            set: function set(newTripNumber) {\n              tripNumber = newTripNumber;\n\n              _this.updateFilters();\n            }\n          },\n          operator: {\n            get: function get() {\n              return operator;\n            },\n            set: function set(newOperator) {\n              operator = newOperator;\n\n              _this.updateFilters();\n            }\n          },\n          regexPublishedLineName: {\n            get: function get() {\n              return regexPublishedLineName;\n            },\n            set: function set(newRegex) {\n              regexPublishedLineName = newRegex;\n\n              _this.updateFilters();\n            }\n          },\n          api: {\n            value: options.api || defaultApi\n          }\n        });\n      }\n    }, {\n      key: \"init\",\n      value: function init(map) {\n        _get(_getPrototypeOf(_class.prototype), \"init\", this).call(this, map); // Sort the trajectories.\n\n\n        if (this.sortFc) {\n          this.sort = this.sortFc;\n        } else if (this.useDelayStyle) {\n          // Automatic sorting depending on delay, higher delay on top.\n          this.sort = function (a, b) {\n            if (a.delay === null) return 1;\n            return a.delay < b.delay ? 1 : -1;\n          };\n        }\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        this.updateFilters();\n\n        _get(_getPrototypeOf(_class.prototype), \"start\", this).call(this);\n\n        this.startUpdateTrajectories();\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        this.journeyId = null;\n        this.stopUpdateTrajectories();\n        this.abortFetchTrajectories();\n\n        _get(_getPrototypeOf(_class.prototype), \"stop\", this).call(this);\n      }\n    }, {\n      key: \"updateFilters\",\n      value: function updateFilters() {\n        // Setting filters from the permalink if no values defined by the layer.\n        var parameters = qs.parse(window.location.search.toLowerCase()); // filter is the property in TrackerLayerMixin.\n\n        this.filter = createFilters(this.publishedLineName || parameters[LINE_FILTER], this.tripNumber || parameters[ROUTE_FILTER], this.operator || parameters[OPERATOR_FILTER], this.regexPublishedLineName);\n      }\n    }, {\n      key: \"abortFetchTrajectories\",\n      value: function abortFetchTrajectories() {\n        if (this.abortController) {\n          this.abortController.abort();\n        }\n      }\n    }, {\n      key: \"updateTrajectoryStations\",\n      value: function updateTrajectoryStations(trajId) {\n        var params = this.getParams({\n          id: trajId,\n          time: getUTCTimeString(new Date())\n        });\n        return this.api.fetchTrajectoryStations(params);\n      }\n    }, {\n      key: \"getParams\",\n      value: function getParams() {\n        var extraParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var intervalMs = this.speed * 20000; // 20 seconds, arbitrary value, could be : (this.requestIntervalSeconds + 1) * 1000;\n\n        var now = this.currTime;\n        var diff = true;\n\n        if (this.later && now.getTime() > this.later.getTime() - 3000 * this.speed) {\n          diff = false;\n        }\n\n        if (!this.later || !diff || this.later.getTime() - now.getTime() > intervalMs) {\n          var later = new Date(now.getTime() + intervalMs);\n          this.later = later;\n        }\n\n        var params = _objectSpread(_objectSpread({}, extraParams), {}, {\n          btime: getUTCTimeString(now),\n          etime: getUTCTimeString(this.later),\n          date: getUTCDateString(now),\n          rid: 1,\n          a: 1,\n          cd: 1,\n          nm: 1,\n          fl: 1 // toff: this.currTime.getTime() / 1000,\n\n        }); // Allow to load only differences between the last request,\n        // but currently the Tracker render method doesn't manage to render only diff.\n\n        /* if (diff) {\n        // Not working\n        params.diff = this.lastRequestTime;\n        } */\n\n\n        return params;\n      }\n    }, {\n      key: \"startUpdateTrajectories\",\n      value: function startUpdateTrajectories() {\n        var _this2 = this;\n\n        this.stopUpdateTrajectories();\n        this.updateTrajectories();\n        this.updateInterval = window.setInterval(function () {\n          _this2.updateTrajectories();\n        }, this.requestIntervalSeconds * 1000);\n      }\n    }, {\n      key: \"stopUpdateTrajectories\",\n      value: function stopUpdateTrajectories() {\n        clearInterval(this.updateInterval);\n      }\n    }, {\n      key: \"updateTrajectories\",\n      value: function updateTrajectories() {\n        var _this3 = this;\n\n        this.abortFetchTrajectories();\n        this.abortController = new AbortController();\n        this.api.fetchTrajectories(this.getParams({\n          attr_det: 1\n        }), this.abortController).catch(function (err) {\n          if (err.name === 'AbortError') {\n            // Ignore abort error\n            return;\n          }\n\n          throw err;\n        }).then(function (trajectories) {\n          // Don't set trajectories when the user has aborted the request.\n          if (trajectories) {\n            _this3.tracker.setTrajectories(trajectories);\n          }\n        });\n      }\n    }, {\n      key: \"defaultStyle\",\n      value: function defaultStyle(props, zoom) {\n        var type = props.type,\n            name = props.name,\n            id = props.id,\n            color = props.color,\n            textColor = props.textColor,\n            delay = props.delay,\n            cancelled = props.cancelled,\n            operatorProvidesRealtime = props.operatorProvidesRealtime;\n        var z = Math.min(Math.floor(zoom || 1), 16);\n        var hover = this.tracker.hoverVehicleId === id;\n        var selected = this.selectedVehicleId === id;\n        var key = \"\".concat(z).concat(type).concat(name).concat(operatorProvidesRealtime).concat(delay).concat(hover).concat(selected).concat(cancelled);\n\n        if (!this.styleCache[key]) {\n          var radius = getRadius(type, z);\n\n          if (hover || selected) {\n            radius += 5;\n          }\n\n          var margin = 1;\n          var radiusDelay = radius + 2;\n          var markerSize = radius * 2;\n          var canvas = document.createElement('canvas'); // add space for delay information\n\n          canvas.width = radiusDelay * 2 + margin * 2 + 100;\n          canvas.height = radiusDelay * 2 + margin * 2 + 100;\n          var ctx = canvas.getContext('2d');\n          var origin = canvas.width / 2;\n\n          if (delay !== null) {\n            // Draw circle delay background\n            ctx.save();\n            ctx.beginPath();\n            ctx.arc(origin, origin, radiusDelay, 0, 2 * Math.PI, false);\n            ctx.fillStyle = getDelayColor(delay, cancelled);\n            ctx.filter = 'blur(1px)';\n            ctx.fill();\n            ctx.restore();\n          } // Show delay if feature is hovered or if delay is above 5mins.\n\n\n          if (hover || delay >= this.delayDisplay || cancelled) {\n            // Draw delay text\n            ctx.save();\n            ctx.textAlign = 'left';\n            ctx.textBaseline = 'middle';\n            ctx.font = \"bold \".concat(Math.max(cancelled ? 19 : 14, Math.min(cancelled ? 19 : 17, radius * 1.2)), \"px arial, sans-serif\");\n            ctx.fillStyle = getDelayColor(delay, cancelled, true);\n            ctx.strokeStyle = this.delayOutlineColor;\n            ctx.lineWidth = 1.5;\n            var delayText = getDelayText(delay, cancelled);\n            ctx.strokeText(delayText, origin + radiusDelay + margin, origin);\n            ctx.fillText(delayText, origin + radiusDelay + margin, origin);\n            ctx.restore();\n          } // Draw colored circle with black border\n\n\n          var circleFillColor;\n\n          if (this.useDelayStyle) {\n            circleFillColor = getDelayColor(delay, cancelled);\n          } else {\n            circleFillColor = color || getBgColor(type);\n          }\n\n          ctx.save();\n          ctx.lineWidth = 1;\n          ctx.strokeStyle = '#000000';\n          ctx.fillStyle = circleFillColor;\n          ctx.beginPath();\n          ctx.arc(origin, origin, radius, 0, 2 * Math.PI, false);\n          ctx.fill(); // Dashed outline if a provider provides realtime but we don't use it.\n\n          if (this.useDelayStyle && delay === null && operatorProvidesRealtime === 'yes') {\n            ctx.setLineDash([5, 3]);\n          }\n\n          ctx.stroke();\n          ctx.restore(); // Draw text in the circle\n\n          if (radius > 10) {\n            var fontSize = Math.max(radius, 10);\n            var textSize = getTextSize(ctx, markerSize, name, fontSize); // Draw a stroke to the text only if a provider provides realtime but we don't use it.\n\n            if (this.useDelayStyle && delay === null && operatorProvidesRealtime === 'yes') {\n              ctx.save();\n              ctx.textBaseline = 'middle';\n              ctx.textAlign = 'center';\n              ctx.font = \"bold \".concat(textSize + 2, \"px Arial\");\n              ctx.strokeStyle = circleFillColor;\n              ctx.strokeText(name, origin, origin);\n              ctx.restore();\n            } // Draw a text\n\n\n            ctx.save();\n            ctx.textBaseline = 'middle';\n            ctx.textAlign = 'center';\n            ctx.fillStyle = !this.useDelayStyle ? textColor || getTextColor(type) : '#000000';\n            ctx.font = \"bold \".concat(textSize, \"px Arial\");\n            ctx.strokeStyle = circleFillColor;\n            ctx.strokeText(name, origin, origin);\n            ctx.fillText(name, origin, origin);\n            ctx.restore();\n          }\n\n          this.styleCache[key] = canvas;\n        }\n\n        return this.styleCache[key];\n      }\n    }]);\n\n    return _class;\n  }(TrackerLayer);\n};\n\nexport default TrajservLayerMixin;","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/common/mixins/TrajservLayerMixin.js"],"names":["qs","getUTCDateString","getUTCTimeString","getRadius","getBgColor","getDelayColor","getDelayText","getTextColor","getTextSize","TrajservAPI","TrajservLayerInterface","map","trajId","extraParams","props","LINE_FILTER","ROUTE_FILTER","OPERATOR_FILTER","createFilters","line","route","operator","regexLine","filterList","regexLineList","lineFilter","t","some","tr","RegExp","test","name","push","lineFiltersList","split","lineList","l","replace","toUpperCase","filter","routes","routeList","item","parseInt","routeFilter","routeId","routeIdentifier","id","operatorList","operatorFilter","op","length","i","TrajservLayerMixin","TrackerLayer","options","regexPublishedLineName","publishedLineName","tripNumber","defaultApi","api","apiOptions","url","apiKey","Object","defineProperties","showVehicleTraj","value","undefined","writable","delayDisplay","delayOutlineColor","useDelayStyle","requestIntervalSeconds","get","set","newPublishedLineName","updateFilters","newTripNumber","newOperator","newRegex","sortFc","sort","a","b","delay","startUpdateTrajectories","journeyId","stopUpdateTrajectories","abortFetchTrajectories","parameters","parse","window","location","search","toLowerCase","abortController","abort","params","getParams","time","Date","fetchTrajectoryStations","intervalMs","speed","now","currTime","diff","later","getTime","btime","etime","date","rid","cd","nm","fl","updateTrajectories","updateInterval","setInterval","clearInterval","AbortController","fetchTrajectories","attr_det","catch","err","then","trajectories","tracker","setTrajectories","zoom","type","color","textColor","cancelled","operatorProvidesRealtime","z","Math","min","floor","hover","hoverVehicleId","selected","selectedVehicleId","key","styleCache","radius","margin","radiusDelay","markerSize","canvas","document","createElement","width","height","ctx","getContext","origin","save","beginPath","arc","PI","fillStyle","fill","restore","textAlign","textBaseline","font","max","strokeStyle","lineWidth","delayText","strokeText","fillText","circleFillColor","setLineDash","stroke","fontSize","textSize"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport qs from 'query-string';\nimport { getUTCDateString, getUTCTimeString } from '../timeUtils';\nimport {\n  getRadius,\n  getBgColor,\n  getDelayColor,\n  getDelayText,\n  getTextColor,\n  getTextSize,\n} from '../trackerConfig';\nimport { TrajservAPI } from '../../api';\n\n/**\n * TrajservLayerInterface.\n *\n * @classproperty {boolean} isTrackerLayer - Property for duck typing since `instanceof` is not working when the instance was created on different bundles.\n * @classproperty {boolean} isHoverActive - Activate/deactivate pointer hover effect.\n * @classproperty {function} style - Style of the vehicle.\n * @classproperty {FilterFunction} filter - Time speed.\n * @classproperty {function} sort - Set the filter for tracker features.\n *\n * @extends {TrackerLayerInterface}\n */\nexport class TrajservLayerInterface {\n  /**\n   * Initialize the layer and listen to feature clicks.\n   * @param {ol/Map~Map|mapboxgl.Map} map A map.\n   * @override\n   */\n  init(map) {}\n\n  /**\n   * Start to update trajectories and initialize the filter.\n   * @override\n   */\n  start() {}\n\n  /**\n   * Stop to update trajectories.\n   * @override\n   */\n  stop() {}\n\n  /**\n   * Set the tracker filter property using class properties.\n   * @private\n   */\n  addTrackerFilters() {}\n\n  /**\n   * Abort http requests.\n   *\n   * @private\n   */\n  abortFetchTrajectories() {}\n\n  /**\n   * Fetch stations information with a trajectory id.\n   * @param {number} trajId The id of the trajectory.\n   * @private\n   */\n  updateTrajectoryStations(trajId) {}\n\n  /**\n   * Returns the URL parameters.\n   * @param {Object} extraParams Extra parameters\n   * @returns {Object}\n   * @private\n   */\n  getParams(extraParams = {}) {}\n\n  /**\n   * Start the update of trajectories.\n   * @private\n   */\n  startUpdateTrajectories() {}\n\n  /**\n   * Stop the update of trajectories.\n   * @private\n   */\n  stopUpdateTrajectories() {}\n\n  /**\n   * Update the trajectories\n   * @private\n   */\n  updateTrajectories() {}\n\n  /**\n   * Define the style of the vehicle.\n   * Draw a colored circle depending on train delay.\n   *\n   * @param {Object} props Properties\n   * @private\n   */\n  defaultStyle(props) {}\n}\n\nconst LINE_FILTER = 'publishedlinename';\nconst ROUTE_FILTER = 'tripnumber';\nconst OPERATOR_FILTER = 'operator';\n\n/**\n * Create a array of filter functions based on some parameters.\n * @param {string} line\n * @param {string} route\n * @param {string} operator\n * @param {string} regexLine\n * @private\n */\nconst createFilters = (line, route, operator, regexLine) => {\n  const filterList = [];\n\n  if (!line && !route && !operator && !regexLine) {\n    return null;\n  }\n\n  if (regexLine) {\n    const regexLineList =\n      typeof regexLine === 'string' ? [regexLine] : regexLine;\n    const lineFilter = (t) =>\n      regexLineList.some((tr) => new RegExp(tr, 'i').test(t.name));\n    filterList.push(lineFilter);\n  }\n\n  if (line) {\n    const lineFiltersList = typeof line === 'string' ? line.split(',') : line;\n    const lineList = lineFiltersList.map((l) =>\n      l.replace(/\\s+/g, '').toUpperCase(),\n    );\n    const lineFilter = (l) =>\n      lineList.some((filter) => filter === l.name.toUpperCase());\n    filterList.push(lineFilter);\n  }\n\n  if (route) {\n    const routes = typeof route === 'string' ? route.split(',') : route;\n    const routeList = routes.map((item) => parseInt(item, 10));\n    const routeFilter = (item) => {\n      const routeId = parseInt(item.routeIdentifier.split('.')[0], 10);\n      return routeList.some((id) => id === routeId);\n    };\n    filterList.push(routeFilter);\n  }\n\n  if (operator) {\n    const operatorList = typeof operator === 'string' ? [operator] : operator;\n    const operatorFilter = (t) =>\n      operatorList.some((op) => new RegExp(op, 'i').test(t.operator));\n    filterList.push(operatorFilter);\n  }\n\n  if (!filterList.length) {\n    return null;\n  }\n\n  return (t) => {\n    for (let i = 0; i < filterList.length; i += 1) {\n      if (!filterList[i](t)) {\n        return false;\n      }\n    }\n    return true;\n  };\n};\n\n/**\n * Mixin for TrajservLayerInterface.\n *\n * @param {TrackerLayer} TrackerLayer A {TrackerLayer} class to extend with {TrajservLayerInterface} functionnalities.\n * @return {Class}  A class that implements {TrajservLayerInterface} class and extends Base;\n * @private\n */\nconst TrajservLayerMixin = (TrackerLayer) =>\n  class extends TrackerLayer {\n    /**\n     * Define layer's properties.\n     *\n     * @ignore\n     */\n    defineProperties(options) {\n      super.defineProperties(options);\n      let {\n        regexPublishedLineName,\n        publishedLineName,\n        tripNumber,\n        operator,\n      } = options;\n\n      let defaultApi;\n      if (!options.api) {\n        const apiOptions = {};\n        if (options.url) {\n          apiOptions.url = options.url;\n        }\n        if (options.apiKey) {\n          apiOptions.apiKey = options.apiKey;\n        }\n        defaultApi = new TrajservAPI(apiOptions);\n      }\n      Object.defineProperties(this, {\n        showVehicleTraj: {\n          value:\n            options.showVehicleTraj !== undefined\n              ? options.showVehicleTraj\n              : true,\n          writable: true,\n        },\n        delayDisplay: {\n          value: options.delayDisplay || 300000,\n          writable: true,\n        },\n        delayOutlineColor: {\n          value: options.delayOutlineColor || '#000000',\n          writable: true,\n        },\n        useDelayStyle: {\n          value: options.useDelayStyle || false,\n          writable: true,\n        },\n        requestIntervalSeconds: {\n          value: 3,\n          writable: true,\n        },\n        publishedLineName: {\n          get: () => {\n            return publishedLineName;\n          },\n          set: (newPublishedLineName) => {\n            publishedLineName = newPublishedLineName;\n            this.updateFilters();\n          },\n        },\n        tripNumber: {\n          get: () => {\n            return tripNumber;\n          },\n          set: (newTripNumber) => {\n            tripNumber = newTripNumber;\n            this.updateFilters();\n          },\n        },\n        operator: {\n          get: () => {\n            return operator;\n          },\n          set: (newOperator) => {\n            operator = newOperator;\n            this.updateFilters();\n          },\n        },\n        regexPublishedLineName: {\n          get: () => {\n            return regexPublishedLineName;\n          },\n          set: (newRegex) => {\n            regexPublishedLineName = newRegex;\n            this.updateFilters();\n          },\n        },\n        api: {\n          value: options.api || defaultApi,\n        },\n      });\n    }\n\n    init(map) {\n      super.init(map);\n\n      // Sort the trajectories.\n      if (this.sortFc) {\n        this.sort = this.sortFc;\n      } else if (this.useDelayStyle) {\n        // Automatic sorting depending on delay, higher delay on top.\n        this.sort = (a, b) => {\n          if (a.delay === null) return 1;\n          return a.delay < b.delay ? 1 : -1;\n        };\n      }\n    }\n\n    start() {\n      this.updateFilters();\n      super.start();\n      this.startUpdateTrajectories();\n    }\n\n    stop() {\n      this.journeyId = null;\n      this.stopUpdateTrajectories();\n      this.abortFetchTrajectories();\n      super.stop();\n    }\n\n    updateFilters() {\n      // Setting filters from the permalink if no values defined by the layer.\n      const parameters = qs.parse(window.location.search.toLowerCase());\n      // filter is the property in TrackerLayerMixin.\n      this.filter = createFilters(\n        this.publishedLineName || parameters[LINE_FILTER],\n        this.tripNumber || parameters[ROUTE_FILTER],\n        this.operator || parameters[OPERATOR_FILTER],\n        this.regexPublishedLineName,\n      );\n    }\n\n    abortFetchTrajectories() {\n      if (this.abortController) {\n        this.abortController.abort();\n      }\n    }\n\n    updateTrajectoryStations(trajId) {\n      const params = this.getParams({\n        id: trajId,\n        time: getUTCTimeString(new Date()),\n      });\n      return this.api.fetchTrajectoryStations(params);\n    }\n\n    getParams(extraParams = {}) {\n      const intervalMs = this.speed * 20000; // 20 seconds, arbitrary value, could be : (this.requestIntervalSeconds + 1) * 1000;\n      const now = this.currTime;\n\n      let diff = true;\n\n      if (\n        this.later &&\n        now.getTime() > this.later.getTime() - 3000 * this.speed\n      ) {\n        diff = false;\n      }\n      if (\n        !this.later ||\n        !diff ||\n        this.later.getTime() - now.getTime() > intervalMs\n      ) {\n        const later = new Date(now.getTime() + intervalMs);\n        this.later = later;\n      }\n\n      const params = {\n        ...extraParams,\n        btime: getUTCTimeString(now),\n        etime: getUTCTimeString(this.later),\n        date: getUTCDateString(now),\n        rid: 1,\n        a: 1,\n        cd: 1,\n        nm: 1,\n        fl: 1,\n        // toff: this.currTime.getTime() / 1000,\n      };\n\n      // Allow to load only differences between the last request,\n      // but currently the Tracker render method doesn't manage to render only diff.\n      /* if (diff) {\n      // Not working\n      params.diff = this.lastRequestTime;\n    } */\n      return params;\n    }\n\n    startUpdateTrajectories() {\n      this.stopUpdateTrajectories();\n\n      this.updateTrajectories();\n      this.updateInterval = window.setInterval(() => {\n        this.updateTrajectories();\n      }, this.requestIntervalSeconds * 1000);\n    }\n\n    stopUpdateTrajectories() {\n      clearInterval(this.updateInterval);\n    }\n\n    updateTrajectories() {\n      this.abortFetchTrajectories();\n      this.abortController = new AbortController();\n      this.api\n        .fetchTrajectories(\n          this.getParams({\n            attr_det: 1,\n          }),\n          this.abortController,\n        )\n        .catch((err) => {\n          if (err.name === 'AbortError') {\n            // Ignore abort error\n            return;\n          }\n          throw err;\n        })\n        .then((trajectories) => {\n          // Don't set trajectories when the user has aborted the request.\n          if (trajectories) {\n            this.tracker.setTrajectories(trajectories);\n          }\n        });\n    }\n\n    defaultStyle(props, zoom) {\n      const {\n        type,\n        name,\n        id,\n        color,\n        textColor,\n        delay,\n        cancelled,\n        operatorProvidesRealtime,\n      } = props;\n      const z = Math.min(Math.floor(zoom || 1), 16);\n      const hover = this.tracker.hoverVehicleId === id;\n      const selected = this.selectedVehicleId === id;\n      const key = `${z}${type}${name}${operatorProvidesRealtime}${delay}${hover}${selected}${cancelled}`;\n\n      if (!this.styleCache[key]) {\n        let radius = getRadius(type, z);\n\n        if (hover || selected) {\n          radius += 5;\n        }\n        const margin = 1;\n        const radiusDelay = radius + 2;\n        const markerSize = radius * 2;\n\n        const canvas = document.createElement('canvas');\n        // add space for delay information\n        canvas.width = radiusDelay * 2 + margin * 2 + 100;\n        canvas.height = radiusDelay * 2 + margin * 2 + 100;\n        const ctx = canvas.getContext('2d');\n        const origin = canvas.width / 2;\n\n        if (delay !== null) {\n          // Draw circle delay background\n          ctx.save();\n          ctx.beginPath();\n          ctx.arc(origin, origin, radiusDelay, 0, 2 * Math.PI, false);\n          ctx.fillStyle = getDelayColor(delay, cancelled);\n          ctx.filter = 'blur(1px)';\n          ctx.fill();\n          ctx.restore();\n        }\n\n        // Show delay if feature is hovered or if delay is above 5mins.\n        if (hover || delay >= this.delayDisplay || cancelled) {\n          // Draw delay text\n          ctx.save();\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'middle';\n          ctx.font = `bold ${Math.max(\n            cancelled ? 19 : 14,\n            Math.min(cancelled ? 19 : 17, radius * 1.2),\n          )}px arial, sans-serif`;\n          ctx.fillStyle = getDelayColor(delay, cancelled, true);\n\n          ctx.strokeStyle = this.delayOutlineColor;\n          ctx.lineWidth = 1.5;\n          const delayText = getDelayText(delay, cancelled);\n          ctx.strokeText(delayText, origin + radiusDelay + margin, origin);\n          ctx.fillText(delayText, origin + radiusDelay + margin, origin);\n          ctx.restore();\n        }\n\n        // Draw colored circle with black border\n        let circleFillColor;\n        if (this.useDelayStyle) {\n          circleFillColor = getDelayColor(delay, cancelled);\n        } else {\n          circleFillColor = color || getBgColor(type);\n        }\n        ctx.save();\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = '#000000';\n        ctx.fillStyle = circleFillColor;\n        ctx.beginPath();\n        ctx.arc(origin, origin, radius, 0, 2 * Math.PI, false);\n        ctx.fill();\n        // Dashed outline if a provider provides realtime but we don't use it.\n        if (\n          this.useDelayStyle &&\n          delay === null &&\n          operatorProvidesRealtime === 'yes'\n        ) {\n          ctx.setLineDash([5, 3]);\n        }\n        ctx.stroke();\n        ctx.restore();\n\n        // Draw text in the circle\n        if (radius > 10) {\n          const fontSize = Math.max(radius, 10);\n          const textSize = getTextSize(ctx, markerSize, name, fontSize);\n\n          // Draw a stroke to the text only if a provider provides realtime but we don't use it.\n          if (\n            this.useDelayStyle &&\n            delay === null &&\n            operatorProvidesRealtime === 'yes'\n          ) {\n            ctx.save();\n            ctx.textBaseline = 'middle';\n            ctx.textAlign = 'center';\n            ctx.font = `bold ${textSize + 2}px Arial`;\n            ctx.strokeStyle = circleFillColor;\n            ctx.strokeText(name, origin, origin);\n            ctx.restore();\n          }\n\n          // Draw a text\n          ctx.save();\n          ctx.textBaseline = 'middle';\n          ctx.textAlign = 'center';\n          ctx.fillStyle = !this.useDelayStyle\n            ? textColor || getTextColor(type)\n            : '#000000';\n          ctx.font = `bold ${textSize}px Arial`;\n          ctx.strokeStyle = circleFillColor;\n          ctx.strokeText(name, origin, origin);\n          ctx.fillText(name, origin, origin);\n          ctx.restore();\n        }\n\n        this.styleCache[key] = canvas;\n      }\n\n      return this.styleCache[key];\n    }\n  };\n\nexport default TrajservLayerMixin;\n"]},"metadata":{},"sourceType":"module"}