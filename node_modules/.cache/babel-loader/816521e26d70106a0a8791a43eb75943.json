{"ast":null,"code":"import { LineString } from 'ol/geom';\n/**\n * Translate the response date object into a readable object.\n * @returns {array<Date>}\n * @ignore\n */\n\nvar translateDates = function translateDates(dates) {\n  var newDates = [];\n\n  for (var i = 0; i < dates.length; i += 1) {\n    var _dates$i = dates[i],\n        day = _dates$i.d,\n        month = _dates$i.m,\n        year = _dates$i.y;\n    newDates.push({\n      day: day,\n      month: month,\n      year: year\n    });\n  }\n\n  return newDates;\n};\n/**\n * Translate the trajstations response into a readable object.\n * @returns {Object} returns a readable object\n * @private\n */\n\n\nexport var translateTrajStationsResp = function translateTrajStationsResp(data) {\n  var id = data.id,\n      destination = data.hs,\n      vehicleType = data.t,\n      longName = data.ln,\n      shortName = data.sn,\n      wheelchairAccessible = data.wa,\n      bicyclesAllowed = data.ba,\n      realTime = data.rt,\n      feedsId = data.fid,\n      routeIdentifier = data.rid,\n      bgColor = data.c,\n      datacolor = data.tc,\n      _data$a = data.a,\n      operator = _data$a.n,\n      operatorUrl = _data$a.u,\n      operatorTimeZone = _data$a.tz,\n      _data$f = data.f,\n      publisher = _data$f.n,\n      publisherUrl = _data$f.u,\n      publisherTimeZone = _data$f.tz,\n      _data$tt = data.tt,\n      dateNotOperatingDays = _data$tt.n,\n      dateAdditionalOperatingDays = _data$tt.p,\n      operatingPeriod = _data$tt.t,\n      dataStations = data.sts;\n  var notOperatingDays = translateDates(dateNotOperatingDays);\n  var additionalOperatingDays = translateDates(dateAdditionalOperatingDays);\n  var backgroundColor = bgColor && \"#\".concat(bgColor);\n  var color = datacolor && \"#\".concat(datacolor);\n  var stations = [];\n\n  for (var i = 0; i < dataStations.length; i += 1) {\n    var _dataStations$i = dataStations[i],\n        stationId = _dataStations$i.sid,\n        stationName = _dataStations$i.n,\n        coordinates = _dataStations$i.p,\n        arrivalTime = _dataStations$i.at,\n        departureTime = _dataStations$i.dt,\n        arrivalDate = _dataStations$i.ap,\n        departureDate = _dataStations$i.dp,\n        arrivalDelay = _dataStations$i.ad,\n        departureDelay = _dataStations$i.dd,\n        noDropOff = _dataStations$i.dot,\n        noPickUp = _dataStations$i.put,\n        cancelled = _dataStations$i.c,\n        stWheelchairAccessible = _dataStations$i.wa;\n    stations.push({\n      stationId: stationId,\n      stationName: stationName,\n      coordinates: coordinates,\n      arrivalTime: arrivalTime !== -1 ? arrivalDate * 1000 : null,\n      departureTime: departureTime !== -1 ? departureDate * 1000 : null,\n      arrivalDelay: arrivalDelay,\n      departureDelay: departureDelay,\n      noDropOff: !!noDropOff,\n      noPickUp: !!noPickUp,\n      cancelled: !!cancelled,\n      wheelchairAccessible: !!stWheelchairAccessible\n    });\n  }\n\n  return {\n    id: id,\n    destination: destination,\n    backgroundColor: backgroundColor,\n    color: color,\n    vehicleType: vehicleType,\n    routeIdentifier: routeIdentifier,\n    longName: longName,\n    shortName: shortName,\n    stations: stations,\n    wheelchairAccessible: !!wheelchairAccessible,\n    bicyclesAllowed: !!bicyclesAllowed,\n    realTime: realTime,\n    feedsId: feedsId,\n    operatingInformations: {\n      operatingPeriod: operatingPeriod,\n      notOperatingDays: notOperatingDays,\n      additionalOperatingDays: additionalOperatingDays\n    },\n    operator: operator,\n    operatorUrl: operatorUrl,\n    operatorTimeZone: operatorTimeZone,\n    publisher: publisher,\n    publisherUrl: publisherUrl,\n    publisherTimeZone: publisherTimeZone\n  };\n};\n/**\n * Translate the trajectory_collection response into a js usable object.\n * @returns {Array} returns an array of trajectories.\n * @ignore\n */\n\nexport var translateTrajCollResponse = function translateTrajCollResponse() {\n  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var trajectories = [];\n\n  for (var i = 0; i < features.length; i += 1) {\n    var traj = features[i];\n    var geometry = new LineString(traj.geometry.coordinates);\n    var _traj$properties = traj.properties,\n        id = _traj$properties.ID,\n        type = _traj$properties.ProductIdentifier,\n        name = _traj$properties.PublishedLineName,\n        routeIdentifier = _traj$properties.RouteIdentifier,\n        directionText = _traj$properties.DirectionText,\n        operator = _traj$properties.Operator,\n        operatorUrl = _traj$properties.OperatorURL,\n        publisher = _traj$properties.Publisher,\n        publisherUrl = _traj$properties.PublisherURL,\n        license = _traj$properties.License,\n        licenseUrl = _traj$properties.LicenseUrl,\n        licenseNote = _traj$properties.LicenseNote,\n        color = _traj$properties.Color,\n        journeyIdentifier = _traj$properties.JourneyIdentifier,\n        realtimeAvailable = _traj$properties.RealtimeAvailable,\n        operatorProvidesRealtime = _traj$properties.OperatorProvidesRealtime,\n        dayOfOperation = _traj$properties.DayOfOperation,\n        delay = _traj$properties.Delay,\n        timeIntervals = _traj$properties.TimeIntervals,\n        textColor = _traj$properties.TextColor,\n        cancelled = _traj$properties.Cancelled;\n    trajectories.push({\n      id: id,\n      type: type,\n      name: name,\n      routeIdentifier: routeIdentifier,\n      directionText: directionText,\n      operator: operator,\n      operatorUrl: operatorUrl,\n      publisher: publisher,\n      publisherUrl: publisherUrl,\n      license: license,\n      licenseUrl: licenseUrl,\n      licenseNote: licenseNote,\n      journeyIdentifier: journeyIdentifier,\n      realtimeAvailable: realtimeAvailable,\n      operatorProvidesRealtime: operatorProvidesRealtime,\n      dayOfOperation: dayOfOperation,\n      delay: delay,\n      timeIntervals: timeIntervals,\n      color: color && \"#\".concat(color),\n      textColor: textColor && \"#\".concat(textColor),\n      geometry: geometry,\n      cancelled: cancelled\n    });\n  }\n\n  return trajectories;\n};\nexport default {\n  translateTrajCollResponse: translateTrajCollResponse,\n  translateTrajStationsResp: translateTrajStationsResp\n};","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/api/trajserv/TrajservAPIUtils.js"],"names":["LineString","translateDates","dates","newDates","i","length","day","d","month","m","year","y","push","translateTrajStationsResp","data","id","destination","hs","vehicleType","t","longName","ln","shortName","sn","wheelchairAccessible","wa","bicyclesAllowed","ba","realTime","rt","feedsId","fid","routeIdentifier","rid","bgColor","c","datacolor","tc","a","operator","n","operatorUrl","u","operatorTimeZone","tz","f","publisher","publisherUrl","publisherTimeZone","tt","dateNotOperatingDays","dateAdditionalOperatingDays","p","operatingPeriod","dataStations","sts","notOperatingDays","additionalOperatingDays","backgroundColor","color","stations","stationId","sid","stationName","coordinates","arrivalTime","at","departureTime","dt","arrivalDate","ap","departureDate","dp","arrivalDelay","ad","departureDelay","dd","noDropOff","dot","noPickUp","put","cancelled","stWheelchairAccessible","operatingInformations","translateTrajCollResponse","features","trajectories","traj","geometry","properties","ID","type","ProductIdentifier","name","PublishedLineName","RouteIdentifier","directionText","DirectionText","Operator","OperatorURL","Publisher","PublisherURL","license","License","licenseUrl","LicenseUrl","licenseNote","LicenseNote","Color","journeyIdentifier","JourneyIdentifier","realtimeAvailable","RealtimeAvailable","operatorProvidesRealtime","OperatorProvidesRealtime","dayOfOperation","DayOfOperation","delay","Delay","timeIntervals","TimeIntervals","textColor","TextColor","Cancelled"],"mappings":"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","sourcesContent":["import { LineString } from 'ol/geom';\n\n/**\n * Translate the response date object into a readable object.\n * @returns {array<Date>}\n * @ignore\n */\nconst translateDates = (dates) => {\n  const newDates = [];\n\n  for (let i = 0; i < dates.length; i += 1) {\n    const { d: day, m: month, y: year } = dates[i];\n    newDates.push({\n      day,\n      month,\n      year,\n    });\n  }\n  return newDates;\n};\n\n/**\n * Translate the trajstations response into a readable object.\n * @returns {Object} returns a readable object\n * @private\n */\nexport const translateTrajStationsResp = (data) => {\n  const {\n    id,\n    hs: destination,\n    t: vehicleType,\n    ln: longName,\n    sn: shortName,\n    wa: wheelchairAccessible,\n    ba: bicyclesAllowed,\n    rt: realTime,\n    fid: feedsId,\n    rid: routeIdentifier,\n    c: bgColor,\n    tc: datacolor,\n    a: { n: operator, u: operatorUrl, tz: operatorTimeZone },\n    f: { n: publisher, u: publisherUrl, tz: publisherTimeZone },\n    tt: {\n      n: dateNotOperatingDays,\n      p: dateAdditionalOperatingDays,\n      t: operatingPeriod,\n    },\n    sts: dataStations,\n  } = data;\n\n  const notOperatingDays = translateDates(dateNotOperatingDays);\n  const additionalOperatingDays = translateDates(dateAdditionalOperatingDays);\n  const backgroundColor = bgColor && `#${bgColor}`;\n  const color = datacolor && `#${datacolor}`;\n\n  const stations = [];\n  for (let i = 0; i < dataStations.length; i += 1) {\n    const {\n      sid: stationId,\n      n: stationName,\n      p: coordinates,\n      at: arrivalTime,\n      dt: departureTime,\n      ap: arrivalDate,\n      dp: departureDate,\n      ad: arrivalDelay,\n      dd: departureDelay,\n      dot: noDropOff,\n      put: noPickUp,\n      c: cancelled,\n      wa: stWheelchairAccessible,\n    } = dataStations[i];\n\n    stations.push({\n      stationId,\n      stationName,\n      coordinates,\n      arrivalTime: arrivalTime !== -1 ? arrivalDate * 1000 : null,\n      departureTime: departureTime !== -1 ? departureDate * 1000 : null,\n      arrivalDelay,\n      departureDelay,\n      noDropOff: !!noDropOff,\n      noPickUp: !!noPickUp,\n      cancelled: !!cancelled,\n      wheelchairAccessible: !!stWheelchairAccessible,\n    });\n  }\n\n  return {\n    id,\n    destination,\n    backgroundColor,\n    color,\n    vehicleType,\n    routeIdentifier,\n    longName,\n    shortName,\n    stations,\n    wheelchairAccessible: !!wheelchairAccessible,\n    bicyclesAllowed: !!bicyclesAllowed,\n    realTime,\n    feedsId,\n    operatingInformations: {\n      operatingPeriod,\n      notOperatingDays,\n      additionalOperatingDays,\n    },\n    operator,\n    operatorUrl,\n    operatorTimeZone,\n    publisher,\n    publisherUrl,\n    publisherTimeZone,\n  };\n};\n\n/**\n * Translate the trajectory_collection response into a js usable object.\n * @returns {Array} returns an array of trajectories.\n * @ignore\n */\nexport const translateTrajCollResponse = (features = []) => {\n  const trajectories = [];\n  for (let i = 0; i < features.length; i += 1) {\n    const traj = features[i];\n    const geometry = new LineString(traj.geometry.coordinates);\n    const {\n      ID: id,\n      ProductIdentifier: type,\n      PublishedLineName: name,\n      RouteIdentifier: routeIdentifier,\n      DirectionText: directionText,\n      Operator: operator,\n      OperatorURL: operatorUrl,\n      Publisher: publisher,\n      PublisherURL: publisherUrl,\n      License: license,\n      LicenseUrl: licenseUrl,\n      LicenseNote: licenseNote,\n      Color: color,\n      JourneyIdentifier: journeyIdentifier,\n      RealtimeAvailable: realtimeAvailable,\n      OperatorProvidesRealtime: operatorProvidesRealtime,\n      DayOfOperation: dayOfOperation,\n      Delay: delay,\n      TimeIntervals: timeIntervals,\n      TextColor: textColor,\n      Cancelled: cancelled,\n    } = traj.properties;\n\n    trajectories.push({\n      id,\n      type,\n      name,\n      routeIdentifier,\n      directionText,\n      operator,\n      operatorUrl,\n      publisher,\n      publisherUrl,\n      license,\n      licenseUrl,\n      licenseNote,\n      journeyIdentifier,\n      realtimeAvailable,\n      operatorProvidesRealtime,\n      dayOfOperation,\n      delay,\n      timeIntervals,\n      color: color && `#${color}`,\n      textColor: textColor && `#${textColor}`,\n      geometry,\n      cancelled,\n    });\n  }\n  return trajectories;\n};\n\nexport default {\n  translateTrajCollResponse,\n  translateTrajStationsResp,\n};\n"]},"metadata":{},"sourceType":"module"}