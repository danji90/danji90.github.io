{"ast":null,"code":"/**\n * Get the websocket channel suffix, depending on the current mode.\n * @param {String} mode Mode 'topographic' ou 'schematic'.\n * @private\n */\nexport var getModeSuffix = function getModeSuffix(mode, modes) {\n  return mode === modes.SCHEMATIC ? '_schematic' : '';\n};\n/**\n * Compare two given departures for sort alogithm,\n * @param {Object} a First departure.\n * @param {Object} b Second departure.\n * @private\n */\n\nexport var compareDepartures = function compareDepartures(a, b) {\n  var sortByMinArrivalTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // First LEAVING and HIDDEN, then BOARDING and then sorted by time.\n  var topStates = ['HIDDEN', 'LEAVING', 'BOARDING'];\n  var aTop = a.has_fzo && topStates.indexOf(a.state) > -1;\n  var bTop = b.has_fzo && topStates.indexOf(b.state) > -1;\n\n  if (aTop || bTop) {\n    if (aTop !== bTop) {\n      return aTop ? -1 : 1;\n    }\n\n    if (a.state !== b.state) {\n      // one is leaving\n      return topStates.indexOf(a.state) - topStates.indexOf(b.state);\n    }\n  }\n\n  var aDuration = null;\n  var bDuration = null;\n  var now = Date.now();\n\n  if (sortByMinArrivalTime) {\n    aDuration = new Date(a.min_arrival_time || a.time).getTime() - now;\n    bDuration = new Date(b.min_arrival_time || b.time).getTime() - now;\n  } else {\n    aDuration = new Date(a.time).getTime() - now;\n    bDuration = new Date(b.time).getTime() - now;\n  }\n\n  return aDuration - bDuration;\n};\n/**\n * Remove the delay from arrivalTime and departureTime\n * @private\n */\n\nexport var cleanStopTime = function cleanStopTime(content) {\n  if (!content) {\n    return;\n  }\n\n  content.stations.forEach(function (station) {\n    // eslint-disable-next-line no-param-reassign\n    station.arrivalTimeWithDelay = station.arrivalTime;\n\n    if (station.departureTime) {\n      // eslint-disable-next-line no-param-reassign\n      station.departureTimeWithDelay = station.departureTime;\n    }\n\n    if (station.arrivalDelay) {\n      // eslint-disable-next-line no-param-reassign\n      station.arrivalTime -= station.arrivalDelay;\n\n      if (station.departureTime) {\n        // eslint-disable-next-line no-param-reassign\n        station.departureTime -= station.arrivalDelay;\n      }\n    }\n  }); // eslint-disable-next-line consistent-return\n\n  return content;\n};","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/api/tralis/TralisAPIUtils.js"],"names":["getModeSuffix","mode","modes","SCHEMATIC","compareDepartures","a","b","sortByMinArrivalTime","topStates","aTop","has_fzo","indexOf","state","bTop","aDuration","bDuration","now","Date","min_arrival_time","time","getTime","cleanStopTime","content","stations","forEach","station","arrivalTimeWithDelay","arrivalTime","departureTime","departureTimeWithDelay","arrivalDelay"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAOC,KAAP;AAAA,SAC3BD,IAAI,KAAKC,KAAK,CAACC,SAAf,GAA2B,YAA3B,GAA0C,EADf;AAAA,CAAtB;AAGP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,CAAD,EAAIC,CAAJ,EAAwC;AAAA,MAAjCC,oBAAiC,uEAAV,KAAU;AACvE;AACA,MAAMC,SAAS,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,UAAtB,CAAlB;AACA,MAAMC,IAAI,GAAGJ,CAAC,CAACK,OAAF,IAAaF,SAAS,CAACG,OAAV,CAAkBN,CAAC,CAACO,KAApB,IAA6B,CAAC,CAAxD;AACA,MAAMC,IAAI,GAAGP,CAAC,CAACI,OAAF,IAAaF,SAAS,CAACG,OAAV,CAAkBL,CAAC,CAACM,KAApB,IAA6B,CAAC,CAAxD;;AAEA,MAAIH,IAAI,IAAII,IAAZ,EAAkB;AAChB,QAAIJ,IAAI,KAAKI,IAAb,EAAmB;AACjB,aAAOJ,IAAI,GAAG,CAAC,CAAJ,GAAQ,CAAnB;AACD;;AAED,QAAIJ,CAAC,CAACO,KAAF,KAAYN,CAAC,CAACM,KAAlB,EAAyB;AACvB;AACA,aAAOJ,SAAS,CAACG,OAAV,CAAkBN,CAAC,CAACO,KAApB,IAA6BJ,SAAS,CAACG,OAAV,CAAkBL,CAAC,CAACM,KAApB,CAApC;AACD;AACF;;AAED,MAAIE,SAAS,GAAG,IAAhB;AACA,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AAEA,MAAIT,oBAAJ,EAA0B;AACxBO,IAAAA,SAAS,GAAG,IAAIG,IAAJ,CAASZ,CAAC,CAACa,gBAAF,IAAsBb,CAAC,CAACc,IAAjC,EAAuCC,OAAvC,KAAmDJ,GAA/D;AACAD,IAAAA,SAAS,GAAG,IAAIE,IAAJ,CAASX,CAAC,CAACY,gBAAF,IAAsBZ,CAAC,CAACa,IAAjC,EAAuCC,OAAvC,KAAmDJ,GAA/D;AACD,GAHD,MAGO;AACLF,IAAAA,SAAS,GAAG,IAAIG,IAAJ,CAASZ,CAAC,CAACc,IAAX,EAAiBC,OAAjB,KAA6BJ,GAAzC;AACAD,IAAAA,SAAS,GAAG,IAAIE,IAAJ,CAASX,CAAC,CAACa,IAAX,EAAiBC,OAAjB,KAA6BJ,GAAzC;AACD;;AAED,SAAOF,SAAS,GAAGC,SAAnB;AACD,CA9BM;AAgCP;AACA;AACA;AACA;;AACA,OAAO,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAa;AACxC,MAAI,CAACA,OAAL,EAAc;AACZ;AACD;;AACDA,EAAAA,OAAO,CAACC,QAAR,CAAiBC,OAAjB,CAAyB,UAACC,OAAD,EAAa;AACpC;AACAA,IAAAA,OAAO,CAACC,oBAAR,GAA+BD,OAAO,CAACE,WAAvC;;AACA,QAAIF,OAAO,CAACG,aAAZ,EAA2B;AACzB;AACAH,MAAAA,OAAO,CAACI,sBAAR,GAAiCJ,OAAO,CAACG,aAAzC;AACD;;AACD,QAAIH,OAAO,CAACK,YAAZ,EAA0B;AACxB;AACAL,MAAAA,OAAO,CAACE,WAAR,IAAuBF,OAAO,CAACK,YAA/B;;AACA,UAAIL,OAAO,CAACG,aAAZ,EAA2B;AACzB;AACAH,QAAAA,OAAO,CAACG,aAAR,IAAyBH,OAAO,CAACK,YAAjC;AACD;AACF;AACF,GAfD,EAJwC,CAoBxC;;AACA,SAAOR,OAAP;AACD,CAtBM","sourcesContent":["/**\n * Get the websocket channel suffix, depending on the current mode.\n * @param {String} mode Mode 'topographic' ou 'schematic'.\n * @private\n */\nexport const getModeSuffix = (mode, modes) =>\n  mode === modes.SCHEMATIC ? '_schematic' : '';\n\n/**\n * Compare two given departures for sort alogithm,\n * @param {Object} a First departure.\n * @param {Object} b Second departure.\n * @private\n */\nexport const compareDepartures = (a, b, sortByMinArrivalTime = false) => {\n  // First LEAVING and HIDDEN, then BOARDING and then sorted by time.\n  const topStates = ['HIDDEN', 'LEAVING', 'BOARDING'];\n  const aTop = a.has_fzo && topStates.indexOf(a.state) > -1;\n  const bTop = b.has_fzo && topStates.indexOf(b.state) > -1;\n\n  if (aTop || bTop) {\n    if (aTop !== bTop) {\n      return aTop ? -1 : 1;\n    }\n\n    if (a.state !== b.state) {\n      // one is leaving\n      return topStates.indexOf(a.state) - topStates.indexOf(b.state);\n    }\n  }\n\n  let aDuration = null;\n  let bDuration = null;\n  const now = Date.now();\n\n  if (sortByMinArrivalTime) {\n    aDuration = new Date(a.min_arrival_time || a.time).getTime() - now;\n    bDuration = new Date(b.min_arrival_time || b.time).getTime() - now;\n  } else {\n    aDuration = new Date(a.time).getTime() - now;\n    bDuration = new Date(b.time).getTime() - now;\n  }\n\n  return aDuration - bDuration;\n};\n\n/**\n * Remove the delay from arrivalTime and departureTime\n * @private\n */\nexport const cleanStopTime = (content) => {\n  if (!content) {\n    return;\n  }\n  content.stations.forEach((station) => {\n    // eslint-disable-next-line no-param-reassign\n    station.arrivalTimeWithDelay = station.arrivalTime;\n    if (station.departureTime) {\n      // eslint-disable-next-line no-param-reassign\n      station.departureTimeWithDelay = station.departureTime;\n    }\n    if (station.arrivalDelay) {\n      // eslint-disable-next-line no-param-reassign\n      station.arrivalTime -= station.arrivalDelay;\n      if (station.departureTime) {\n        // eslint-disable-next-line no-param-reassign\n        station.departureTime -= station.arrivalDelay;\n      }\n    }\n  });\n  // eslint-disable-next-line consistent-return\n  return content;\n};\n"]},"metadata":{},"sourceType":"module"}