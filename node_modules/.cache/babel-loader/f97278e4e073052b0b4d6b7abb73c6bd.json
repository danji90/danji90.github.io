{"ast":null,"code":"import _toConsumableArray from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _get from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable class-methods-use-this */\n\n/* eslint-disable max-classes-per-file */\nimport { buffer, containsCoordinate } from 'ol/extent';\nimport { unByKey } from 'ol/Observable';\nimport Tracker from '../Tracker';\nimport { timeSteps } from '../trackerConfig';\n/**\n * TrackerLayerInterface.\n *\n * @classproperty {boolean} isTrackerLayer - Property for duck typing since `instanceof` is not working when the instance was created on different bundles.\n * @classproperty {boolean} isHoverActive - Activate/deactivate pointer hover effect.\n * @classproperty {function} style - Style of the vehicle.\n * @classproperty {FilterFunction} filter - Time speed.\n * @classproperty {function} sort - Set the filter for tracker features.\n */\n\nexport var TrackerLayerInterface = /*#__PURE__*/function () {\n  function TrackerLayerInterface() {\n    _classCallCheck(this, TrackerLayerInterface);\n  }\n\n  _createClass(TrackerLayerInterface, [{\n    key: \"init\",\n    value:\n    /**\n     * Initalize the Tracker.\n     * @param {ol/Map~Map} map\n     * @param {Object} options\n     * @param {number} [options.width] Canvas's width.\n     * @param {number} [options.height] Canvas's height.\n     * @param {function} [options.getPixelFromCoordinate] Convert an EPSG:3857 coordinate to a canvas pixel (origin top-left).\n     */\n    // eslint-disable-next-line no-unused-vars\n    function init(map, options) {}\n    /**\n     * Destroy the Tracker.\n     */\n\n  }, {\n    key: \"terminate\",\n    value: function terminate() {}\n    /**\n     * Start the clock.\n     *\n     * @param {Array<number>} size Map's size: [width, height].\n     * @param {number} zoom Map's zoom level.\n     * @param {number} resolution Map's resolution.\n     */\n    // eslint-disable-next-line no-unused-vars\n\n  }, {\n    key: \"start\",\n    value: function start(size, zoom, resolution) {}\n    /**\n     * Stop the time.\n     * @private\n     * @param {number} zoom\n     */\n    // eslint-disable-next-line no-unused-vars\n\n  }, {\n    key: \"startUpdateTime\",\n    value: function startUpdateTime(zoom) {}\n    /**\n     * Stop the clock.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {}\n    /**\n     * Set the current time, it triggers a rendering of the trajectories.\n     *\n     * @param {Date} time The date to render.\n     * @param {number[2]} size Size of the canvas to render.\n     * @param {number} resolution Map's resolution to render.\n     */\n    // eslint-disable-next-line no-unused-vars\n\n  }, {\n    key: \"setCurrTime\",\n    value: function setCurrTime(time, size, resolution) {}\n    /**\n     * Get vehicle.\n     * @param {function} filterFc A function use to filter results.\n     */\n    // eslint-disable-next-line no-unused-vars\n\n  }, {\n    key: \"getVehicle\",\n    value: function getVehicle(filterFc) {}\n    /**\n     * Returns the vehicle which are at the given coordinates.\n     * Returns null when no vehicle is located at the given coordinates.\n     *\n     * @param {number[2]} coordinate A coordinate ([x,y]).\n     * @param {number=1} resolution The resolution of the map.\n     * @returns {Object[]} A list of vehicles.\n     */\n    // eslint-disable-next-line no-unused-vars\n\n  }, {\n    key: \"getVehiclesAtCoordinate\",\n    value: function getVehiclesAtCoordinate(coordinate) {\n      var resolution = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    }\n    /**\n     * Get the duration before the next update depending on zoom level.\n     * @private\n     * @param {number} zoom\n     */\n    // eslint-disable-next-line no-unused-vars\n\n  }, {\n    key: \"getRefreshTimeInMs\",\n    value: function getRefreshTimeInMs(zoom) {}\n    /**\n     * Define a default style of the vehicle.s\n     * Draw a blue circle with the id of the props parameter.\n     *\n     * @param {Object} props Properties\n     * @private\n     */\n    // eslint-disable-next-line no-unused-vars\n\n  }, {\n    key: \"defaultStyle\",\n    value: function defaultStyle(props) {}\n  }]);\n\n  return TrackerLayerInterface;\n}();\n/**\n * Mixin for TrackeLayerInterface.\n *\n * @param {Class} Base  A class to extend with {TrackerLayerInterface} functionnalities.\n * @return {Class}  A class that implements <TrackerLayerInterface> class and extends Base;\n * @private\n */\n\nvar TrackerLayerMixin = function TrackerLayerMixin(Base) {\n  return /*#__PURE__*/function (_Base) {\n    _inherits(_class, _Base);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(_class, [{\n      key: \"defineProperties\",\n      value:\n      /**\n       * Define layer's properties.\n       *\n       * @ignore\n       */\n      function defineProperties(options) {\n        var _this = this;\n\n        var _isHoverActive$option = _objectSpread({\n          isHoverActive: true\n        }, options),\n            isHoverActive = _isHoverActive$option.isHoverActive,\n            style = _isHoverActive$option.style,\n            speed = _isHoverActive$option.speed;\n\n        var cuurSpeed = speed || 1;\n\n        _get(_getPrototypeOf(_class.prototype), \"defineProperties\", this).call(this, options);\n\n        Object.defineProperties(this, {\n          isTrackerLayer: {\n            value: true\n          },\n          isHoverActive: {\n            value: !!isHoverActive,\n            writable: true\n          },\n          style: {\n            value: style || this.defaultStyle\n          },\n          speed: {\n            get: function get() {\n              return cuurSpeed;\n            },\n            set: function set(newSpeed) {\n              cuurSpeed = newSpeed;\n\n              _this.start();\n            }\n          },\n          filter: {\n            get: function get() {\n              return _this.tracker.filter;\n            },\n            set: function set(filter) {\n              if (_this.tracker) {\n                _this.tracker.setFilter(filter);\n              }\n            }\n          },\n          sort: {\n            get: function get() {\n              return _this.tracker.sort;\n            },\n            set: function set(sort) {\n              if (_this.sort) {\n                _this.tracker.setSort(sort);\n              }\n            }\n          },\n\n          /**\n           * The tracker that renders the trajectories.\n           */\n          tracker: {\n            value: null,\n            writable: true\n          },\n\n          /**\n           * Canvas cache object for trajectories drawn.\n           */\n          styleCache: {\n            value: {}\n          },\n\n          /**\n           * Time used to display the trajectories.\n           */\n          currTime: {\n            value: new Date(),\n            writable: true\n          },\n\n          /**\n           * Keep track of the last time used to render trajectories.\n           * Useful when the speed increase.\n           */\n          lastUpdateTime: {\n            value: new Date(),\n            writable: true\n          },\n\n          /**\n           * Keep track of which trajectories are currently drawn.\n           */\n          renderedTrajectories: {\n            get: function get() {\n              return _this.tracker.renderedTrajectories;\n            }\n          }\n        });\n      }\n      /**\n       * Initalize the Tracker.\n       * @param {ol/Map~Map} map\n       * @param {Object} options\n       * @param {Number} [options.width] Canvas's width.\n       * @param {Number} [options.height] Canvas's height.\n       * @param {function} [options.getPixelFromCoordinate] Convert an EPSG:3857 coordinate to a canvas pixel (origin top-left).\n       */\n\n    }, {\n      key: \"init\",\n      value: function init(map, options) {\n        var _this2 = this;\n\n        _get(_getPrototypeOf(_class.prototype), \"init\", this).call(this, map);\n\n        this.tracker = new Tracker(options);\n        this.tracker.setStyle(function (props, r) {\n          return _this2.style(props, r);\n        });\n\n        if (this.visible) {\n          this.start();\n        }\n\n        this.visibilityRef = this.on('change:visible', function (evt) {\n          if (evt.target.visible) {\n            _this2.start();\n          } else {\n            _this2.stop();\n          }\n        });\n      }\n      /**\n       * Destroy the Tracker.\n       */\n\n    }, {\n      key: \"terminate\",\n      value: function terminate() {\n        this.stop();\n        unByKey(this.visibilityRef);\n\n        if (this.tracker) {\n          this.tracker.destroy();\n          this.tracker = null;\n        }\n\n        _get(_getPrototypeOf(_class.prototype), \"terminate\", this).call(this);\n      }\n      /**\n       * Start the clock.\n       *\n       * @param {Array<Number>} size Map's size: [width, height].\n       * @param {Number} zoom Map's zoom level.\n       * @param {Number} resolution Map's resolution.\n       */\n\n    }, {\n      key: \"start\",\n      value: function start(size, zoom, resolution) {\n        this.stop();\n        this.tracker.setVisible(true);\n        this.tracker.renderTrajectories(this.currTime, size, resolution);\n        this.startUpdateTime(zoom);\n      }\n      /**\n       * Start the time.\n       * @private\n       * @param {number} zoom\n       */\n\n    }, {\n      key: \"startUpdateTime\",\n      value: function startUpdateTime(zoom) {\n        var _this3 = this;\n\n        this.stopUpdateTime();\n        this.updateTimeInterval = setInterval(function () {\n          var newTime = _this3.currTime.getTime() + (new Date() - _this3.lastUpdateTime) * _this3.speed;\n\n          _this3.setCurrTime(newTime);\n        }, this.getRefreshTimeInMs(zoom));\n      }\n      /**\n       * Stop the clock.\n       */\n\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        this.stopUpdateTime();\n\n        if (this.tracker) {\n          this.tracker.setVisible(false);\n          this.tracker.clear();\n        }\n      }\n      /**\n       * Stop the time.\n       * @private\n       */\n\n    }, {\n      key: \"stopUpdateTime\",\n      value: function stopUpdateTime() {\n        if (this.updateTimeInterval) {\n          clearInterval(this.updateTimeInterval);\n        }\n      }\n      /**\n       * Set the current time, it triggers a rendering of the trajectories.\n       * @param {dateString | value} time\n       * @param {Array<number>} size\n       * @param {number} resolution\n       */\n\n    }, {\n      key: \"setCurrTime\",\n      value: function setCurrTime(time, size, resolution) {\n        var newTime = new Date(time);\n        this.currTime = newTime;\n        this.lastUpdateTime = new Date();\n        this.tracker.renderTrajectories(this.currTime, size, resolution);\n      }\n      /**\n       * Get vehicle.\n       * @param {function} filterFc A function use to filter results.\n       * @returns {Array<Object>} Array of vehicle.\n       */\n\n    }, {\n      key: \"getVehicle\",\n      value: function getVehicle(filterFc) {\n        return this.tracker.getTrajectories().filter(filterFc);\n      }\n      /**\n       * Returns an array of vehicles located at the given coordinates and resolution.\n       *\n       * @param {Array<number>} coordinate\n       * @param {number} resolution\n       * @returns {Object[]} Array of vehicle.\n       */\n\n    }, {\n      key: \"getVehiclesAtCoordinate\",\n      value: function getVehiclesAtCoordinate(coordinate) {\n        var resolution = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        var ext = buffer([].concat(_toConsumableArray(coordinate), _toConsumableArray(coordinate)), 10 * resolution);\n        var trajectories = this.tracker.getTrajectories();\n        var vehicles = [];\n\n        for (var i = 0; i < trajectories.length; i += 1) {\n          if (trajectories[i].coordinate && containsCoordinate(ext, trajectories[i].coordinate)) {\n            vehicles.push(trajectories[i]);\n          }\n        }\n\n        return vehicles;\n      }\n      /**\n       * Get the duration before the next update depending on zoom level.\n       * @private\n       * @param {number} zoom\n       */\n\n    }, {\n      key: \"getRefreshTimeInMs\",\n      value: function getRefreshTimeInMs(zoom) {\n        var roundedZoom = Math.round(zoom);\n        var timeStep = timeSteps[roundedZoom] || 25;\n        var nextTick = Math.max(25, timeStep / this.speed);\n        return nextTick;\n      }\n      /**\n       * Define a default style of the vehicle.s\n       * Draw a blue circle with the id of the props parameter.\n       *\n       * @param {Object} props Properties\n       * @private\n       */\n\n    }, {\n      key: \"defaultStyle\",\n      value: function defaultStyle(props) {\n        var text = props.id;\n\n        if (this.styleCache[text]) {\n          return this.styleCache[text];\n        }\n\n        var canvas = document.createElement('canvas');\n        canvas.width = 200;\n        canvas.height = 15;\n        var ctx = canvas.getContext('2d');\n        ctx.arc(8, 8, 5, 0, 2 * Math.PI, false);\n        ctx.fillStyle = '#8ED6FF';\n        ctx.fill();\n        ctx.lineWidth = 3;\n        ctx.strokeStyle = 'black';\n        ctx.stroke();\n        ctx.font = 'bold 12px arial';\n        ctx.strokeStyle = 'white';\n        ctx.lineWidth = 3;\n        ctx.strokeText(text, 20, 10);\n        ctx.fillStyle = 'black';\n        ctx.fillText(text, 20, 10);\n        this.styleCache[text] = canvas;\n        return this.styleCache[text];\n      }\n    }]);\n\n    return _class;\n  }(Base);\n};\n\nexport default TrackerLayerMixin;","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/common/mixins/TrackerLayerMixin.js"],"names":["buffer","containsCoordinate","unByKey","Tracker","timeSteps","TrackerLayerInterface","map","options","size","zoom","resolution","time","filterFc","coordinate","props","TrackerLayerMixin","Base","isHoverActive","style","speed","cuurSpeed","Object","defineProperties","isTrackerLayer","value","writable","defaultStyle","get","set","newSpeed","start","filter","tracker","setFilter","sort","setSort","styleCache","currTime","Date","lastUpdateTime","renderedTrajectories","setStyle","r","visible","visibilityRef","on","evt","target","stop","destroy","setVisible","renderTrajectories","startUpdateTime","stopUpdateTime","updateTimeInterval","setInterval","newTime","getTime","setCurrTime","getRefreshTimeInMs","clear","clearInterval","getTrajectories","ext","trajectories","vehicles","i","length","push","roundedZoom","Math","round","timeStep","nextTick","max","text","id","canvas","document","createElement","width","height","ctx","getContext","arc","PI","fillStyle","fill","lineWidth","strokeStyle","stroke","font","strokeText","fillText"],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport { buffer, containsCoordinate } from 'ol/extent';\nimport { unByKey } from 'ol/Observable';\nimport Tracker from '../Tracker';\nimport { timeSteps } from '../trackerConfig';\n\n/**\n * TrackerLayerInterface.\n *\n * @classproperty {boolean} isTrackerLayer - Property for duck typing since `instanceof` is not working when the instance was created on different bundles.\n * @classproperty {boolean} isHoverActive - Activate/deactivate pointer hover effect.\n * @classproperty {function} style - Style of the vehicle.\n * @classproperty {FilterFunction} filter - Time speed.\n * @classproperty {function} sort - Set the filter for tracker features.\n */\nexport class TrackerLayerInterface {\n  /**\n   * Initalize the Tracker.\n   * @param {ol/Map~Map} map\n   * @param {Object} options\n   * @param {number} [options.width] Canvas's width.\n   * @param {number} [options.height] Canvas's height.\n   * @param {function} [options.getPixelFromCoordinate] Convert an EPSG:3857 coordinate to a canvas pixel (origin top-left).\n   */\n  // eslint-disable-next-line no-unused-vars\n  init(map, options) {}\n\n  /**\n   * Destroy the Tracker.\n   */\n  terminate() {}\n\n  /**\n   * Start the clock.\n   *\n   * @param {Array<number>} size Map's size: [width, height].\n   * @param {number} zoom Map's zoom level.\n   * @param {number} resolution Map's resolution.\n   */\n  // eslint-disable-next-line no-unused-vars\n  start(size, zoom, resolution) {}\n\n  /**\n   * Stop the time.\n   * @private\n   * @param {number} zoom\n   */\n  // eslint-disable-next-line no-unused-vars\n  startUpdateTime(zoom) {}\n\n  /**\n   * Stop the clock.\n   */\n  stop() {}\n\n  /**\n   * Set the current time, it triggers a rendering of the trajectories.\n   *\n   * @param {Date} time The date to render.\n   * @param {number[2]} size Size of the canvas to render.\n   * @param {number} resolution Map's resolution to render.\n   */\n  // eslint-disable-next-line no-unused-vars\n  setCurrTime(time, size, resolution) {}\n\n  /**\n   * Get vehicle.\n   * @param {function} filterFc A function use to filter results.\n   */\n  // eslint-disable-next-line no-unused-vars\n  getVehicle(filterFc) {}\n\n  /**\n   * Returns the vehicle which are at the given coordinates.\n   * Returns null when no vehicle is located at the given coordinates.\n   *\n   * @param {number[2]} coordinate A coordinate ([x,y]).\n   * @param {number=1} resolution The resolution of the map.\n   * @returns {Object[]} A list of vehicles.\n   */\n  // eslint-disable-next-line no-unused-vars\n  getVehiclesAtCoordinate(coordinate, resolution = 1) {}\n\n  /**\n   * Get the duration before the next update depending on zoom level.\n   * @private\n   * @param {number} zoom\n   */\n  // eslint-disable-next-line no-unused-vars\n  getRefreshTimeInMs(zoom) {}\n\n  /**\n   * Define a default style of the vehicle.s\n   * Draw a blue circle with the id of the props parameter.\n   *\n   * @param {Object} props Properties\n   * @private\n   */\n  // eslint-disable-next-line no-unused-vars\n  defaultStyle(props) {}\n}\n\n/**\n * Mixin for TrackeLayerInterface.\n *\n * @param {Class} Base  A class to extend with {TrackerLayerInterface} functionnalities.\n * @return {Class}  A class that implements <TrackerLayerInterface> class and extends Base;\n * @private\n */\nconst TrackerLayerMixin = (Base) =>\n  class extends Base {\n    /**\n     * Define layer's properties.\n     *\n     * @ignore\n     */\n    defineProperties(options) {\n      const { isHoverActive, style, speed } = {\n        isHoverActive: true,\n        ...options,\n      };\n      let cuurSpeed = speed || 1;\n      super.defineProperties(options);\n      Object.defineProperties(this, {\n        isTrackerLayer: { value: true },\n        isHoverActive: {\n          value: !!isHoverActive,\n          writable: true,\n        },\n        style: {\n          value: style || this.defaultStyle,\n        },\n        speed: {\n          get: () => cuurSpeed,\n          set: (newSpeed) => {\n            cuurSpeed = newSpeed;\n            this.start();\n          },\n        },\n        filter: {\n          get: () => this.tracker.filter,\n          set: (filter) => {\n            if (this.tracker) {\n              this.tracker.setFilter(filter);\n            }\n          },\n        },\n        sort: {\n          get: () => this.tracker.sort,\n          set: (sort) => {\n            if (this.sort) {\n              this.tracker.setSort(sort);\n            }\n          },\n        },\n\n        /**\n         * The tracker that renders the trajectories.\n         */\n        tracker: { value: null, writable: true },\n\n        /**\n         * Canvas cache object for trajectories drawn.\n         */\n        styleCache: { value: {} },\n\n        /**\n         * Time used to display the trajectories.\n         */\n        currTime: {\n          value: new Date(),\n          writable: true,\n        },\n\n        /**\n         * Keep track of the last time used to render trajectories.\n         * Useful when the speed increase.\n         */\n        lastUpdateTime: {\n          value: new Date(),\n          writable: true,\n        },\n\n        /**\n         * Keep track of which trajectories are currently drawn.\n         */\n        renderedTrajectories: {\n          get: () => this.tracker.renderedTrajectories,\n        },\n      });\n    }\n\n    /**\n     * Initalize the Tracker.\n     * @param {ol/Map~Map} map\n     * @param {Object} options\n     * @param {Number} [options.width] Canvas's width.\n     * @param {Number} [options.height] Canvas's height.\n     * @param {function} [options.getPixelFromCoordinate] Convert an EPSG:3857 coordinate to a canvas pixel (origin top-left).\n     */\n    init(map, options) {\n      super.init(map);\n      this.tracker = new Tracker(options);\n      this.tracker.setStyle((props, r) => this.style(props, r));\n\n      if (this.visible) {\n        this.start();\n      }\n\n      this.visibilityRef = this.on('change:visible', (evt) => {\n        if (evt.target.visible) {\n          this.start();\n        } else {\n          this.stop();\n        }\n      });\n    }\n\n    /**\n     * Destroy the Tracker.\n     */\n    terminate() {\n      this.stop();\n      unByKey(this.visibilityRef);\n      if (this.tracker) {\n        this.tracker.destroy();\n        this.tracker = null;\n      }\n      super.terminate();\n    }\n\n    /**\n     * Start the clock.\n     *\n     * @param {Array<Number>} size Map's size: [width, height].\n     * @param {Number} zoom Map's zoom level.\n     * @param {Number} resolution Map's resolution.\n     */\n    start(size, zoom, resolution) {\n      this.stop();\n      this.tracker.setVisible(true);\n      this.tracker.renderTrajectories(this.currTime, size, resolution);\n      this.startUpdateTime(zoom);\n    }\n\n    /**\n     * Start the time.\n     * @private\n     * @param {number} zoom\n     */\n    startUpdateTime(zoom) {\n      this.stopUpdateTime();\n      this.updateTimeInterval = setInterval(() => {\n        const newTime =\n          this.currTime.getTime() +\n          (new Date() - this.lastUpdateTime) * this.speed;\n        this.setCurrTime(newTime);\n      }, this.getRefreshTimeInMs(zoom));\n    }\n\n    /**\n     * Stop the clock.\n     */\n    stop() {\n      this.stopUpdateTime();\n      if (this.tracker) {\n        this.tracker.setVisible(false);\n        this.tracker.clear();\n      }\n    }\n\n    /**\n     * Stop the time.\n     * @private\n     */\n    stopUpdateTime() {\n      if (this.updateTimeInterval) {\n        clearInterval(this.updateTimeInterval);\n      }\n    }\n\n    /**\n     * Set the current time, it triggers a rendering of the trajectories.\n     * @param {dateString | value} time\n     * @param {Array<number>} size\n     * @param {number} resolution\n     */\n    setCurrTime(time, size, resolution) {\n      const newTime = new Date(time);\n      this.currTime = newTime;\n      this.lastUpdateTime = new Date();\n      this.tracker.renderTrajectories(this.currTime, size, resolution);\n    }\n\n    /**\n     * Get vehicle.\n     * @param {function} filterFc A function use to filter results.\n     * @returns {Array<Object>} Array of vehicle.\n     */\n    getVehicle(filterFc) {\n      return this.tracker.getTrajectories().filter(filterFc);\n    }\n\n    /**\n     * Returns an array of vehicles located at the given coordinates and resolution.\n     *\n     * @param {Array<number>} coordinate\n     * @param {number} resolution\n     * @returns {Object[]} Array of vehicle.\n     */\n    getVehiclesAtCoordinate(coordinate, resolution = 1) {\n      const ext = buffer([...coordinate, ...coordinate], 10 * resolution);\n      const trajectories = this.tracker.getTrajectories();\n      const vehicles = [];\n      for (let i = 0; i < trajectories.length; i += 1) {\n        if (\n          trajectories[i].coordinate &&\n          containsCoordinate(ext, trajectories[i].coordinate)\n        ) {\n          vehicles.push(trajectories[i]);\n        }\n      }\n\n      return vehicles;\n    }\n\n    /**\n     * Get the duration before the next update depending on zoom level.\n     * @private\n     * @param {number} zoom\n     */\n    getRefreshTimeInMs(zoom) {\n      const roundedZoom = Math.round(zoom);\n      const timeStep = timeSteps[roundedZoom] || 25;\n      const nextTick = Math.max(25, timeStep / this.speed);\n      return nextTick;\n    }\n\n    /**\n     * Define a default style of the vehicle.s\n     * Draw a blue circle with the id of the props parameter.\n     *\n     * @param {Object} props Properties\n     * @private\n     */\n    defaultStyle(props) {\n      const { id: text } = props;\n      if (this.styleCache[text]) {\n        return this.styleCache[text];\n      }\n      const canvas = document.createElement('canvas');\n      canvas.width = 200;\n      canvas.height = 15;\n      const ctx = canvas.getContext('2d');\n      ctx.arc(8, 8, 5, 0, 2 * Math.PI, false);\n      ctx.fillStyle = '#8ED6FF';\n      ctx.fill();\n      ctx.lineWidth = 3;\n      ctx.strokeStyle = 'black';\n      ctx.stroke();\n      ctx.font = 'bold 12px arial';\n      ctx.strokeStyle = 'white';\n      ctx.lineWidth = 3;\n      ctx.strokeText(text, 20, 10);\n      ctx.fillStyle = 'black';\n      ctx.fillText(text, 20, 10);\n      this.styleCache[text] = canvas;\n      return this.styleCache[text];\n    }\n  };\n\nexport default TrackerLayerMixin;\n"]},"metadata":{},"sourceType":"module"}