{"ast":null,"code":"import ReactDOM from 'react-dom';\nimport { PureComponent, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ResizeObserver from 'resize-observer-polyfill';\nvar propTypes = {\n  observe: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Element), PropTypes.instanceOf(Component), PropTypes.shape({\n    current: PropTypes.instanceOf(Element)\n  }), PropTypes.shape({\n    current: PropTypes.instanceOf(Component)\n  })]),\n  maxHeightBrkpts: PropTypes.objectOf(PropTypes.number),\n  maxWidthBrkpts: PropTypes.objectOf(PropTypes.number),\n  stylePropHeight: PropTypes.string,\n  onResize: PropTypes.func,\n  // This property is used to re-apply the classes, for example when the className of the observed node changes.\n  forceUpdate: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool])\n}; // Same as bootstrap\n\nvar defaultProps = {\n  observe: null,\n  maxHeightBrkpts: {\n    xs: 576,\n    s: 768,\n    m: 992,\n    l: 1200,\n    xl: Infinity\n  },\n  maxWidthBrkpts: {\n    xs: 576,\n    s: 768,\n    m: 992,\n    l: 1200,\n    xl: Infinity\n  },\n  stylePropHeight: null,\n  onResize: null,\n  forceUpdate: null\n};\n/**\n * This component adds css class to an element depending on his size.\n */\n\nvar ResizeHandler = /*@__PURE__*/function (PureComponent) {\n  function ResizeHandler(props) {\n    var this$1 = this;\n    PureComponent.call(this, props);\n    this.observer = new ResizeObserver(function (entries) {\n      return this$1.onResize(entries);\n    });\n    this.nodes = [];\n  }\n\n  if (PureComponent) ResizeHandler.__proto__ = PureComponent;\n  ResizeHandler.prototype = Object.create(PureComponent && PureComponent.prototype);\n  ResizeHandler.prototype.constructor = ResizeHandler;\n\n  ResizeHandler.applyBreakpoints = function applyBreakpoints(entry, breakpoints, size, direction) {\n    var found = false;\n    var screenSize;\n    Object.entries(breakpoints).forEach(function (brkpt) {\n      var assign;\n      var cssClass = \"rs-\" + direction + \"-\" + brkpt[0];\n      entry.target.classList.remove(cssClass);\n\n      if (!found && size <= brkpt[1]) {\n        found = true;\n        assign = brkpt, screenSize = assign[0];\n        entry.target.classList.add(cssClass);\n      }\n    });\n    return screenSize;\n  };\n\n  ResizeHandler.prototype.componentDidMount = function componentDidMount() {\n    this.observe();\n  };\n\n  ResizeHandler.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var ref = this.props;\n    var observe = ref.observe;\n    var forceUpdate = ref.forceUpdate;\n\n    if (observe !== prevProps.observe || forceUpdate !== prevProps.forceUpdate) {\n      this.observe();\n    }\n  };\n\n  ResizeHandler.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.observer.disconnect();\n  };\n\n  ResizeHandler.prototype.onResize = function onResize(entries) {\n    var ref = this.props;\n    var maxHeightBrkpts = ref.maxHeightBrkpts;\n    var maxWidthBrkpts = ref.maxWidthBrkpts;\n    var stylePropHeight = ref.stylePropHeight;\n    var onResize = ref.onResize;\n\n    if (stylePropHeight) {\n      var vh = window.innerHeight * 0.01;\n      document.documentElement.style.setProperty(stylePropHeight, vh + \"px\");\n    }\n\n    if (!maxWidthBrkpts && !maxHeightBrkpts) {\n      onResize(entries);\n      return;\n    }\n\n    var newScreenWidth;\n    var newScreenHeight;\n\n    for (var i = 0; i < entries.length; i += 1) {\n      var entry = entries[i];\n      var rect = entry.contentRect;\n      var height = rect.height;\n      var width = rect.width;\n\n      if (maxWidthBrkpts) {\n        newScreenWidth = ResizeHandler.applyBreakpoints(entry, maxWidthBrkpts, width, 'w');\n      }\n\n      if (maxHeightBrkpts) {\n        newScreenHeight = ResizeHandler.applyBreakpoints(entry, maxHeightBrkpts, height, 'h');\n      }\n    }\n\n    if (onResize) {\n      onResize(entries, newScreenWidth, newScreenHeight);\n    }\n  };\n\n  ResizeHandler.prototype.observe = function observe() {\n    var this$1 = this;\n    this.observer.disconnect();\n    var ref = this.props;\n    var observe = ref.observe;\n\n    if (!observe) {\n      return;\n    }\n\n    if (typeof observe === 'string' || observe instanceof String) {\n      this.nodes = document.querySelectorAll(observe);\n    } else if (observe instanceof Component) {\n      // eslint-disable-next-line react/no-find-dom-node\n      this.nodes.push(ReactDOM.findDOMNode(observe));\n    } else if (observe instanceof Element) {\n      this.nodes.push(observe);\n    } else if (observe.current instanceof Element) {\n      // observe value created with React.createRef() on a html node.\n      this.nodes.push(observe.current);\n    } else if (observe.current instanceof Component) {\n      // observe value created with React.createRef() on a React component.\n      // eslint-disable-next-line react/no-find-dom-node\n      this.nodes.push(ReactDOM.findDOMNode(observe.current));\n    }\n\n    if (this.nodes.length) {\n      this.nodes.forEach(function (node) {\n        return this$1.observer.observe(node);\n      });\n    }\n  };\n\n  ResizeHandler.prototype.render = function render() {\n    return null;\n  };\n\n  return ResizeHandler;\n}(PureComponent);\n\nResizeHandler.propTypes = propTypes;\nResizeHandler.defaultProps = defaultProps;\nexport default ResizeHandler;","map":{"version":3,"sources":["../../../src/components/ResizeHandler/ResizeHandler.js"],"names":["const","let","super","this"],"mappings":"AAAA,OAAO,QAAP,MAAqB,WAArB;AACA,SAAS,aAAT,EAAwB,SAAxB,QAAyC,OAAzC;AACA,OAAO,SAAP,MAAsB,YAAtB;AACA,OAAO,cAAP,MAA2B,0BAA3B;AAEAA,IAAM,SAAS,GAAG;AAChB,EAAA,OAAO,EAAE,SAAS,CAAC,SAAV,CAAoB,CAC3B,SAAS,CAAC,MADiB,EAE3B,SAAS,CAAC,UAAV,CAAqB,OAArB,CAF2B,EAG3B,SAAS,CAAC,UAAV,CAAqB,SAArB,CAH2B,EAI3B,SAAS,CAAC,KAAV,CAAgB;AAAE,IAAA,OAAO,EAAE,SAAS,CAAC,UAAV,CAAqB,OAArB;AAAX,GAAhB,CAJ2B,EAK3B,SAAS,CAAC,KAAV,CAAgB;AAAE,IAAA,OAAO,EAAE,SAAS,CAAC,UAAV,CAAqB,SAArB;AAAX,GAAhB,CAL2B,CAApB,CADO;AAQhB,EAAA,eAAe,EAAE,SAAS,CAAC,QAAV,CAAmB,SAAS,CAAC,MAA7B,CARD;AAShB,EAAA,cAAc,EAAE,SAAS,CAAC,QAAV,CAAmB,SAAS,CAAC,MAA7B,CATA;AAUhB,EAAA,eAAe,EAAE,SAAS,CAAC,MAVX;AAWhB,EAAA,QAAQ,EAAE,SAAS,CAAC,IAXJ;AAalB;AACE,EAAA,WAAW,EAAE,SAAS,CAAC,SAAV,CAAoB,CAC/B,SAAS,CAAC,MADqB,EAE/B,SAAS,CAAC,MAFqB,EAG/B,SAAS,CAAC,IAHqB,CAApB;AAdG,CAAlBA,C,CAqBA;;AACAA,IAAM,YAAY,GAAG;AACnB,EAAA,OAAO,EAAE,IADU;AAEnB,EAAA,eAAe,EAAE;AACf,IAAA,EAAE,EAAE,GADW;AAEf,IAAA,CAAC,EAAE,GAFY;AAGf,IAAA,CAAC,EAAE,GAHY;AAIf,IAAA,CAAC,EAAE,IAJY;AAKf,IAAA,EAAE,EAAE;AALW,GAFE;AASnB,EAAA,cAAc,EAAE;AACd,IAAA,EAAE,EAAE,GADU;AAEd,IAAA,CAAC,EAAE,GAFW;AAGd,IAAA,CAAC,EAAE,GAHW;AAId,IAAA,CAAC,EAAE,IAJW;AAKd,IAAA,EAAE,EAAE;AALU,GATG;AAgBnB,EAAA,eAAe,EAAE,IAhBE;AAiBnB,EAAA,QAAQ,EAAE,IAjBS;AAkBnB,EAAA,WAAW,EAAE;AAlBM,CAArBA;AAoBA;AACA;AACA;;AACA,IAAM,aAAa,GAAsB,aAAA,UAAA,aAAA,EAAA;AAgBvC,WAAA,aAAA,CAAY,KAAZ,EAAmB;;AACjBE,IAAAA,aAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,KAANA;AACA,SAAK,QAAL,GAAgB,IAAI,cAAJ,CAAkB,UAAE,OAAF,EAAS;AAAA,aAAKC,MAAI,CAAC,QAALA,CAAc,OAAdA,CAAL;AAA2B,KAAtD,CAAhB;AACA,SAAK,KAAL,GAAa,EAAb;AACJ;;;;wCAAG,a;;AAnBD,EAAA,aAAA,CAAO,gBAAP,GAAO,SAAA,gBAAA,CAAiB,KAAjB,EAAwB,WAAxB,EAAqC,IAArC,EAA2C,SAA3C,EAAsD;AAC3DF,QAAI,KAAK,GAAG,KAAZA;AACAA,QAAI,UAAJA;AACA,IAAA,MAAM,CAAC,OAAP,CAAe,WAAf,EAA4B,OAA5B,CAAmC,UAAE,KAAF,EAAY;;AAC7CD,UAAM,QAAQ,GAAG,QAAM,SAAN,GAAe,GAAf,GAAmB,KAAK,CAAC,CAAD,CAAzCA;AACA,MAAA,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,MAAvB,CAA8B,QAA9B;;AACA,UAAI,CAAC,KAAD,IAAU,IAAI,IAAI,KAAK,CAAC,CAAD,CAA3B,EAAgC;AAC9B,QAAA,KAAK,GAAG,IAAR;AACR,QAAA,MAAoB,GAAG,KAAvB,EAAS,UAAA,GAAA,MAAA,CAAA,CAAA,CAAT;AACQ,QAAA,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,GAAvB,CAA2B,QAA3B;AACD;AACF,KARD;AASA,WAAO,UAAP;AACJ,GAbE;;0BAqBA,iB,GAAA,SAAA,iBAAA,GAAoB;AAClB,SAAK,OAAL;AACJ,G;;AAEA,EAAA,aAAA,CAAA,SAAA,CAAE,kBAAF,GAAE,SAAA,kBAAA,CAAmB,SAAnB,EAA8B;AAChC,QAAA,GAAkC,GAAG,KAAK,KAA1C;AAAY,QAAA,OAAA,GAAA,GAAA,CAAA,OAAA;AAAS,QAAA,WAAA,GAAA,GAAA,CAAA,WAAA;;AAEjB,QACE,OAAO,KAAK,SAAS,CAAC,OAAtB,IACA,WAAW,KAAK,SAAS,CAAC,WAF5B,EAGE;AACA,WAAK,OAAL;AACD;AACL,GATA;;AAWA,EAAA,aAAA,CAAA,SAAA,CAAE,oBAAF,GAAE,SAAA,oBAAA,GAAuB;AACrB,SAAK,QAAL,CAAc,UAAd;AACJ,GAFA;;AAIA,EAAA,aAAA,CAAA,SAAA,CAAE,QAAF,GAAE,SAAA,QAAA,CAAS,OAAT,EAAkB;AACpB,QAAA,GAKK,GAAG,KAAK,KALb;AACM,QAAA,eAAA,GAAA,GAAA,CAAA,eAAA;AACA,QAAA,cAAA,GAAA,GAAA,CAAA,cAAA;AACA,QAAA,eAAA,GAAA,GAAA,CAAA,eAAA;AACA,QAAA,QAAA,GAAA,GAAA,CAAA,QAAA;;AAGF,QAAI,eAAJ,EAAqB;AACnBA,UAAM,EAAE,GAAG,MAAM,CAAC,WAAP,GAAqB,IAAhCA;AACA,MAAA,QAAQ,CAAC,eAAT,CAAyB,KAAzB,CAA+B,WAA/B,CAA2C,eAA3C,EAA+D,EAAE,GAAA,IAAjE;AACD;;AAED,QAAI,CAAC,cAAD,IAAmB,CAAC,eAAxB,EAAyC;AACvC,MAAA,QAAQ,CAAC,OAAD,CAAR;AACA;AACD;;AAEDC,QAAI,cAAJA;AACAA,QAAI,eAAJA;;AAEA,SAAKA,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,IAAI,CAAzC,EAA4C;AAC1CD,UAAM,KAAK,GAAG,OAAO,CAAC,CAAD,CAArBA;AACAA,UAAM,IAAI,GAAG,KAAK,CAAC,WAAnBA;AACQ,UAAA,MAAA,GAAA,IAAA,CAAA,MAAA;AAAQ,UAAA,KAAA,GAAA,IAAA,CAAA,KAAA;;AAEhB,UAAI,cAAJ,EAAoB;AAClB,QAAA,cAAc,GAAG,aAAa,CAAC,gBAAd,CACf,KADe,EAEf,cAFe,EAGf,KAHe,EAIf,GAJe,CAAjB;AAMD;;AACD,UAAI,eAAJ,EAAqB;AACnB,QAAA,eAAe,GAAG,aAAa,CAAC,gBAAd,CAChB,KADgB,EAEhB,eAFgB,EAGhB,MAHgB,EAIhB,GAJgB,CAAlB;AAMD;AACF;;AAED,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,CAAC,OAAD,EAAU,cAAV,EAA0B,eAA1B,CAAR;AACD;AACL,GA/CA;;AAiDA,EAAA,aAAA,CAAA,SAAA,CAAE,OAAF,GAAE,SAAA,OAAA,GAAU;;AACR,SAAK,QAAL,CAAc,UAAd;AACJ,QAAA,GAAqB,GAAG,KAAK,KAA7B;AAAY,QAAA,OAAA,GAAA,GAAA,CAAA,OAAA;;AAER,QAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AAED,QAAI,OAAO,OAAP,KAAmB,QAAnB,IAA+B,OAAO,YAAY,MAAtD,EAA8D;AAC5D,WAAK,KAAL,GAAa,QAAQ,CAAC,gBAAT,CAA0B,OAA1B,CAAb;AACD,KAFD,MAEO,IAAI,OAAO,YAAY,SAAvB,EAAkC;AAC7C;AACM,WAAK,KAAL,CAAW,IAAX,CAAgB,QAAQ,CAAC,WAAT,CAAqB,OAArB,CAAhB;AACD,KAHM,MAGA,IAAI,OAAO,YAAY,OAAvB,EAAgC;AACrC,WAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB;AACD,KAFM,MAEA,IAAI,OAAO,CAAC,OAAR,YAA2B,OAA/B,EAAwC;AACnD;AACM,WAAK,KAAL,CAAW,IAAX,CAAgB,OAAO,CAAC,OAAxB;AACD,KAHM,MAGA,IAAI,OAAO,CAAC,OAAR,YAA2B,SAA/B,EAA0C;AACrD;AACA;AACM,WAAK,KAAL,CAAW,IAAX,CAAgB,QAAQ,CAAC,WAAT,CAAqB,OAAO,CAAC,OAA7B,CAAhB;AACD;;AAED,QAAI,KAAK,KAAL,CAAW,MAAf,EAAuB;AACrB,WAAK,KAAL,CAAW,OAAX,CAAkB,UAAE,IAAF,EAAM;AAAA,eAAKG,MAAI,CAAC,QAALA,CAAc,OAAdA,CAAsB,IAAtBA,CAAL;AAAgC,OAAxD;AACD;AACL,GA3BA;;AA6BA,EAAA,aAAA,CAAA,SAAA,CAAE,MAAF,GAAE,SAAA,MAAA,GAAS;AACP,WAAO,IAAP;AACJ,GAFA;;;CAvHyC,CAAb,aAAa,CAAzC;;AA4HA,aAAa,CAAC,SAAd,GAA0B,SAA1B;AACA,aAAa,CAAC,YAAd,GAA6B,YAA7B;AAEA,eAAe,aAAf","sourcesContent":["import ReactDOM from 'react-dom';\nimport { PureComponent, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nconst propTypes = {\n  observe: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.instanceOf(Element),\n    PropTypes.instanceOf(Component),\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n    PropTypes.shape({ current: PropTypes.instanceOf(Component) }),\n  ]),\n  maxHeightBrkpts: PropTypes.objectOf(PropTypes.number),\n  maxWidthBrkpts: PropTypes.objectOf(PropTypes.number),\n  stylePropHeight: PropTypes.string,\n  onResize: PropTypes.func,\n\n  // This property is used to re-apply the classes, for example when the className of the observed node changes.\n  forceUpdate: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.bool,\n  ]),\n};\n\n// Same as bootstrap\nconst defaultProps = {\n  observe: null,\n  maxHeightBrkpts: {\n    xs: 576,\n    s: 768,\n    m: 992,\n    l: 1200,\n    xl: Infinity,\n  },\n  maxWidthBrkpts: {\n    xs: 576,\n    s: 768,\n    m: 992,\n    l: 1200,\n    xl: Infinity,\n  },\n  stylePropHeight: null,\n  onResize: null,\n  forceUpdate: null,\n};\n/**\n * This component adds css class to an element depending on his size.\n */\nclass ResizeHandler extends PureComponent {\n  static applyBreakpoints(entry, breakpoints, size, direction) {\n    let found = false;\n    let screenSize;\n    Object.entries(breakpoints).forEach((brkpt) => {\n      const cssClass = `rs-${direction}-${brkpt[0]}`;\n      entry.target.classList.remove(cssClass);\n      if (!found && size <= brkpt[1]) {\n        found = true;\n        [screenSize] = brkpt;\n        entry.target.classList.add(cssClass);\n      }\n    });\n    return screenSize;\n  }\n\n  constructor(props) {\n    super(props);\n    this.observer = new ResizeObserver((entries) => this.onResize(entries));\n    this.nodes = [];\n  }\n\n  componentDidMount() {\n    this.observe();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { observe, forceUpdate } = this.props;\n\n    if (\n      observe !== prevProps.observe ||\n      forceUpdate !== prevProps.forceUpdate\n    ) {\n      this.observe();\n    }\n  }\n\n  componentWillUnmount() {\n    this.observer.disconnect();\n  }\n\n  onResize(entries) {\n    const {\n      maxHeightBrkpts,\n      maxWidthBrkpts,\n      stylePropHeight,\n      onResize,\n    } = this.props;\n\n    if (stylePropHeight) {\n      const vh = window.innerHeight * 0.01;\n      document.documentElement.style.setProperty(stylePropHeight, `${vh}px`);\n    }\n\n    if (!maxWidthBrkpts && !maxHeightBrkpts) {\n      onResize(entries);\n      return;\n    }\n\n    let newScreenWidth;\n    let newScreenHeight;\n\n    for (let i = 0; i < entries.length; i += 1) {\n      const entry = entries[i];\n      const rect = entry.contentRect;\n      const { height, width } = rect;\n\n      if (maxWidthBrkpts) {\n        newScreenWidth = ResizeHandler.applyBreakpoints(\n          entry,\n          maxWidthBrkpts,\n          width,\n          'w',\n        );\n      }\n      if (maxHeightBrkpts) {\n        newScreenHeight = ResizeHandler.applyBreakpoints(\n          entry,\n          maxHeightBrkpts,\n          height,\n          'h',\n        );\n      }\n    }\n\n    if (onResize) {\n      onResize(entries, newScreenWidth, newScreenHeight);\n    }\n  }\n\n  observe() {\n    this.observer.disconnect();\n    const { observe } = this.props;\n\n    if (!observe) {\n      return;\n    }\n\n    if (typeof observe === 'string' || observe instanceof String) {\n      this.nodes = document.querySelectorAll(observe);\n    } else if (observe instanceof Component) {\n      // eslint-disable-next-line react/no-find-dom-node\n      this.nodes.push(ReactDOM.findDOMNode(observe));\n    } else if (observe instanceof Element) {\n      this.nodes.push(observe);\n    } else if (observe.current instanceof Element) {\n      // observe value created with React.createRef() on a html node.\n      this.nodes.push(observe.current);\n    } else if (observe.current instanceof Component) {\n      // observe value created with React.createRef() on a React component.\n      // eslint-disable-next-line react/no-find-dom-node\n      this.nodes.push(ReactDOM.findDOMNode(observe.current));\n    }\n\n    if (this.nodes.length) {\n      this.nodes.forEach((node) => this.observer.observe(node));\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nResizeHandler.propTypes = propTypes;\nResizeHandler.defaultProps = defaultProps;\n\nexport default ResizeHandler;\n"]},"metadata":{},"sourceType":"module"}