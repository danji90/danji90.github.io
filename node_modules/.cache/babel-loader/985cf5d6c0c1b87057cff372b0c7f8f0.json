{"ast":null,"code":"import _objectSpread from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport TrackerLayer from './TrackerLayer';\nimport mixin from '../../common/mixins/TralisLayerMixin';\n/**\n * Responsible for loading and display data from a Tralis service.\n *\n * @example\n * import { TralisLayer } from 'mobility-toolbox-js/ol';\n *\n * const layer = new TralisLayer({\n *   url: [yourUrl],\n *   apiKey: [yourApiKey],\n * });\n *\n *\n * @see <a href=\"/api/class/src/api/tralis/TralisAPI%20js~TralisAPI%20html\">TralisAPI</a>\n *\n * @extends {TrackerLayer}\n * @implements {TralisLayerInterface}\n */\n\nvar TralisLayer = /*#__PURE__*/function (_mixin) {\n  _inherits(TralisLayer, _mixin);\n\n  var _super = _createSuper(TralisLayer);\n\n  function TralisLayer() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TralisLayer);\n\n    _this = _super.call(this, _objectSpread({}, options));\n    /** @ignore */\n\n    _this.resZoom11 = null;\n    /** @ignore */\n\n    _this.resZoom12 = null;\n    return _this;\n  }\n  /**\n   * Initialize the layer:\n   *  - add layer to the OpenLayers Map.\n   *  - add listeners to the OpenLayers Map.\n   *  - subscribe to the Realtime service.\n   * @param {ol/Map~Map} map\n   */\n\n\n  _createClass(TralisLayer, [{\n    key: \"init\",\n    value: function init(map) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(TralisLayer.prototype), \"init\", this).call(this, map);\n\n      if (!this.map) {\n        return;\n      }\n\n      this.resZoom11 = map.getView().getResolutionForZoom(11); // res zoom 11\n\n      this.resZoom12 = map.getView().getResolutionForZoom(12);\n      /** @ignore */\n\n      this.iconScale = this.getIconScaleFromRes(map.getView().getResolution());\n      this.olListenersKeys.push(map.getView().on('change:resolution', function (_ref) {\n        var view = _ref.target;\n        _this2.iconScale = _this2.getIconScaleFromRes(view.getResolution());\n      }));\n    }\n    /**\n     * Create a copy of the TralisLayer.\n     * @param {Object} newOptions Options to override\n     * @returns {TralisLayer} A TralisLayer\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(newOptions) {\n      return new TralisLayer(_objectSpread(_objectSpread({}, this.options), newOptions));\n    }\n  }]);\n\n  return TralisLayer;\n}(mixin(TrackerLayer));\n\nexport default TralisLayer;","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/ol/layers/TralisLayer.js"],"names":["TrackerLayer","mixin","TralisLayer","options","resZoom11","resZoom12","map","getView","getResolutionForZoom","iconScale","getIconScaleFromRes","getResolution","olListenersKeys","push","on","view","target","newOptions"],"mappings":";;;;;;;AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,sCAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,W;;;;;AACJ,yBAA0B;AAAA;;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACxB,gDAAWA,OAAX;AACA;;AACA,UAAKC,SAAL,GAAiB,IAAjB;AACA;;AACA,UAAKC,SAAL,GAAiB,IAAjB;AALwB;AAMzB;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;WACE,cAAKC,GAAL,EAAU;AAAA;;AACR,4EAAWA,GAAX;;AAEA,UAAI,CAAC,KAAKA,GAAV,EAAe;AACb;AACD;;AAED,WAAKF,SAAL,GAAiBE,GAAG,CAACC,OAAJ,GAAcC,oBAAd,CAAmC,EAAnC,CAAjB,CAPQ,CAOiD;;AACzD,WAAKH,SAAL,GAAiBC,GAAG,CAACC,OAAJ,GAAcC,oBAAd,CAAmC,EAAnC,CAAjB;AACA;;AACA,WAAKC,SAAL,GAAiB,KAAKC,mBAAL,CAAyBJ,GAAG,CAACC,OAAJ,GAAcI,aAAd,EAAzB,CAAjB;AAEA,WAAKC,eAAL,CAAqBC,IAArB,CACEP,GAAG,CAACC,OAAJ,GAAcO,EAAd,CAAiB,mBAAjB,EAAsC,gBAAsB;AAAA,YAAXC,IAAW,QAAnBC,MAAmB;AAC1D,QAAA,MAAI,CAACP,SAAL,GAAiB,MAAI,CAACC,mBAAL,CAAyBK,IAAI,CAACJ,aAAL,EAAzB,CAAjB;AACD,OAFD,CADF;AAKD;AAED;AACF;AACA;AACA;AACA;;;;WACE,eAAMM,UAAN,EAAkB;AAChB,aAAO,IAAIf,WAAJ,iCAAqB,KAAKC,OAA1B,GAAsCc,UAAtC,EAAP;AACD;;;;EA1CuBhB,KAAK,CAACD,YAAD,C;;AA6C/B,eAAeE,WAAf","sourcesContent":["import TrackerLayer from './TrackerLayer';\nimport mixin from '../../common/mixins/TralisLayerMixin';\n\n/**\n * Responsible for loading and display data from a Tralis service.\n *\n * @example\n * import { TralisLayer } from 'mobility-toolbox-js/ol';\n *\n * const layer = new TralisLayer({\n *   url: [yourUrl],\n *   apiKey: [yourApiKey],\n * });\n *\n *\n * @see <a href=\"/api/class/src/api/tralis/TralisAPI%20js~TralisAPI%20html\">TralisAPI</a>\n *\n * @extends {TrackerLayer}\n * @implements {TralisLayerInterface}\n */\nclass TralisLayer extends mixin(TrackerLayer) {\n  constructor(options = {}) {\n    super({ ...options });\n    /** @ignore */\n    this.resZoom11 = null;\n    /** @ignore */\n    this.resZoom12 = null;\n  }\n\n  /**\n   * Initialize the layer:\n   *  - add layer to the OpenLayers Map.\n   *  - add listeners to the OpenLayers Map.\n   *  - subscribe to the Realtime service.\n   * @param {ol/Map~Map} map\n   */\n  init(map) {\n    super.init(map);\n\n    if (!this.map) {\n      return;\n    }\n\n    this.resZoom11 = map.getView().getResolutionForZoom(11); // res zoom 11\n    this.resZoom12 = map.getView().getResolutionForZoom(12);\n    /** @ignore */\n    this.iconScale = this.getIconScaleFromRes(map.getView().getResolution());\n\n    this.olListenersKeys.push(\n      map.getView().on('change:resolution', ({ target: view }) => {\n        this.iconScale = this.getIconScaleFromRes(view.getResolution());\n      }),\n    );\n  }\n\n  /**\n   * Create a copy of the TralisLayer.\n   * @param {Object} newOptions Options to override\n   * @returns {TralisLayer} A TralisLayer\n   */\n  clone(newOptions) {\n    return new TralisLayer({ ...this.options, ...newOptions });\n  }\n}\n\nexport default TralisLayer;\n"]},"metadata":{},"sourceType":"module"}