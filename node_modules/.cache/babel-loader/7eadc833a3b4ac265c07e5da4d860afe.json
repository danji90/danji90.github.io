{"ast":null,"code":"import _objectSpread from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport Observable from 'ol/Observable';\nimport { v4 as uuid } from 'uuid';\n/**\n * A class representing a layer to display on map.\n *\n * @example\n * const layer = new Layer({\n *   name: 'myLayer',\n * });\n *\n * @classproperty {string} name - Name of the layer\n * @classproperty {string} key - Identifier of the layer. Must be unique.\n * @classproperty {boolean} isBaseLayer - Define if the layer is a base layer. Read-only.\n * @classproperty {boolean} isQueryable - Define if the layer can be queried. Read-only.\n * @classproperty {boolean} isReactSpatialLayer - Custom property for duck typing since `instanceof` is not working when the instance was created on different bundles. Read-only.\n * @classproperty {Layer[]} children - List of children.\n * @classproperty {String[]} copyrights - Array of copyrights.\n * @classproperty {boolean} visible - Define if the layer is visible or not.\n * @classproperty {Object} properties - Custom properties.\n * @classproperty {ol/Map~Map|mapboxgl.Map} map - The map where the layer is displayed.\n */\n\nvar Layer = /*#__PURE__*/function (_Observable) {\n  _inherits(Layer, _Observable);\n\n  var _super = _createSuper(Layer);\n\n  /**\n   * Constructor\n   *\n   * @param {Object} options\n   * @param {string} [options.name=uuid()] Layer name. Default use a generated uuid.\n   * @param {string} [options.key=uuid().toLowerCase()] Layer key, will use options.name.toLowerCase() if not specified.\n   * @param {string} [options.copyrights=undefined] Array of copyrights.\n   * @param {Array<Layer>} [options.children=[]] Sublayers.\n   * @param {Object} [options.properties={}] Application-specific layer properties.\n   * @param {boolean} [options.visible=true] If true this layer is visible on the map.\n   * @param {boolean} [options.isBaseLayer=false] If true this layer is a baseLayer.\n   * @param {boolean} [options.isQueryable=true] If true feature information can be queried by the react-spatial LayerService. Default is true.\n   */\n  function Layer(options) {\n    var _this;\n\n    _classCallCheck(this, Layer);\n\n    _this = _super.call(this);\n\n    _this.defineProperties(_objectSpread({\n      isQueryable: true\n    }, options));\n\n    if (options.copyrights) {\n      _this.copyrights = options.copyrights;\n    } // Add click callback\n\n\n    var onClick = options.onClick;\n\n    if (onClick) {\n      _this.onClick(onClick);\n    }\n\n    return _this;\n  }\n  /**\n   * Define layer's properties.\n   *\n   * @ignore\n   */\n\n\n  _createClass(Layer, [{\n    key: \"defineProperties\",\n    value: function defineProperties(options) {\n      var _this2 = this;\n\n      var name = options.name,\n          key = options.key,\n          children = options.children,\n          visible = options.visible,\n          properties = options.properties,\n          isBaseLayer = options.isBaseLayer,\n          isQueryable = options.isQueryable;\n      var uid = uuid();\n      var dfltName = name || uid;\n      Object.defineProperties(this, {\n        // options is used for clone function.\n        options: {\n          value: options\n        },\n        name: {\n          value: dfltName\n        },\n        key: {\n          value: key || dfltName.toLowerCase()\n        },\n        isBaseLayer: {\n          value: !!isBaseLayer\n        },\n        isQueryable: {\n          value: !!isQueryable\n        },\n        // Custom property for duck typing since `instanceof` is not working\n        // when the instance was created on different bundles.\n        isReactSpatialLayer: {\n          value: true\n        },\n        children: {\n          value: children || [],\n          writable: true\n        },\n        copyrights: {\n          get: function get() {\n            return _this2.get('copyrights');\n          },\n          set: function set(newCopyrights) {\n            var arrValue = !Array.isArray(newCopyrights) ? [newCopyrights] : newCopyrights;\n            return _this2.set('copyrights', arrValue);\n          }\n        },\n        visible: {\n          value: visible === undefined ? true : visible,\n          writable: true\n        },\n        properties: {\n          value: _objectSpread({}, properties || {})\n        },\n        map: {\n          writable: true\n        },\n\n        /**\n         * Callback function when a user click on a vehicle.\n         */\n        clickCallbacks: {\n          value: []\n        }\n      });\n    }\n    /**\n     * Initialize the layer with the map passed in parameters.\n     *\n     * @param {ol/Map~Map|mapboxgl.Map} map A map.\n     */\n\n  }, {\n    key: \"init\",\n    value: function init(map) {\n      this.terminate();\n      /** @ignore */\n\n      this.map = map;\n    }\n    /**\n     * Terminate what was initialized in init function. Remove layer, events...\n     */\n    // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"terminate\",\n    value: function terminate() {}\n    /**\n     * Get a layer property.\n     *\n     * @param {string} name Property name.\n     * @returns {property} Property\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return this.properties[name];\n    }\n    /**\n     * Set a layer property.\n     *\n     * @param {string} name Property name.\n     * @param {string} value Value.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      this.properties[name] = value;\n      this.dispatchEvent({\n        type: \"change:\".concat(name),\n        target: this\n      });\n    }\n    /**\n     * Change the visibility of the layer\n     *\n     * @param {boolean} visible Defines the visibility of the layer\n     * @param {boolean} [stopPropagationDown]\n     * @param {boolean} [stopPropagationUp]\n     * @param {boolean} [stopPropagationSiblings]\n     */\n\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(visible) {\n      var stopPropagationDown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var stopPropagationUp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var stopPropagationSiblings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (visible === this.visible) {\n        return;\n      }\n      /** @ignore */\n\n\n      this.visible = visible;\n      this.dispatchEvent({\n        type: 'change:visible',\n        target: this,\n        stopPropagationDown: stopPropagationDown,\n        stopPropagationUp: stopPropagationUp,\n        stopPropagationSiblings: stopPropagationSiblings\n      });\n    }\n    /**\n     * Returns an array with visible child layers\n     *\n     * @returns {Layer[]} Visible children\n     */\n\n  }, {\n    key: \"getVisibleChildren\",\n    value: function getVisibleChildren() {\n      return this.children.filter(function (child) {\n        return child.visible;\n      });\n    }\n    /**\n     * Checks whether the layer has child layers with visible set to True\n     *\n     * @returns {boolean} True if the layer has visible child layers\n     */\n\n  }, {\n    key: \"hasVisibleChildren\",\n    value: function hasVisibleChildren() {\n      return !!this.hasChildren(true);\n    }\n    /**\n     * Checks whether the layer has any child layers with visible equal to the input parameter\n     *\n     * @param {boolean} visible The state to check the childlayers against\n     * @returns {boolean} True if the layer has children with the given visibility\n     */\n\n  }, {\n    key: \"hasChildren\",\n    value: function hasChildren(visible) {\n      return !!this.children.find(function (child) {\n        return child.visible === visible;\n      });\n    }\n    /**\n     * Add a child layer\n     *\n     * @param {Layer} layer Add a child layer\n     */\n\n  }, {\n    key: \"addChild\",\n    value: function addChild(layer) {\n      this.children.unshift(layer);\n      this.dispatchEvent({\n        type: \"change:children\",\n        target: this\n      });\n    }\n    /**\n     * Removes a child layer by layer name\n     *\n     * @param {string} name Layer's name\n     */\n\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(name) {\n      for (var i = 0; i < this.children.length; i += 1) {\n        if (this.children[i].name === name) {\n          this.children.splice(i, 1);\n          return;\n        }\n      }\n\n      this.dispatchEvent({\n        type: \"change:children\",\n        target: this\n      });\n    }\n    /**\n     * Request feature information for a given coordinate.\n     * This function must be implemented by inheriting layers.\n     *\n     * @returns {Promise<{layer: Layer, features: ol/Feature~Feature[0], coordinate: null}}>} An empty response.\n     */\n\n  }, {\n    key: \"getFeatureInfoAtCoordinate\",\n    value: function getFeatureInfoAtCoordinate() {\n      // This layer returns no feature info.\n      // The function is implemented by inheriting layers.\n      return Promise.resolve({\n        layer: this,\n        features: [],\n        coordinate: null\n      });\n    }\n    /**\n     * Listens to click events on the layer.\n     * @param {function} callback Callback function, called with the clicked\n     *   features,\n     *   the layer instance and the click event.\n     */\n\n  }, {\n    key: \"onClick\",\n    value: function onClick(callback) {\n      if (typeof callback === 'function') {\n        if (!this.clickCallbacks.includes(callback)) {\n          this.clickCallbacks.push(callback);\n        }\n      } else {\n        throw new Error('callback must be of type function.');\n      }\n    }\n    /**\n     * Unlistens to click events on the layer.\n     * @param {function} callback Callback function, called with the clicked\n     *   features,\n     *   the layer instance and the click event.\n     */\n\n  }, {\n    key: \"unClick\",\n    value: function unClick(callback) {\n      if (typeof callback === 'function') {\n        var idx = this.clickCallbacks.indexOf(callback);\n\n        if (idx >= -1) {\n          this.clickCallbacks.splice(idx, 1);\n        }\n      }\n    }\n  }]);\n\n  return Layer;\n}(Observable);\n\nexport { Layer as default };","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/common/layers/Layer.js"],"names":["Observable","v4","uuid","Layer","options","defineProperties","isQueryable","copyrights","onClick","name","key","children","visible","properties","isBaseLayer","uid","dfltName","Object","value","toLowerCase","isReactSpatialLayer","writable","get","set","newCopyrights","arrValue","Array","isArray","undefined","map","clickCallbacks","terminate","dispatchEvent","type","target","stopPropagationDown","stopPropagationUp","stopPropagationSiblings","filter","child","hasChildren","find","layer","unshift","i","length","splice","Promise","resolve","features","coordinate","callback","includes","push","Error","idx","indexOf"],"mappings":"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","sourcesContent":["import Observable from 'ol/Observable';\nimport { v4 as uuid } from 'uuid';\n\n/**\n * A class representing a layer to display on map.\n *\n * @example\n * const layer = new Layer({\n *   name: 'myLayer',\n * });\n *\n * @classproperty {string} name - Name of the layer\n * @classproperty {string} key - Identifier of the layer. Must be unique.\n * @classproperty {boolean} isBaseLayer - Define if the layer is a base layer. Read-only.\n * @classproperty {boolean} isQueryable - Define if the layer can be queried. Read-only.\n * @classproperty {boolean} isReactSpatialLayer - Custom property for duck typing since `instanceof` is not working when the instance was created on different bundles. Read-only.\n * @classproperty {Layer[]} children - List of children.\n * @classproperty {String[]} copyrights - Array of copyrights.\n * @classproperty {boolean} visible - Define if the layer is visible or not.\n * @classproperty {Object} properties - Custom properties.\n * @classproperty {ol/Map~Map|mapboxgl.Map} map - The map where the layer is displayed.\n */\nexport default class Layer extends Observable {\n  /**\n   * Constructor\n   *\n   * @param {Object} options\n   * @param {string} [options.name=uuid()] Layer name. Default use a generated uuid.\n   * @param {string} [options.key=uuid().toLowerCase()] Layer key, will use options.name.toLowerCase() if not specified.\n   * @param {string} [options.copyrights=undefined] Array of copyrights.\n   * @param {Array<Layer>} [options.children=[]] Sublayers.\n   * @param {Object} [options.properties={}] Application-specific layer properties.\n   * @param {boolean} [options.visible=true] If true this layer is visible on the map.\n   * @param {boolean} [options.isBaseLayer=false] If true this layer is a baseLayer.\n   * @param {boolean} [options.isQueryable=true] If true feature information can be queried by the react-spatial LayerService. Default is true.\n   */\n  constructor(options) {\n    super();\n    this.defineProperties({ isQueryable: true, ...options });\n\n    if (options.copyrights) {\n      this.copyrights = options.copyrights;\n    }\n\n    // Add click callback\n    const { onClick } = options;\n    if (onClick) {\n      this.onClick(onClick);\n    }\n  }\n\n  /**\n   * Define layer's properties.\n   *\n   * @ignore\n   */\n  defineProperties(options) {\n    const {\n      name,\n      key,\n      children,\n      visible,\n      properties,\n      isBaseLayer,\n      isQueryable,\n    } = options;\n    const uid = uuid();\n    const dfltName = name || uid;\n    Object.defineProperties(this, {\n      // options is used for clone function.\n      options: {\n        value: options,\n      },\n      name: {\n        value: dfltName,\n      },\n      key: {\n        value: key || dfltName.toLowerCase(),\n      },\n      isBaseLayer: {\n        value: !!isBaseLayer,\n      },\n      isQueryable: {\n        value: !!isQueryable,\n      },\n      // Custom property for duck typing since `instanceof` is not working\n      // when the instance was created on different bundles.\n      isReactSpatialLayer: {\n        value: true,\n      },\n      children: {\n        value: children || [],\n        writable: true,\n      },\n      copyrights: {\n        get: () => {\n          return this.get('copyrights');\n        },\n        set: (newCopyrights) => {\n          const arrValue = !Array.isArray(newCopyrights)\n            ? [newCopyrights]\n            : newCopyrights;\n          return this.set('copyrights', arrValue);\n        },\n      },\n      visible: {\n        value: visible === undefined ? true : visible,\n        writable: true,\n      },\n      properties: {\n        value: { ...(properties || {}) },\n      },\n      map: {\n        writable: true,\n      },\n      /**\n       * Callback function when a user click on a vehicle.\n       */\n      clickCallbacks: {\n        value: [],\n      },\n    });\n  }\n\n  /**\n   * Initialize the layer with the map passed in parameters.\n   *\n   * @param {ol/Map~Map|mapboxgl.Map} map A map.\n   */\n  init(map) {\n    this.terminate();\n    /** @ignore */\n    this.map = map;\n  }\n\n  /**\n   * Terminate what was initialized in init function. Remove layer, events...\n   */\n  // eslint-disable-next-line class-methods-use-this\n  terminate() {}\n\n  /**\n   * Get a layer property.\n   *\n   * @param {string} name Property name.\n   * @returns {property} Property\n   */\n  get(name) {\n    return this.properties[name];\n  }\n\n  /**\n   * Set a layer property.\n   *\n   * @param {string} name Property name.\n   * @param {string} value Value.\n   */\n  set(name, value) {\n    this.properties[name] = value;\n    this.dispatchEvent({\n      type: `change:${name}`,\n      target: this,\n    });\n  }\n\n  /**\n   * Change the visibility of the layer\n   *\n   * @param {boolean} visible Defines the visibility of the layer\n   * @param {boolean} [stopPropagationDown]\n   * @param {boolean} [stopPropagationUp]\n   * @param {boolean} [stopPropagationSiblings]\n   */\n  setVisible(\n    visible,\n    stopPropagationDown = false,\n    stopPropagationUp = false,\n    stopPropagationSiblings = false,\n  ) {\n    if (visible === this.visible) {\n      return;\n    }\n\n    /** @ignore */\n    this.visible = visible;\n\n    this.dispatchEvent({\n      type: 'change:visible',\n      target: this,\n      stopPropagationDown,\n      stopPropagationUp,\n      stopPropagationSiblings,\n    });\n  }\n\n  /**\n   * Returns an array with visible child layers\n   *\n   * @returns {Layer[]} Visible children\n   */\n  getVisibleChildren() {\n    return this.children.filter((child) => child.visible);\n  }\n\n  /**\n   * Checks whether the layer has child layers with visible set to True\n   *\n   * @returns {boolean} True if the layer has visible child layers\n   */\n  hasVisibleChildren() {\n    return !!this.hasChildren(true);\n  }\n\n  /**\n   * Checks whether the layer has any child layers with visible equal to the input parameter\n   *\n   * @param {boolean} visible The state to check the childlayers against\n   * @returns {boolean} True if the layer has children with the given visibility\n   */\n  hasChildren(visible) {\n    return !!this.children.find((child) => child.visible === visible);\n  }\n\n  /**\n   * Add a child layer\n   *\n   * @param {Layer} layer Add a child layer\n   */\n  addChild(layer) {\n    this.children.unshift(layer);\n    this.dispatchEvent({\n      type: `change:children`,\n      target: this,\n    });\n  }\n\n  /**\n   * Removes a child layer by layer name\n   *\n   * @param {string} name Layer's name\n   */\n  removeChild(name) {\n    for (let i = 0; i < this.children.length; i += 1) {\n      if (this.children[i].name === name) {\n        this.children.splice(i, 1);\n        return;\n      }\n    }\n    this.dispatchEvent({\n      type: `change:children`,\n      target: this,\n    });\n  }\n\n  /**\n   * Request feature information for a given coordinate.\n   * This function must be implemented by inheriting layers.\n   *\n   * @returns {Promise<{layer: Layer, features: ol/Feature~Feature[0], coordinate: null}}>} An empty response.\n   */\n  getFeatureInfoAtCoordinate() {\n    // This layer returns no feature info.\n    // The function is implemented by inheriting layers.\n    return Promise.resolve({\n      layer: this,\n      features: [],\n      coordinate: null,\n    });\n  }\n\n  /**\n   * Listens to click events on the layer.\n   * @param {function} callback Callback function, called with the clicked\n   *   features,\n   *   the layer instance and the click event.\n   */\n  onClick(callback) {\n    if (typeof callback === 'function') {\n      if (!this.clickCallbacks.includes(callback)) {\n        this.clickCallbacks.push(callback);\n      }\n    } else {\n      throw new Error('callback must be of type function.');\n    }\n  }\n\n  /**\n   * Unlistens to click events on the layer.\n   * @param {function} callback Callback function, called with the clicked\n   *   features,\n   *   the layer instance and the click event.\n   */\n  unClick(callback) {\n    if (typeof callback === 'function') {\n      const idx = this.clickCallbacks.indexOf(callback);\n      if (idx >= -1) {\n        this.clickCallbacks.splice(idx, 1);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}