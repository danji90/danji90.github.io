{"ast":null,"code":"import _objectSpread from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _assertThisInitialized from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable no-empty-function */\n\n/* eslint-disable no-useless-constructor */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable class-methods-use-this */\n\n/* eslint-disable max-classes-per-file */\nimport GeoJSON from 'ol/format/GeoJSON';\nimport Point from 'ol/geom/Point';\nimport { TralisAPI, TralisModes } from '../../api';\n/**\n * TralisLayerInterface.\n */\n\nexport var TralisLayerInterface = /*#__PURE__*/function () {\n  /*\n   * Constructor\n    * @param {Object} options Layer options.\n   * @param {string} options.url Tralis service url.\n   * @param {string} options.apiKey Access key for [geOps services](https://developer.geops.io/).\n   * @param {boolean} [options.debug=false] Display additional debug informations.\n   * @param {TralisMode} [options.mode=TralisMode.TOPOGRAPHIC] - Mode.\n   */\n  function TralisLayerInterface() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TralisLayerInterface);\n  }\n  /**\n   * Subscribe to the Tralis service.\n   *\n   * @param {ol/Map~Map} map\n   */\n\n\n  _createClass(TralisLayerInterface, [{\n    key: \"init\",\n    value: function init(map) {}\n    /**\n     * Unsubscribe to the Tralis service.\n     */\n\n  }, {\n    key: \"terminate\",\n    value: function terminate() {}\n    /**\n     * Change the mode.\n     *\n     * @param {TralisMode} mode  Tralis mode\n     */\n\n  }, {\n    key: \"setMode\",\n    value: function setMode(mode) {}\n    /**\n     * Add a feature to the tracker.\n     * @param {number} id The feature id\n     * @param {Trajectory} traj Properties of the trajectory.\n     * @param {boolean} [addOnTop=false] If true, the trajectory is added on top of\n     *   the trajectory object. This affects the draw order. If addOnTop is\n     *   true, the trajectory is drawn first and appears on bottom.\n     * @private\n     */\n\n  }, {\n    key: \"addTrajectory\",\n    value: function addTrajectory(id, traj) {\n      var addOnTop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    }\n    /**\n     * Remove a trajectory with a given id.\n     * @param {number} id The trajectory id\n     * @private\n     */\n\n  }, {\n    key: \"removeTrajectory\",\n    value: function removeTrajectory(id) {}\n    /**\n     * Remove a trajectory by attribute.\n     * @param {string} attributeName Name of the attribute.\n     * @param {*} value Attribute value.\n     * @private\n     */\n\n  }, {\n    key: \"removeTrajectoryByAttribute\",\n    value: function removeTrajectoryByAttribute(attributeName, value) {}\n  }]);\n\n  return TralisLayerInterface;\n}();\n/**\n * Mixin for TralisLayerInterface.\n *\n * @param {TrackerLayer} TrackerLayer A {TrackerLayer} class to extend with {TrajservLayerInterface} functionnalities.\n * @return {Class}  A class that implements {TralisLayerInterface} class and extends Base;\n * @private\n */\n\nvar TralisLayerMixin = function TralisLayerMixin(TrackerLayer) {\n  return /*#__PURE__*/function (_TrackerLayer) {\n    _inherits(_class, _TrackerLayer);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      var _this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, _class);\n\n      _this = _super.call(this, _objectSpread({}, options));\n      _this.debug = options.debug;\n      _this.mode = options.mode || TralisModes.TOPOGRAPHIC;\n      _this.useDynamicIconScale = _this.mode === TralisModes.SCHEMATIC;\n      _this.trajectories = [];\n      _this.refreshTimeInMs = 1000 / 30;\n      _this.onMessage = _this.onMessage.bind(_assertThisInitialized(_this));\n      _this.onDeleteMessage = _this.onDeleteMessage.bind(_assertThisInitialized(_this));\n      _this.api = options.api || new TralisAPI(options);\n      _this.format = new GeoJSON(); // These scales depends from the size specifed in the svgs.\n      // For some reason the size must be specified in the svg (../img/lines) for firefox.\n\n      _this.dfltIconScale = 0.6;\n      _this.dfltIconHighlightScale = 0.8;\n      _this.minIconScale = _this.dfltIconScale * 0.75;\n      return _this;\n    }\n\n    _createClass(_class, [{\n      key: \"init\",\n      value: function init(map) {\n        _get(_getPrototypeOf(_class.prototype), \"init\", this).call(this, map);\n\n        this.api.subscribeTrajectory(this.mode, this.onMessage);\n        this.api.subscribeDeletedVehicles(this.mode, this.onDeleteMessage);\n      }\n    }, {\n      key: \"terminate\",\n      value: function terminate() {\n        this.api.unsubscribeTrajectory();\n        this.api.unsubscribeDeletedVehicles();\n\n        _get(_getPrototypeOf(_class.prototype), \"terminate\", this).call(this);\n      }\n    }, {\n      key: \"setMode\",\n      value: function setMode(mode) {\n        this.mode = mode;\n        this.useDynamicIconScale = this.mode === TralisModes.SCHEMATIC;\n        this.api.subscribeTrajectory(this.mode, this.onMessage);\n        this.api.subscribeDeletedVehicles(this.mode, this.onDeleteMessage);\n      }\n    }, {\n      key: \"getIconScaleFromRes\",\n      value: function getIconScaleFromRes(res) {\n        var scale = this.dfltIconScale;\n\n        if (!this.useDynamicIconScale) {\n          return scale;\n        }\n\n        if (res > this.resZoom11) {\n          var dynamicScale = this.resZoom11 / res;\n          scale = dynamicScale < this.minIconScale ? this.minIconScale : dynamicScale;\n        } else if (res < this.resZoom112) {\n          scale = this.resZoom12 / res;\n        }\n\n        return parseFloat(scale.toFixed(1));\n      }\n    }, {\n      key: \"onMessage\",\n      value: function onMessage(data) {\n        if (!data.content) {\n          return;\n        }\n\n        var feat = this.format.readFeature(data.content);\n        feat.set('timeOffset', Date.now() - data.timestamp); // ignore old events [SBAHNM-97]\n\n        if (feat.get('time_since_update') >= 0) {\n          if (this.debug && this.mode === TralisModes.TOPOGRAPHIC) {\n            var point = new Point(feat.get('raw_coordinates'));\n            point.transform('EPSG:4326', this.map.getView().getProjection());\n            feat.setGeometry(point);\n          }\n\n          this.addTrajectory(feat.get('train_id'), feat.getProperties(), !feat.get('line'));\n        }\n      }\n    }, {\n      key: \"onDeleteMessage\",\n      value: function onDeleteMessage(data) {\n        if (data.content) {\n          this.removeTrajectoryByAttribute('train_id', data.content);\n        }\n      }\n    }, {\n      key: \"addTrajectory\",\n      value: function addTrajectory(id, traj, addOnTop) {\n        var idx = this.trajectories.findIndex(function (t) {\n          return t.train_id === id;\n        });\n        var timeIntervals = traj.time_intervals; // Properties needed to display the vehicle.\n\n        var trajectory = _objectSpread(_objectSpread({}, traj), {}, {\n          id: id,\n          timeIntervals: timeIntervals\n        });\n\n        if (addOnTop) {\n          this.trajectories.unshift(trajectory);\n\n          if (idx !== -1) {\n            this.tracker.trajectories.splice(idx + 1, 1);\n          }\n        } else {\n          this.trajectories.push(trajectory);\n\n          if (idx !== -1) {\n            this.tracker.trajectories.splice(idx, 1);\n          }\n        }\n\n        this.updateTrajectories();\n      }\n    }, {\n      key: \"removeTrajectory\",\n      value: function removeTrajectory(id) {\n        for (var i = 0, len = this.trajectories.length; i < len; i += 1) {\n          if (this.trajectories[i].id === id) {\n            this.trajectories.splice(i, 1);\n            break;\n          }\n        }\n      }\n    }, {\n      key: \"removeTrajectoryByAttribute\",\n      value: function removeTrajectoryByAttribute(attributeName, value) {\n        for (var i = 0, len = this.trajectories.length; i < len; i += 1) {\n          if (this.trajectories[i][attributeName] === value) {\n            this.removeTrajectory(this.trajectories[i].id);\n            break;\n          }\n        }\n      }\n    }, {\n      key: \"updateTrajectories\",\n      value: function updateTrajectories() {\n        this.tracker.setTrajectories(this.trajectories);\n      }\n    }, {\n      key: \"getRefreshTimeInMs\",\n      value: function getRefreshTimeInMs() {\n        return this.refreshTimeInMs;\n      }\n    }]);\n\n    return _class;\n  }(TrackerLayer);\n};\n\nexport default TralisLayerMixin;","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/common/mixins/TralisLayerMixin.js"],"names":["GeoJSON","Point","TralisAPI","TralisModes","TralisLayerInterface","options","map","mode","id","traj","addOnTop","attributeName","value","TralisLayerMixin","TrackerLayer","debug","TOPOGRAPHIC","useDynamicIconScale","SCHEMATIC","trajectories","refreshTimeInMs","onMessage","bind","onDeleteMessage","api","format","dfltIconScale","dfltIconHighlightScale","minIconScale","subscribeTrajectory","subscribeDeletedVehicles","unsubscribeTrajectory","unsubscribeDeletedVehicles","res","scale","resZoom11","dynamicScale","resZoom112","resZoom12","parseFloat","toFixed","data","content","feat","readFeature","set","Date","now","timestamp","get","point","transform","getView","getProjection","setGeometry","addTrajectory","getProperties","removeTrajectoryByAttribute","idx","findIndex","t","train_id","timeIntervals","time_intervals","trajectory","unshift","tracker","splice","push","updateTrajectories","i","len","length","removeTrajectory","setTrajectories"],"mappings":"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","sourcesContent":["/* eslint-disable no-empty-function */\n/* eslint-disable no-useless-constructor */\n/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport GeoJSON from 'ol/format/GeoJSON';\nimport Point from 'ol/geom/Point';\nimport { TralisAPI, TralisModes } from '../../api';\n\n/**\n * TralisLayerInterface.\n */\nexport class TralisLayerInterface {\n  /*\n   * Constructor\n\n   * @param {Object} options Layer options.\n   * @param {string} options.url Tralis service url.\n   * @param {string} options.apiKey Access key for [geOps services](https://developer.geops.io/).\n   * @param {boolean} [options.debug=false] Display additional debug informations.\n   * @param {TralisMode} [options.mode=TralisMode.TOPOGRAPHIC] - Mode.\n   */\n  constructor(options = {}) {}\n\n  /**\n   * Subscribe to the Tralis service.\n   *\n   * @param {ol/Map~Map} map\n   */\n  init(map) {}\n\n  /**\n   * Unsubscribe to the Tralis service.\n   */\n  terminate() {}\n\n  /**\n   * Change the mode.\n   *\n   * @param {TralisMode} mode  Tralis mode\n   */\n  setMode(mode) {}\n\n  /**\n   * Add a feature to the tracker.\n   * @param {number} id The feature id\n   * @param {Trajectory} traj Properties of the trajectory.\n   * @param {boolean} [addOnTop=false] If true, the trajectory is added on top of\n   *   the trajectory object. This affects the draw order. If addOnTop is\n   *   true, the trajectory is drawn first and appears on bottom.\n   * @private\n   */\n  addTrajectory(id, traj, addOnTop = false) {}\n\n  /**\n   * Remove a trajectory with a given id.\n   * @param {number} id The trajectory id\n   * @private\n   */\n  removeTrajectory(id) {}\n\n  /**\n   * Remove a trajectory by attribute.\n   * @param {string} attributeName Name of the attribute.\n   * @param {*} value Attribute value.\n   * @private\n   */\n  removeTrajectoryByAttribute(attributeName, value) {}\n}\n\n/**\n * Mixin for TralisLayerInterface.\n *\n * @param {TrackerLayer} TrackerLayer A {TrackerLayer} class to extend with {TrajservLayerInterface} functionnalities.\n * @return {Class}  A class that implements {TralisLayerInterface} class and extends Base;\n * @private\n */\nconst TralisLayerMixin = (TrackerLayer) =>\n  class extends TrackerLayer {\n    constructor(options = {}) {\n      super({ ...options });\n      this.debug = options.debug;\n      this.mode = options.mode || TralisModes.TOPOGRAPHIC;\n      this.useDynamicIconScale = this.mode === TralisModes.SCHEMATIC;\n      this.trajectories = [];\n      this.refreshTimeInMs = 1000 / 30;\n      this.onMessage = this.onMessage.bind(this);\n      this.onDeleteMessage = this.onDeleteMessage.bind(this);\n      this.api = options.api || new TralisAPI(options);\n      this.format = new GeoJSON();\n\n      // These scales depends from the size specifed in the svgs.\n      // For some reason the size must be specified in the svg (../img/lines) for firefox.\n      this.dfltIconScale = 0.6;\n      this.dfltIconHighlightScale = 0.8;\n      this.minIconScale = this.dfltIconScale * 0.75;\n    }\n\n    init(map) {\n      super.init(map);\n      this.api.subscribeTrajectory(this.mode, this.onMessage);\n      this.api.subscribeDeletedVehicles(this.mode, this.onDeleteMessage);\n    }\n\n    terminate() {\n      this.api.unsubscribeTrajectory();\n      this.api.unsubscribeDeletedVehicles();\n      super.terminate();\n    }\n\n    setMode(mode) {\n      this.mode = mode;\n      this.useDynamicIconScale = this.mode === TralisModes.SCHEMATIC;\n      this.api.subscribeTrajectory(this.mode, this.onMessage);\n      this.api.subscribeDeletedVehicles(this.mode, this.onDeleteMessage);\n    }\n\n    getIconScaleFromRes(res) {\n      let scale = this.dfltIconScale;\n      if (!this.useDynamicIconScale) {\n        return scale;\n      }\n      if (res > this.resZoom11) {\n        const dynamicScale = this.resZoom11 / res;\n        scale =\n          dynamicScale < this.minIconScale ? this.minIconScale : dynamicScale;\n      } else if (res < this.resZoom112) {\n        scale = this.resZoom12 / res;\n      }\n      return parseFloat(scale.toFixed(1));\n    }\n\n    onMessage(data) {\n      if (!data.content) {\n        return;\n      }\n      const feat = this.format.readFeature(data.content);\n\n      feat.set('timeOffset', Date.now() - data.timestamp);\n\n      // ignore old events [SBAHNM-97]\n      if (feat.get('time_since_update') >= 0) {\n        if (this.debug && this.mode === TralisModes.TOPOGRAPHIC) {\n          const point = new Point(feat.get('raw_coordinates'));\n          point.transform('EPSG:4326', this.map.getView().getProjection());\n          feat.setGeometry(point);\n        }\n\n        this.addTrajectory(\n          feat.get('train_id'),\n          feat.getProperties(),\n          !feat.get('line'),\n        );\n      }\n    }\n\n    onDeleteMessage(data) {\n      if (data.content) {\n        this.removeTrajectoryByAttribute('train_id', data.content);\n      }\n    }\n\n    addTrajectory(id, traj, addOnTop) {\n      const idx = this.trajectories.findIndex((t) => t.train_id === id);\n      const { time_intervals: timeIntervals } = traj;\n\n      // Properties needed to display the vehicle.\n      const trajectory = { ...traj, id, timeIntervals };\n      if (addOnTop) {\n        this.trajectories.unshift(trajectory);\n        if (idx !== -1) {\n          this.tracker.trajectories.splice(idx + 1, 1);\n        }\n      } else {\n        this.trajectories.push(trajectory);\n        if (idx !== -1) {\n          this.tracker.trajectories.splice(idx, 1);\n        }\n      }\n\n      this.updateTrajectories();\n    }\n\n    removeTrajectory(id) {\n      for (let i = 0, len = this.trajectories.length; i < len; i += 1) {\n        if (this.trajectories[i].id === id) {\n          this.trajectories.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    removeTrajectoryByAttribute(attributeName, value) {\n      for (let i = 0, len = this.trajectories.length; i < len; i += 1) {\n        if (this.trajectories[i][attributeName] === value) {\n          this.removeTrajectory(this.trajectories[i].id);\n          break;\n        }\n      }\n    }\n\n    updateTrajectories() {\n      this.tracker.setTrajectories(this.trajectories);\n    }\n\n    getRefreshTimeInMs() {\n      return this.refreshTimeInMs;\n    }\n  };\n\nexport default TralisLayerMixin;\n"]},"metadata":{},"sourceType":"module"}