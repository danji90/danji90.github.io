{"ast":null,"code":"import _slicedToArray from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport Feature from 'ol/Feature';\nimport { transform as transformCoords } from 'ol/proj';\nimport { buffer, getWidth } from 'ol/extent';\nimport { Point, MultiPoint, LineString } from 'ol/geom';\nimport { Style, Fill, Stroke, Circle } from 'ol/style';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport { Vector as VectorSource } from 'ol/source';\nimport TrackerLayer from './TrackerLayer';\nimport { getUTCTimeString } from '../../common/timeUtils';\nimport { getBgColor } from '../../common/trackerConfig';\nimport mixin from '../../common/mixins/TrajservLayerMixin';\n/**\n * Responsible for loading and display data from a Trajserv service.\n *\n * @example\n * import { TrajservLayer } from 'mobility-toolbox-js/mapbox';\n *\n * const layer = new TrajservLayer({\n *   url: 'https://api.geops.io/tracker/v1',\n *   apiKey: [yourApiKey],\n * });\n *\n *\n * @see <a href=\"/api/class/src/api/trajserv/TrajservAPI%20js~TrajservAPI%20html\">TrajservAPI</a>\n * @see <a href=\"/example/ol-tracker\">OL tracker example</a>\n *\n * @extends {TrackerLayer}\n * @implements {TrajservLayerInterface}\n */\n\nvar TrajservLayer = /*#__PURE__*/function (_mixin) {\n  _inherits(TrajservLayer, _mixin);\n\n  var _super = _createSuper(TrajservLayer);\n\n  function TrajservLayer() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TrajservLayer);\n\n    // We use a group to be able to add custom vector layer in extended class.\n    // For example TrajservLayer use a vectorLayer to display the complete trajectory.\n    _this = _super.call(this, _objectSpread({}, options));\n    /** @ignore */\n\n    _this.vectorLayer = new VectorLayer({\n      source: new VectorSource({\n        features: []\n      })\n    });\n\n    _this.olLayer.getLayers().insertAt(0, _this.vectorLayer);\n\n    return _this;\n  }\n  /**\n   * Initialize the layer.\n   * @param {mapboxgl.Map} map the mapbox map.\n   * @override\n   */\n\n\n  _createClass(TrajservLayer, [{\n    key: \"init\",\n    value: function init(map) {\n      if (!map) {\n        return;\n      }\n\n      map.addLayer(this.vectorLayer);\n\n      _get(_getPrototypeOf(TrajservLayer.prototype), \"init\", this).call(this, map);\n    }\n    /**\n     * Terminate the layer.\n     * @override\n     */\n\n  }, {\n    key: \"terminate\",\n    value: function terminate() {\n      if (this.map) {\n        this.map.removeLayer(this.vectorLayer);\n      }\n\n      _get(_getPrototypeOf(TrajservLayer.prototype), \"terminate\", this).call(this);\n    }\n    /**\n     * Start the layer.\n     * @override\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (!this.map) {\n        return;\n      }\n\n      _get(_getPrototypeOf(TrajservLayer.prototype), \"start\", this).call(this);\n      /**\n       * Array of ol events key, returned by on() or once().\n       * @type {Array<ol/events~EventsKey>}\n       */\n\n\n      this.olEventsKeys = [].concat(_toConsumableArray(this.olEventsKeys), [this.map.on('singleclick', this.onMapClick.bind(this)), this.map.on('moveend', this.onMoveEnd.bind(this))]);\n    }\n    /**\n     * Callback on 'moveend' event.\n     * @private\n     */\n\n  }, {\n    key: \"onMoveEnd\",\n    value: function onMoveEnd() {\n      this.updateTrajectories();\n\n      if (this.selectedVehicleId && this.journeyId) {\n        this.highlightTrajectory();\n      }\n    }\n    /**\n     * Callback on 'singleclick' event.\n     * @param {ol/MapEvent~MapEvent} evt\n     * @private\n     */\n\n  }, {\n    key: \"onMapClick\",\n    value: function onMapClick(evt) {\n      var _this2 = this;\n\n      if (!this.clickCallbacks.length) {\n        return;\n      }\n\n      var _this$getVehiclesAtCo = this.getVehiclesAtCoordinate(evt.coordinate),\n          _this$getVehiclesAtCo2 = _slicedToArray(_this$getVehiclesAtCo, 1),\n          vehicle = _this$getVehiclesAtCo2[0];\n\n      var features = [];\n\n      if (vehicle) {\n        var geom = vehicle.coordinate ? new Point(vehicle.coordinate) : null;\n        features.push(new Feature(_objectSpread({\n          geometry: geom\n        }, vehicle)));\n\n        if (features.length) {\n          /**\n           * Id of the selected vehicle\n           * @type {string}\n           */\n          this.selectedVehicleId = features[0].get('id');\n          /** @ignore */\n\n          this.journeyId = features[0].get('journeyIdentifier');\n          this.updateTrajectoryStations(this.selectedVehicleId).then(function (trajStations) {\n            _this2.clickCallbacks.forEach(function (callback) {\n              return callback(_objectSpread(_objectSpread({}, vehicle), trajStations), _this2, evt);\n            });\n          });\n        }\n      } else {\n        this.selectedVehicleId = null;\n        this.vectorLayer.getSource().clear();\n        this.clickCallbacks.forEach(function (callback) {\n          return callback(null, _this2, evt);\n        });\n      }\n    }\n    /**\n     * Draw the trajectory as a line with points for each stop.\n     * @param {Array} stationsCoords Array of station coordinates.\n     * @param {LineString|MultiLineString} lineGeometry A LineString or a MultiLineString.\n     * @param {string} color The color of the line.\n     * @private\n     */\n\n  }, {\n    key: \"drawFullTrajectory\",\n    value: function drawFullTrajectory(stationsCoords, lineGeometry, color) {\n      // Don't allow white lines, use red instead.\n      var vehiculeColor = /#ffffff/i.test(color) ? '#ff0000' : color;\n      var vectorSource = this.vectorLayer.getSource();\n      vectorSource.clear();\n\n      if (stationsCoords) {\n        var geometry = new MultiPoint(stationsCoords);\n        var aboveStationsFeature = new Feature(geometry);\n        aboveStationsFeature.setStyle(new Style({\n          zIndex: 1,\n          image: new Circle({\n            radius: 5,\n            fill: new Fill({\n              color: '#000000'\n            })\n          })\n        }));\n        var belowStationsFeature = new Feature(geometry);\n        belowStationsFeature.setStyle(new Style({\n          zIndex: 4,\n          image: new Circle({\n            radius: 4,\n            fill: new Fill({\n              color: this.useDelayStyle ? '#a0a0a0' : vehiculeColor\n            })\n          })\n        }));\n        vectorSource.addFeatures([aboveStationsFeature, belowStationsFeature]);\n      }\n\n      var lineFeat = new Feature({\n        geometry: lineGeometry\n      });\n      lineFeat.setStyle([new Style({\n        zIndex: 2,\n        stroke: new Stroke({\n          color: '#000000',\n          width: 6\n        })\n      }), new Style({\n        zIndex: 3,\n        stroke: new Stroke({\n          color: this.useDelayStyle ? '#a0a0a0' : vehiculeColor,\n          width: 4\n        })\n      })]);\n      vectorSource.addFeature(lineFeat);\n    }\n    /**\n     * Fetch stations information with a trajectory ID\n     * @param {number} trajId The ID of the trajectory\n     * @returns {Promise<TrajectoryStation[]>} A list of stations.\n     * @private\n     */\n\n  }, {\n    key: \"updateTrajectoryStations\",\n    value: function updateTrajectoryStations(trajId) {\n      var _this3 = this;\n\n      return _get(_getPrototypeOf(TrajservLayer.prototype), \"updateTrajectoryStations\", this).call(this, trajId).then(function (trajStations) {\n        /**\n         * Array of station coordinates.\n         * @type {Array<ol/coordinate~Coordinate>}\n         */\n        _this3.stationsCoords = [];\n        trajStations.stations.forEach(function (station) {\n          _this3.stationsCoords.push(transformCoords(station.coordinates, 'EPSG:4326', 'EPSG:3857'));\n        });\n\n        _this3.highlightTrajectory();\n\n        return trajStations;\n      });\n    }\n    /**\n     * Highlight the trajectory of journey.\n     * @private\n     */\n\n  }, {\n    key: \"highlightTrajectory\",\n    value: function highlightTrajectory() {\n      var _this4 = this;\n\n      this.api.fetchTrajectoryById(this.getParams({\n        id: this.journeyId,\n        time: getUTCTimeString(new Date())\n      })).then(function (traj) {\n        var multiLine = traj.p,\n            t = traj.t,\n            c = traj.c;\n        var lineCoords = [];\n        multiLine.forEach(function (line) {\n          line.forEach(function (point) {\n            lineCoords.push([point.x, point.y]);\n          });\n        });\n\n        _this4.drawFullTrajectory(_this4.stationsCoords, new LineString(lineCoords), c ? \"#\".concat(c) : getBgColor(t));\n      }).catch(function () {\n        _this4.vectorLayer.getSource().clear();\n      });\n    }\n    /**\n     * @override\n     * * Returns the URL parameters.\n     * @param {Object} extraParams Extra parameters\n     * @returns {Object}\n     * @private\n     */\n\n  }, {\n    key: \"getParams\",\n    value: function getParams() {\n      var extraParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var ext = this.map.getView().calculateExtent();\n      var bbox = buffer(ext, getWidth(ext) / 10).join(',');\n      var zoom = this.map.getView().getZoom();\n      return _get(_getPrototypeOf(TrajservLayer.prototype), \"getParams\", this).call(this, _objectSpread(_objectSpread({}, extraParams), {}, {\n        bbox: bbox,\n        s: zoom < 10 ? 1 : 0,\n        z: zoom\n      }));\n    }\n    /** @ignore */\n\n  }, {\n    key: \"defaultStyle\",\n    value: function defaultStyle(props) {\n      var zoom = this.map.getView().getZoom();\n      return _get(_getPrototypeOf(TrajservLayer.prototype), \"defaultStyle\", this).call(this, props, zoom);\n    }\n    /**\n     * Create a copy of the TrajservLayer.\n     * @param {Object} newOptions Options to override\n     * @returns {TrajservLayer} A TrajservLayer\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(newOptions) {\n      return new TrajservLayer(_objectSpread(_objectSpread({}, this.options), newOptions));\n    }\n  }]);\n\n  return TrajservLayer;\n}(mixin(TrackerLayer));\n\nexport default TrajservLayer;","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/ol/layers/TrajservLayer.js"],"names":["Feature","transform","transformCoords","buffer","getWidth","Point","MultiPoint","LineString","Style","Fill","Stroke","Circle","Vector","VectorLayer","VectorSource","TrackerLayer","getUTCTimeString","getBgColor","mixin","TrajservLayer","options","vectorLayer","source","features","olLayer","getLayers","insertAt","map","addLayer","removeLayer","olEventsKeys","on","onMapClick","bind","onMoveEnd","updateTrajectories","selectedVehicleId","journeyId","highlightTrajectory","evt","clickCallbacks","length","getVehiclesAtCoordinate","coordinate","vehicle","geom","push","geometry","get","updateTrajectoryStations","then","trajStations","forEach","callback","getSource","clear","stationsCoords","lineGeometry","color","vehiculeColor","test","vectorSource","aboveStationsFeature","setStyle","zIndex","image","radius","fill","belowStationsFeature","useDelayStyle","addFeatures","lineFeat","stroke","width","addFeature","trajId","stations","station","coordinates","api","fetchTrajectoryById","getParams","id","time","Date","traj","multiLine","p","t","c","lineCoords","line","point","x","y","drawFullTrajectory","catch","extraParams","ext","getView","calculateExtent","bbox","join","zoom","getZoom","s","z","props","newOptions"],"mappings":"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","sourcesContent":["import Feature from 'ol/Feature';\nimport { transform as transformCoords } from 'ol/proj';\nimport { buffer, getWidth } from 'ol/extent';\nimport { Point, MultiPoint, LineString } from 'ol/geom';\nimport { Style, Fill, Stroke, Circle } from 'ol/style';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport { Vector as VectorSource } from 'ol/source';\nimport TrackerLayer from './TrackerLayer';\nimport { getUTCTimeString } from '../../common/timeUtils';\nimport { getBgColor } from '../../common/trackerConfig';\nimport mixin from '../../common/mixins/TrajservLayerMixin';\n\n/**\n * Responsible for loading and display data from a Trajserv service.\n *\n * @example\n * import { TrajservLayer } from 'mobility-toolbox-js/mapbox';\n *\n * const layer = new TrajservLayer({\n *   url: 'https://api.geops.io/tracker/v1',\n *   apiKey: [yourApiKey],\n * });\n *\n *\n * @see <a href=\"/api/class/src/api/trajserv/TrajservAPI%20js~TrajservAPI%20html\">TrajservAPI</a>\n * @see <a href=\"/example/ol-tracker\">OL tracker example</a>\n *\n * @extends {TrackerLayer}\n * @implements {TrajservLayerInterface}\n */\nclass TrajservLayer extends mixin(TrackerLayer) {\n  constructor(options = {}) {\n    // We use a group to be able to add custom vector layer in extended class.\n    // For example TrajservLayer use a vectorLayer to display the complete trajectory.\n    super({\n      ...options,\n    });\n\n    /** @ignore */\n    this.vectorLayer = new VectorLayer({\n      source: new VectorSource({ features: [] }),\n    });\n    this.olLayer.getLayers().insertAt(0, this.vectorLayer);\n  }\n\n  /**\n   * Initialize the layer.\n   * @param {mapboxgl.Map} map the mapbox map.\n   * @override\n   */\n  init(map) {\n    if (!map) {\n      return;\n    }\n\n    map.addLayer(this.vectorLayer);\n    super.init(map);\n  }\n\n  /**\n   * Terminate the layer.\n   * @override\n   */\n  terminate() {\n    if (this.map) {\n      this.map.removeLayer(this.vectorLayer);\n    }\n    super.terminate();\n  }\n\n  /**\n   * Start the layer.\n   * @override\n   */\n  start() {\n    if (!this.map) {\n      return;\n    }\n    super.start();\n    /**\n     * Array of ol events key, returned by on() or once().\n     * @type {Array<ol/events~EventsKey>}\n     */\n    this.olEventsKeys = [\n      ...this.olEventsKeys,\n      this.map.on('singleclick', this.onMapClick.bind(this)),\n      this.map.on('moveend', this.onMoveEnd.bind(this)),\n    ];\n  }\n\n  /**\n   * Callback on 'moveend' event.\n   * @private\n   */\n  onMoveEnd() {\n    this.updateTrajectories();\n    if (this.selectedVehicleId && this.journeyId) {\n      this.highlightTrajectory();\n    }\n  }\n\n  /**\n   * Callback on 'singleclick' event.\n   * @param {ol/MapEvent~MapEvent} evt\n   * @private\n   */\n  onMapClick(evt) {\n    if (!this.clickCallbacks.length) {\n      return;\n    }\n\n    const [vehicle] = this.getVehiclesAtCoordinate(evt.coordinate);\n    const features = [];\n\n    if (vehicle) {\n      const geom = vehicle.coordinate ? new Point(vehicle.coordinate) : null;\n      features.push(new Feature({ geometry: geom, ...vehicle }));\n\n      if (features.length) {\n        /**\n         * Id of the selected vehicle\n         * @type {string}\n         */\n        this.selectedVehicleId = features[0].get('id');\n        /** @ignore */\n        this.journeyId = features[0].get('journeyIdentifier');\n        this.updateTrajectoryStations(this.selectedVehicleId).then(\n          (trajStations) => {\n            this.clickCallbacks.forEach((callback) =>\n              callback({ ...vehicle, ...trajStations }, this, evt),\n            );\n          },\n        );\n      }\n    } else {\n      this.selectedVehicleId = null;\n      this.vectorLayer.getSource().clear();\n      this.clickCallbacks.forEach((callback) => callback(null, this, evt));\n    }\n  }\n\n  /**\n   * Draw the trajectory as a line with points for each stop.\n   * @param {Array} stationsCoords Array of station coordinates.\n   * @param {LineString|MultiLineString} lineGeometry A LineString or a MultiLineString.\n   * @param {string} color The color of the line.\n   * @private\n   */\n  drawFullTrajectory(stationsCoords, lineGeometry, color) {\n    // Don't allow white lines, use red instead.\n    const vehiculeColor = /#ffffff/i.test(color) ? '#ff0000' : color;\n    const vectorSource = this.vectorLayer.getSource();\n    vectorSource.clear();\n\n    if (stationsCoords) {\n      const geometry = new MultiPoint(stationsCoords);\n      const aboveStationsFeature = new Feature(geometry);\n      aboveStationsFeature.setStyle(\n        new Style({\n          zIndex: 1,\n          image: new Circle({\n            radius: 5,\n            fill: new Fill({\n              color: '#000000',\n            }),\n          }),\n        }),\n      );\n      const belowStationsFeature = new Feature(geometry);\n      belowStationsFeature.setStyle(\n        new Style({\n          zIndex: 4,\n          image: new Circle({\n            radius: 4,\n            fill: new Fill({\n              color: this.useDelayStyle ? '#a0a0a0' : vehiculeColor,\n            }),\n          }),\n        }),\n      );\n      vectorSource.addFeatures([aboveStationsFeature, belowStationsFeature]);\n    }\n\n    const lineFeat = new Feature({\n      geometry: lineGeometry,\n    });\n    lineFeat.setStyle([\n      new Style({\n        zIndex: 2,\n        stroke: new Stroke({\n          color: '#000000',\n          width: 6,\n        }),\n      }),\n      new Style({\n        zIndex: 3,\n        stroke: new Stroke({\n          color: this.useDelayStyle ? '#a0a0a0' : vehiculeColor,\n          width: 4,\n        }),\n      }),\n    ]);\n    vectorSource.addFeature(lineFeat);\n  }\n\n  /**\n   * Fetch stations information with a trajectory ID\n   * @param {number} trajId The ID of the trajectory\n   * @returns {Promise<TrajectoryStation[]>} A list of stations.\n   * @private\n   */\n  updateTrajectoryStations(trajId) {\n    return super.updateTrajectoryStations(trajId).then((trajStations) => {\n      /**\n       * Array of station coordinates.\n       * @type {Array<ol/coordinate~Coordinate>}\n       */\n      this.stationsCoords = [];\n      trajStations.stations.forEach((station) => {\n        this.stationsCoords.push(\n          transformCoords(station.coordinates, 'EPSG:4326', 'EPSG:3857'),\n        );\n      });\n\n      this.highlightTrajectory();\n      return trajStations;\n    });\n  }\n\n  /**\n   * Highlight the trajectory of journey.\n   * @private\n   */\n  highlightTrajectory() {\n    this.api\n      .fetchTrajectoryById(\n        this.getParams({\n          id: this.journeyId,\n          time: getUTCTimeString(new Date()),\n        }),\n      )\n      .then((traj) => {\n        const { p: multiLine, t, c } = traj;\n        const lineCoords = [];\n        multiLine.forEach((line) => {\n          line.forEach((point) => {\n            lineCoords.push([point.x, point.y]);\n          });\n        });\n\n        this.drawFullTrajectory(\n          this.stationsCoords,\n          new LineString(lineCoords),\n          c ? `#${c}` : getBgColor(t),\n        );\n      })\n      .catch(() => {\n        this.vectorLayer.getSource().clear();\n      });\n  }\n\n  /**\n   * @override\n   * * Returns the URL parameters.\n   * @param {Object} extraParams Extra parameters\n   * @returns {Object}\n   * @private\n   */\n  getParams(extraParams = {}) {\n    const ext = this.map.getView().calculateExtent();\n    const bbox = buffer(ext, getWidth(ext) / 10).join(',');\n    const zoom = this.map.getView().getZoom();\n\n    return super.getParams({\n      ...extraParams,\n      bbox,\n      s: zoom < 10 ? 1 : 0,\n      z: zoom,\n    });\n  }\n\n  /** @ignore */\n  defaultStyle(props) {\n    const zoom = this.map.getView().getZoom();\n    return super.defaultStyle(props, zoom);\n  }\n\n  /**\n   * Create a copy of the TrajservLayer.\n   * @param {Object} newOptions Options to override\n   * @returns {TrajservLayer} A TrajservLayer\n   */\n  clone(newOptions) {\n    return new TrajservLayer({ ...this.options, ...newOptions });\n  }\n}\n\nexport default TrajservLayer;\n"]},"metadata":{},"sourceType":"module"}