{"ast":null,"code":"import _objectSpread from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/daniel/gitRepos/danji90.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { unByKey } from 'ol/Observable';\nimport Layer from './Layer';\n/**\n * Class use to display a WMS layer.\n *\n * @extends {Layer}\n */\n\nvar WMSLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(WMSLayer, _Layer);\n\n  var _super = _createSuper(WMSLayer);\n\n  /**\n   * @inheritdoc\n   */\n  function WMSLayer() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, WMSLayer);\n\n    _this = _super.call(this, options);\n    /** @ignore */\n\n    _this.abortController = new AbortController();\n    /** @ignore */\n\n    _this.format = new GeoJSON();\n    return _this;\n  }\n  /**\n   * Get features infos' Url.\n   * @param {ol/coordinate~Coordinate} coord\n   * @returns {ol/layer/Layer~Layer}\n   */\n\n\n  _createClass(WMSLayer, [{\n    key: \"getFeatureInfoUrl\",\n    value: function getFeatureInfoUrl(coord) {\n      var projection = this.map.getView().getProjection();\n      var resolution = this.map.getView().getResolution();\n\n      if (this.olLayer.getSource().getFeatureInfoUrl) {\n        return this.olLayer.getSource().getFeatureInfoUrl(coord, resolution, projection, {\n          info_format: 'application/json',\n          query_layers: this.olLayer.getSource().getParams().layers\n        });\n      }\n\n      return false;\n    }\n    /**\n     * Request feature information for a given coordinate.\n     * @param {ol/coordinate~Coordinate} coordinate to request the information at.\n     * @returns {Promise<Object>} Promise with features, layer and coordinate\n     *  or null if no feature was hit.\n     * eslint-disable-next-line class-methods-use-this\n     */\n\n  }, {\n    key: \"getFeatureInfoAtCoordinate\",\n    value: function getFeatureInfoAtCoordinate(coordinate) {\n      var _this2 = this;\n\n      this.abortController.abort();\n      this.abortController = new AbortController();\n      var signal = this.abortController.signal;\n      return fetch(this.getFeatureInfoUrl(coordinate), {\n        signal: signal\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (r) {\n        return r.features;\n      }).then(function (data) {\n        return {\n          layer: _this2,\n          coordinate: coordinate,\n          features: data.map(function (d) {\n            return _this2.format.readFeature(d);\n          })\n        };\n      }).catch(function () {\n        return (// resolve an empty feature array something fails\n          Promise.resolve({\n            features: [],\n            coordinate: coordinate,\n            layer: _this2\n          })\n        );\n      });\n    }\n    /**\n     * Initialize the layer and listen to feature clicks.\n     * @param {ol/Map~Map} map An OpenLayers map.\n     */\n\n  }, {\n    key: \"init\",\n    value: function init(map) {\n      var _this3 = this;\n\n      _get(_getPrototypeOf(WMSLayer.prototype), \"init\", this).call(this, map);\n\n      if (!this.map) {\n        return;\n      }\n      /**\n       * ol click events key, returned by map.on('singleclick')\n       * @private\n       * @type {ol/events~EventsKey}\n       */\n\n\n      this.singleClickRef = this.map.on('singleclick', function (e) {\n        if (!_this3.clickCallbacks.length) {\n          return;\n        }\n\n        _this3.getFeatureInfoAtCoordinate(e.coordinate).then(function (data) {\n          return _this3.callClickCallbacks(data.features, data.layer, data.coordinate);\n        });\n      });\n    }\n    /**\n     * Call click callbacks with given parameters.\n     * This is done in a separate function for being able to modify the response.\n     * @param {Array<ol/Feature~Feature>} features\n     * @param {ol/layer/Layer~Layer} layer\n     * @param {ol/coordinate~Coordinate} coordinate\n     * @private\n     */\n\n  }, {\n    key: \"callClickCallbacks\",\n    value: function callClickCallbacks(features, layer, coordinate) {\n      this.clickCallbacks.forEach(function (c) {\n        return c(features, layer, coordinate);\n      });\n    }\n    /**\n     * Terminate what was initialized in init function. Remove layer, events...\n     */\n\n  }, {\n    key: \"terminate\",\n    value: function terminate() {\n      _get(_getPrototypeOf(WMSLayer.prototype), \"terminate\", this).call(this);\n\n      if (this.singleClickRef) {\n        unByKey(this.singleClickRef);\n      }\n    }\n    /**\n     * Create a copy of the WMSLayer.\n     * @param {Object} newOptions Options to override\n     * @returns {WMSLayer} A WMSLayer\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(newOptions) {\n      return new WMSLayer(_objectSpread(_objectSpread({}, this.options), newOptions));\n    }\n  }]);\n\n  return WMSLayer;\n}(Layer);\n\nexport default WMSLayer;","map":{"version":3,"sources":["/home/daniel/gitRepos/danji90.github.io/node_modules/mobility-toolbox-js/ol/layers/WMSLayer.js"],"names":["GeoJSON","unByKey","Layer","WMSLayer","options","abortController","AbortController","format","coord","projection","map","getView","getProjection","resolution","getResolution","olLayer","getSource","getFeatureInfoUrl","info_format","query_layers","getParams","layers","coordinate","abort","signal","fetch","then","resp","json","r","features","data","layer","d","readFeature","catch","Promise","resolve","singleClickRef","on","e","clickCallbacks","length","getFeatureInfoAtCoordinate","callClickCallbacks","forEach","c","newOptions"],"mappings":"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","sourcesContent":["import GeoJSON from 'ol/format/GeoJSON';\nimport { unByKey } from 'ol/Observable';\nimport Layer from './Layer';\n\n/**\n * Class use to display a WMS layer.\n *\n * @extends {Layer}\n */\nclass WMSLayer extends Layer {\n  /**\n   * @inheritdoc\n   */\n  constructor(options = {}) {\n    super(options);\n\n    /** @ignore */\n    this.abortController = new AbortController();\n    /** @ignore */\n    this.format = new GeoJSON();\n  }\n\n  /**\n   * Get features infos' Url.\n   * @param {ol/coordinate~Coordinate} coord\n   * @returns {ol/layer/Layer~Layer}\n   */\n  getFeatureInfoUrl(coord) {\n    const projection = this.map.getView().getProjection();\n    const resolution = this.map.getView().getResolution();\n\n    if (this.olLayer.getSource().getFeatureInfoUrl) {\n      return this.olLayer\n        .getSource()\n        .getFeatureInfoUrl(coord, resolution, projection, {\n          info_format: 'application/json',\n          query_layers: this.olLayer.getSource().getParams().layers,\n        });\n    }\n    return false;\n  }\n\n  /**\n   * Request feature information for a given coordinate.\n   * @param {ol/coordinate~Coordinate} coordinate to request the information at.\n   * @returns {Promise<Object>} Promise with features, layer and coordinate\n   *  or null if no feature was hit.\n   * eslint-disable-next-line class-methods-use-this\n   */\n  getFeatureInfoAtCoordinate(coordinate) {\n    this.abortController.abort();\n    this.abortController = new AbortController();\n    const { signal } = this.abortController;\n    return fetch(this.getFeatureInfoUrl(coordinate), { signal })\n      .then((resp) => resp.json())\n      .then((r) => r.features)\n      .then((data) => ({\n        layer: this,\n        coordinate,\n        features: data.map((d) => this.format.readFeature(d)),\n      }))\n      .catch(() =>\n        // resolve an empty feature array something fails\n        Promise.resolve({\n          features: [],\n          coordinate,\n          layer: this,\n        }),\n      );\n  }\n\n  /**\n   * Initialize the layer and listen to feature clicks.\n   * @param {ol/Map~Map} map An OpenLayers map.\n   */\n  init(map) {\n    super.init(map);\n\n    if (!this.map) {\n      return;\n    }\n\n    /**\n     * ol click events key, returned by map.on('singleclick')\n     * @private\n     * @type {ol/events~EventsKey}\n     */\n    this.singleClickRef = this.map.on('singleclick', (e) => {\n      if (!this.clickCallbacks.length) {\n        return;\n      }\n\n      this.getFeatureInfoAtCoordinate(e.coordinate).then((data) =>\n        this.callClickCallbacks(data.features, data.layer, data.coordinate),\n      );\n    });\n  }\n\n  /**\n   * Call click callbacks with given parameters.\n   * This is done in a separate function for being able to modify the response.\n   * @param {Array<ol/Feature~Feature>} features\n   * @param {ol/layer/Layer~Layer} layer\n   * @param {ol/coordinate~Coordinate} coordinate\n   * @private\n   */\n  callClickCallbacks(features, layer, coordinate) {\n    this.clickCallbacks.forEach((c) => c(features, layer, coordinate));\n  }\n\n  /**\n   * Terminate what was initialized in init function. Remove layer, events...\n   */\n  terminate() {\n    super.terminate();\n    if (this.singleClickRef) {\n      unByKey(this.singleClickRef);\n    }\n  }\n\n  /**\n   * Create a copy of the WMSLayer.\n   * @param {Object} newOptions Options to override\n   * @returns {WMSLayer} A WMSLayer\n   */\n  clone(newOptions) {\n    return new WMSLayer({ ...this.options, ...newOptions });\n  }\n}\n\nexport default WMSLayer;\n"]},"metadata":{},"sourceType":"module"}