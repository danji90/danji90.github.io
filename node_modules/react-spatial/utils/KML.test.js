import { configure } from 'enzyme';
import VectorLayer from 'ol/layer/Vector';
import VectorSource from 'ol/source/Vector';
import { Style } from 'ol/style';
import { get } from 'ol/proj';
import Adapter from 'enzyme-adapter-react-16';
import beautify from 'xml-beautifier';
import KML from './KML';

configure({ adapter: new Adapter() });
var xmlns =
  'xmlns="http://www.opengis.net/kml/2.2" xmlns:gx="http://www.google.com/kml/ext/2.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/kml/2.2 https://developers.google.com/kml/schema/kml22gx.xsd"';

var expectWriteResult = function (feats, str) {
  expect(
    beautify(
      KML.writeFeatures(
        {
          name: 'lala',
          olLayer: new VectorLayer({
            source: new VectorSource({
              features: feats,
            }),
          }),
        },
        get('EPSG:4326')
      )
    )
  ).toEqual(beautify(str));
};

describe('KML', function () {
  describe('readFeatures() and writeFeatures()', function () {
    test('should read/write LineStyle and ExtendedData (linesDash, lineStartIcon and lineEndIcon).', function () {
      var str = "\n        <kml " + xmlns + ">\n          <Document>\n            <name>lala</name>\n            <Placemark>\n                <Style>\n                  <LineStyle>\n                    <color>ff056600</color>\n                    <width>1</width>\n                  </LineStyle>\n                </Style>\n                <ExtendedData>\n                  <Data name=\"lineDash\"><value>40,40</value></Data>\n                  <Data name=\"lineEndIcon\"><value>{\"url\":\"fooarrowend.png\",\"scale\":0.35,\"size\":[36,58],\"zIndex\":1}</value></Data>\n                  <Data name=\"lineStartIcon\"><value>{\"url\":\"fooarrowstart.png\",\"scale\":0.35,\"size\":[36,58],\"zIndex\":1}</value></Data>\n                </ExtendedData>\n                <LineString><coordinates>0,1,0 3,5,0 40,25,0</coordinates></LineString>\n            </Placemark>\n          </Document>\n        </kml>\n      ";
      var feats = KML.readFeatures(str);
      var styles = feats[0].getStyle();
      expect(feats.length).toBe(1);
      expect(styles.length).toBe(3);

      // line stroke
      var strokeStyle = styles[0].getStroke();
      expect(strokeStyle.getColor()).toEqual([0, 102, 5, 1]);
      expect(strokeStyle.getLineDash()).toEqual([40, 40]);

      // line start icon
      var lineStartStyle = styles[1];
      expect(lineStartStyle.getImage().getRotation()).toEqual(
        -0.9272952180016122
      );
      expect(lineStartStyle.getImage().getColor()).toEqual([0, 102, 5, 1]);
      expect(lineStartStyle.getImage().getRotateWithView()).toBe(true);
      expect(lineStartStyle.getGeometry()(feats[0]).getCoordinates()).toEqual([
        0,
        1,
        0 ]);
      expect(lineStartStyle.getZIndex()).toEqual(1);

      // line end icon
      var lineEndStyle = styles[2];
      expect(lineEndStyle.getImage().getRotation()).toEqual(
        -0.49555167348582857
      );
      expect(lineEndStyle.getImage().getRotateWithView()).toBe(true);
      expect(lineEndStyle.getImage().getColor()).toEqual([0, 102, 5, 1]);
      expect(lineEndStyle.getGeometry()(feats[0]).getCoordinates()).toEqual([
        40,
        25,
        0 ]);
      expect(lineEndStyle.getZIndex()).toEqual(1);

      expectWriteResult(feats, str);
    });

    test('should read/write TextStyle and ExtendedData.', function () {
      var str = "\n        <kml " + xmlns + ">\n          <Document>\n            <name>lala</name>\n            <Placemark>\n              <name>   bar  </name>\n              <Style>\n                <IconStyle>\n                  <scale>0</scale>\n                </IconStyle>\n                <LabelStyle>\n                  <color>ff7e3420</color>\n                  <scale>2</scale>\n                </LabelStyle>\n              </Style>\n              <ExtendedData>\n                <Data name=\"textAlign\">\n                  <value>right</value>\n                </Data>\n                <Data name=\"textBackgroundFillColor\">\n                  <value>rgba(255,255,255,0.01)</value>\n                </Data>\n                <Data name=\"textFont\">\n                  <value>bold 16px arial</value>\n                </Data>\n                <Data name=\"textOffsetX\">\n                  <value>-90</value>\n                </Data>\n                <Data name=\"textOffsetY\">\n                  <value>30</value>\n                </Data>\n                <Data name=\"textPadding\">\n                  <value>5,6,7,8</value>\n                </Data>\n                <Data name=\"textRotation\">\n                  <value>2.303834612632515</value>\n                </Data>\n                <Data name=\"textStrokeColor\">\n                  <value>rgba(100,255,255,0.2)</value>\n                </Data>\n                <Data name=\"textStrokeWidth\">\n                  <value>3</value>\n                </Data>\n              </ExtendedData>\n              <Point>\n                <coordinates>0,0,0</coordinates>\n              </Point>\n            </Placemark>\n          </Document>\n        </kml>\n      ";
      var feats = KML.readFeatures(str);
      var style = feats[0].getStyleFunction()(feats[0], 1);
      expect(feats.length).toBe(1);
      expect(style instanceof Style).toBe(true);

      // Text
      var styleText = style.getText();
      expect(styleText.getText()).toBe('bar'); // spaces are trimmed.
      expect(styleText.getFont()).toEqual('bold 16px arial');
      expect(styleText.getFill()).toEqual({ color_: [32, 52, 126, 1] });
      expect(styleText.getStroke()).toEqual({
        color_: 'rgba(100,255,255,0.2)',
        width_: 3,
        lineCap_: undefined,
        lineDashOffset_: undefined,
        lineDash_: null,
        lineJoin_: undefined,
        miterLimit_: undefined,
      });
      expect(styleText.getScale()).toEqual(2);
      expect(styleText.getRotation()).toEqual('2.303834612632515');
      expect(styleText.getPadding()).toEqual([5, 6, 7, 8]);
      expect(styleText.getBackgroundFill()).toEqual({
        color_: 'rgba(255,255,255,0.01)',
      });
      expect(styleText.getTextAlign()).toEqual('right');
      expect(styleText.getOffsetX()).toEqual(-90);
      expect(styleText.getOffsetY()).toEqual(30);
      expectWriteResult(feats, str);
    });

    test('should read and write lineDash and fillPattern style for polygon', function () {
      var str = "\n        <kml " + xmlns + ">\n          <Document>\n            <name>lala</name>\n            <Placemark>\n                <description></description>\n                <Style>\n                    <LineStyle>\n                        <color>ff0000eb</color>\n                        <width>2</width>\n                    </LineStyle>\n                    <PolyStyle>\n                      <fill>0</fill>\n                    </PolyStyle>\n                </Style>\n                <ExtendedData>\n                    <Data name=\"fillPattern\">\n                        <value>{\"id\":3,\"color\":[235,0,0,1]}</value>\n                    </Data>\n                    <Data name=\"lineDash\">\n                        <value>1,1</value>\n                    </Data>\n                </ExtendedData>\n                <Polygon>\n                    <outerBoundaryIs>\n                        <LinearRing>\n                            <coordinates>8.521,47.381,0 8.529,47.375,0 8.531,47.382,0 8.521,47.381,0</coordinates>\n                        </LinearRing>\n                    </outerBoundaryIs>\n                </Polygon>\n            </Placemark>\n        </Document>\n      </kml>\n      ";
      var feats = KML.readFeatures(str);
      var styles = feats[0].getStyle();
      expect(feats.length).toBe(1);
      expect(styles.length).toBe(1);

      // Polygon
      var feature = feats[0];
      var outlineStyle = styles[0].getStroke();
      expect(outlineStyle.getColor()).toEqual([235, 0, 0, 1]);
      expect(outlineStyle.getWidth()).toEqual(2);
      var fillStyle = styles[0].getFill();
      expect(feature.get('fillPattern')).toEqual({
        id: 3,
        color: [235, 0, 0, 1],
      });
      var color = fillStyle.getColor();
      expect(color.canvas).toMatchSnapshot();
      expect(color.id).toBe(3);
      expect(color.color).toEqual([235, 0, 0, 1]);
      expectWriteResult(feats, str);
    });

    test('should add zIndex and rotation to icon style and pictureOptions to feature properties.', function () {
      var str = "\n      <kml " + xmlns + ">\n        <Document>\n            <name>lala</name>\n            <Placemark>\n                <description></description>\n                <Style>\n                    <IconStyle>\n                        <heading>\n                          1.5707963267948966\n                        </heading>\n                        <Icon>\n                            <href>https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png</href>\n                            <gx:w>64</gx:w>\n                            <gx:h>64</gx:h>\n                        </Icon>\n                        <hotSpot x=\"20\" y=\"2\" xunits=\"pixels\" yunits=\"pixels\"/>\n                    </IconStyle>\n                </Style>\n                <ExtendedData>\n                    <Data name=\"iconRotation\">\n                      <value>1.5707963267948966</value>\n                    </Data>\n                    <Data name=\"maxZoom\">\n                      <value>18.5</value>\n                    </Data>\n                    <Data name=\"minZoom\">\n                      <value>15</value>\n                    </Data>\n                    <Data name=\"pictureOptions\">\n                      <value>{\"resolution\":4,\"defaultScale\":0.5}</value>\n                    </Data>\n                    <Data name=\"zIndex\">\n                        <value>1</value>\n                    </Data>\n                </ExtendedData>\n                <Point>\n                    <coordinates>0,0,0</coordinates>\n                </Point>\n            </Placemark>\n        </Document>\n      </kml>\n      ";
      var feats = KML.readFeatures(str);
      var style = feats[0].getStyleFunction()(feats[0], 1);
      expect(style.getZIndex()).toBe(1);
      expect(style.getImage().getRotation()).toBe(1.5707963267948966);
      expect(feats[0].get('pictureOptions')).toEqual({
        resolution: 4,
        defaultScale: 0.5,
      });
      expect(feats[0].get('maxZoom')).toEqual(18.5);
      expect(feats[0].get('minZoom')).toEqual(15);
      expectWriteResult(feats, str);
    });
  });
});

//# sourceMappingURL=KML.test.js.map