{"version":3,"file":"getPolygonPattern.test.js","sources":["../../src/utils/getPolygonPattern.test.js"],"sourcesContent":["import getPolygonPattern from './getPolygonPattern';\n\ndescribe('getPolygonPattern()', () => {\n  test('render pattern with default properties (id=1, color = [235, 0, 0, 1])', () => {\n    const color = [235, 0, 0, 1];\n    const pattern = getPolygonPattern();\n    expect(pattern).toEqual(color);\n    expect(pattern.id).toBe();\n    expect(pattern.color).toBe();\n    expect(pattern.empty).toBe();\n    expect(pattern.canvas).toBe();\n  });\n\n  test('render pattern 0 (no fill) color and (light blue) opacity', () => {\n    const id = 0;\n    const color = [0, 60, 80, 0.41000000000000003];\n    const pattern = getPolygonPattern(id, [0, 60, 80, 0.41000000000000003]);\n    expect(pattern.id).toBe(id);\n    expect(pattern.color).toEqual(color);\n    expect(pattern.empty).toBe(true);\n    expect(pattern.canvas).toBe();\n  });\n\n  test('render pattern 1 (full by color) color and (light blue) opacity', () => {\n    const id = 1;\n    const color = [0, 60, 80, 0.41000000000000003];\n    const pattern = getPolygonPattern(id, [0, 60, 80, 0.41000000000000003]);\n    expect(pattern).toEqual(color);\n    expect(pattern.id).toBe();\n    expect(pattern.color).toBe();\n    expect(pattern.empty).toBe();\n    expect(pattern.canvas).toBe();\n  });\n\n  test('render pattern 2 (cross) color and (light blue) opacity', () => {\n    const id = 2;\n    const color = [0, 60, 80, 0.41000000000000003];\n    const pattern = getPolygonPattern(id, [0, 60, 80, 0.41000000000000003]);\n    expect(pattern.id).toBe(id);\n    expect(pattern.color).toEqual(color);\n    expect(pattern.empty).toBe();\n    expect(pattern.canvas).toMatchSnapshot();\n  });\n\n  test('render pattern 3 (diagonal line from bottom-left tot top-right) with color (light blue) and opacity', () => {\n    const id = 3;\n    const color = [0, 60, 80, 0.41000000000000003];\n    const pattern = getPolygonPattern(id, [0, 60, 80, 0.41000000000000003]);\n    expect(pattern.id).toBe(id);\n    expect(pattern.color).toEqual(color);\n    expect(pattern.empty).toBe();\n    expect(pattern.canvas).toMatchSnapshot();\n  });\n\n  test('render pattern 4 (diagonal line from top-left to bottom-right) with color (light blue) and opacity', () => {\n    const id = 4;\n    const color = [0, 60, 80, 0.41000000000000003];\n    const pattern = getPolygonPattern(id, [0, 60, 80, 0.41000000000000003]);\n    expect(pattern.id).toBe(id);\n    expect(pattern.color).toEqual(color);\n    expect(pattern.empty).toBe();\n    expect(pattern.canvas).toMatchSnapshot();\n  });\n});\n"],"names":["const"],"mappings":"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"}