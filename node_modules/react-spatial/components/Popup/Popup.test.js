import React from 'react';
import renderer from 'react-test-renderer';
import { configure, mount, shallow } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
import 'jest-canvas-mock';

import OLMap from 'ol/Map';
import View from 'ol/View';
import Feature from 'ol/Feature';
import Point from 'ol/geom/Point';
import Line from 'ol/geom/LineString';
import Popup from './Popup';

var map;

configure({ adapter: new Adapter() });

var feat = new Feature({
  geometry: new Point([0, 0]),
});

var featLine = new Feature({
  geometry: new Line([
    [0, 0],
    [1, 1] ]),
});

describe('Popup', function () {
  beforeEach(function () {
    map = new OLMap({});
  });

  describe('should match snapshot', function () {
    test('without feature', function () {
      var component = renderer.create(
        React.createElement( Popup, { map: map },
          React.createElement( 'div', { id: "foo" })
        )
      );
      var tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });

    test('with default values.', function () {
      var component = renderer.create(
        React.createElement( Popup, { map: map, feature: feat },
          React.createElement( 'div', { id: "foo" })
        )
      );
      var tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });

    test('without close button.', function () {
      var component = renderer.create(
        React.createElement( Popup, { map: map, feature: feat, renderCloseButton: function () { return null; } },
          React.createElement( 'div', { id: "bar" })
        )
      );
      var tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });

    test('without header.', function () {
      var component = renderer.create(
        React.createElement( Popup, { map: map, feature: feat, renderHeader: function () { return null; } },
          React.createElement( 'div', { id: "bar" })
        )
      );
      var tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });

    test('with tabIndex defined.', function () {
      var component = renderer.create(
        React.createElement( Popup, { map: map, feature: feat, tabIndex: "0" },
          React.createElement( 'div', { id: "bar" })
        )
      );
      var tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });
  });

  [
    ['click', {}],
    ['keypress', { which: 13 }] ].forEach(function (evt) {
    test(("should trigger onCloseClick function on " + (evt[0]) + " event."), function () {
      var ref;

      var spy = jest.fn(function () {});

      var component = mount(
        React.createElement( Popup, { map: map, feature: feat, onCloseClick: spy },
          React.createElement( 'div', { id: "gux" })
        )
      );

      (ref = component
        .find('div')
        .at(3))
        .simulate.apply(ref, evt);
      expect(spy).toHaveBeenCalled();
    });

    test(("should trigger default onCloseClick function on " + (evt[0]) + " event without errors."), function () {
      var ref;

      var component = mount(
        React.createElement( Popup, { map: map, feature: feat },
          React.createElement( 'div', { id: "gux" })
        )
      );
      // test if no js error triggered by the default value
      try {
        (ref = component
          .find('div')
          .at(3))
          .simulate.apply(ref, evt);
        expect(true).toBe(true);
      } catch (e) {
        expect(false).toBe(true);
      }
    });
  });

  describe("init position", function () {
    test("using popupCoordinate.", function () {
      map.getPixelFromCoordinate = jest.fn(function () { return [10, 200]; });
      var component = mount(
        React.createElement( Popup, { map: map, popupCoordinate: [1, 2] },
          React.createElement( 'div', { id: "gux" })
        )
      );
      expect(component.state().left).toBe(10);
      expect(component.state().top).toBe(200);
      component.setProps({ feature: featLine });
      map.getPixelFromCoordinate = jest.fn(function () { return [11, 100]; });
      component.setProps({ popupCoordinate: [9, 9] });
      expect(component.state().left).toBe(11);
      expect(component.state().top).toBe(100);
    });

    test("using feature.", function () {
      map.getPixelFromCoordinate = jest.fn(function () { return [10, 200]; });
      var component = mount(
        React.createElement( Popup, { map: map, feature: feat },
          React.createElement( 'div', { id: "gux" })
        )
      );
      expect(component.state().left).toBe(10);
      expect(component.state().top).toBe(200);
      map.getPixelFromCoordinate = jest.fn(function () { return [11, 100]; });
      component.setProps({ feature: featLine });
      expect(component.state().left).toBe(11);
      expect(component.state().top).toBe(100);
    });
  });

  describe("updates position", function () {
    test("on map postrender event.", function () {
      map.getPixelFromCoordinate = jest.fn(function () { return [10, 200]; });
      var component = shallow(
        React.createElement( Popup, { map: map, feature: feat },
          React.createElement( 'div', { id: "gux" })
        )
      );
      var spy = jest.spyOn(component.instance(), 'updatePixelPosition');
      map.dispatchEvent({ type: 'postrender' });
      expect(spy).toHaveBeenCalledTimes(1);
    });
  });

  describe("#panIntoView", function () {
    beforeEach(function () {
      var target = document.createElement('div');
      var style = target.style;
      style.position = 'absolute';
      style.left = '-1000px';
      style.top = '-1000px';
      style.width = '100px';
      style.height = '100px';
      document.body.appendChild(target);

      map = new OLMap({
        target: target,
        view: new View({
          center: [0, 0],
          resolutions: [1],
          zoom: 0,
        }),
      });
      map.renderSync();
    });

    afterEach(function () {
      var target = map.getTarget();
      map.setTarget(null);
      if (target && target.parentNode) {
        target.parentNode.removeChild(target);
      }
      map.dispose();
    });

    test("animate the map.", function () {
      map.getTarget().getBoundingClientRect = jest.fn(function () { return ({
        bottom: -10,
        left: 5,
        right: -5,
        top: 5,
      }); });
      map.getPixelFromCoordinate = jest.fn(function () { return [10, 200]; });
      var spy = jest.spyOn(map.getView(), 'animate');
      mount(
        React.createElement( Popup, { map: map, feature: feat, panIntoView: true },
          React.createElement( 'div', { id: "gux" })
        )
      );
      expect(spy).toHaveBeenCalledTimes(1);
      expect(spy).toHaveBeenCalledWith({ center: [5, -10], duration: 500 });
    });

    test("using panRect", function () {
      map.getPixelFromCoordinate = jest.fn(function () { return [10, 200]; });
      var spy = jest.spyOn(map.getView(), 'animate');
      mount(
        React.createElement( Popup, {
          map: map, feature: feat, panIntoView: true, panRect: { top: 0, left: 0, bottom: -10, right: 0 } },
          React.createElement( 'div', { id: "gux" })
        )
      );
      expect(spy).toHaveBeenCalledTimes(1);
      expect(spy).toHaveBeenCalledWith({ center: [0, -10], duration: 500 });
    });

    test("doesn't animate the map", function () {
      map.getPixelFromCoordinate = jest.fn(function () { return [10, 200]; });
      var spy = jest.spyOn(map.getView(), 'animate');
      mount(
        React.createElement( Popup, {
          map: map, feature: feat, panIntoView: true, panRect: { top: 0, left: 0, bottom: 0, right: 0 } },
          React.createElement( 'div', { id: "gux" })
        )
      );
      expect(spy).toHaveBeenCalledTimes(0);
    });
  });

  test("deregisters postrender on unmount.", function () {
    map.getPixelFromCoordinate = jest.fn(function () { return [10, 200]; });
    var component = shallow(
      React.createElement( Popup, { map: map, feature: featLine },
        React.createElement( 'div', { id: "gux" })
      )
    );
    var spy = jest.spyOn(component.instance(), 'updatePixelPosition');
    map.dispatchEvent({ type: 'postrender' });
    expect(spy).toHaveBeenCalledTimes(1);
    component.unmount();
    map.dispatchEvent({ type: 'postrender' });
    expect(spy).toHaveBeenCalledTimes(1);
  });
});

//# sourceMappingURL=Popup.test.js.map