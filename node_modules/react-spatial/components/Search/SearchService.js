var SearchService = function SearchService(ref) {
  var apiKey = ref.apiKey;
  var engines = ref.engines;
  var setSuggestions = ref.setSuggestions;

  this.engines = engines;
  this.setSuggestions = setSuggestions;
  Object.entries(this.engines).forEach(function (ref) {
    var e = ref[1];

    return e.setApiKey(apiKey);
  });
};

SearchService.prototype.countItems = function countItems (section) {
  return this.engines[section].items && this.engines[section].items.length;
};

SearchService.prototype.render = function render (item) {
  return this.engines[item.section].render(item);
};

SearchService.prototype.value = function value (item) {
  return this.engines[item.section].constructor.value(item);
};

SearchService.prototype.search = function search (value) {
    var this$1 = this;

  Object.entries(this.engines).forEach(function (ref, position) {
      var section = ref[0];
      var engine = ref[1];

    engine.search(value).then(function (items) {
      engine.setItems(items);
      this$1.upsert(section, engine.getItems(items), position);
    });
  });
};

SearchService.prototype.sectionCollapsed = function sectionCollapsed (section) {
  return this.engines[section].collapsed;
};

SearchService.prototype.toggleSection = function toggleSection (toggledSection) {
    var this$1 = this;

  Object.entries(this.engines).forEach(function (ref, position) {
      var section = ref[0];
      var engine = ref[1];

    engine.collapse(!(section === toggledSection && engine.collapsed));
    this$1.upsert(section, engine.getItems(), position);
  });
};

SearchService.prototype.upsert = function upsert (section, items, position) {
  this.setSuggestions(function (oldSuggestions) {
    var sectionIndex = oldSuggestions.findIndex(
      function (s) { return s.section === section; }
    );
    var start = sectionIndex === -1 ? position : sectionIndex;
    var deleteCount = sectionIndex === -1 ? 0 : 1;
    var newSuggestions = [].concat( oldSuggestions );
    newSuggestions.splice(start, deleteCount, { section: section, items: items });
    return newSuggestions;
  });
};

export default SearchService;

//# sourceMappingURL=SearchService.js.map