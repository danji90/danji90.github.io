/* eslint-disable jsx-a11y/interactive-supports-focus */
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { FaChevronLeft } from 'react-icons/fa';
import { Layer } from 'mobility-toolbox-js/ol';

import './BaseLayerSwitcher.scss';

var propTypes = {
  /**
   * An array of [mobility-toolbox-js layers](https://mobility-toolbox-js.geops.io/api/identifiers%20html#ol-layers).
   */
  layers: PropTypes.arrayOf(PropTypes.instanceOf(Layer)).isRequired,

  /**
   * Object containing relative paths to the base layer images. Object
   * keys need to correspond to layer keys
   */
  layerImages: PropTypes.objectOf(PropTypes.string),

  /**
   * CSS class to apply on the container.
   */
  className: PropTypes.string,

  /**
   * Alternative text rendered if layer images can't be loaded
   */
  altText: PropTypes.string,

  /**
   * Button titles.
   */
  titles: PropTypes.shape({
    button: PropTypes.string,
    openSwitcher: PropTypes.string,
    closeSwitcher: PropTypes.string,
  }),

  /**
   * Image (node) rendered in the switcher close button.
   */
  closeButtonImage: PropTypes.node,

  /**
   * Translation function.
   * @param {function} Translation function returning the translated string.
   */
  t: PropTypes.func,
};

var defaultProps = {
  className: 'rs-base-layer-switcher',
  altText: 'Source not found',
  titles: {
    button: 'Base layers',
    openSwitcher: 'Open Baselayer-Switcher',
    closeSwitcher: 'Close Baselayer-Switcher',
  },
  closeButtonImage: React.createElement( FaChevronLeft, null ),
  layerImages: undefined,
  t: function (s) { return s; },
};

var getVisibleLayer = function (layers) {
  return layers.find(function (layer) { return layer.visible; });
};

var getNextImage = function (currentLayer, layers, layerImages) {
  var currentIndex = layers.indexOf(
    layers.find(function (layer) { return layer === currentLayer; })
  );
  var nextIndex = currentIndex + 1 === layers.length ? 0 : currentIndex + 1;
  return layerImages[nextIndex];
};

var getImageStyle = function (url) {
  return url
    ? {
        backgroundImage: ("url(" + url + ")"),
        backgroundSize: 'cover',
        backgroundRepeat: 'no-repeat',
        backgroundPosition: 'center',
      }
    : null;
};

/**
 * The BaseLayerSwitcher component renders a button interface for switching the visible
 * [mobility-toolbox-js layer](https://mobility-toolbox-js.geops.io/api/identifiers%20html#ol-layers)
 * when defined as base layer.
 */

function BaseLayerSwitcher(ref) {
  var layers = ref.layers;
  var layerImages = ref.layerImages;
  var className = ref.className;
  var altText = ref.altText;
  var titles = ref.titles;
  var closeButtonImage = ref.closeButtonImage;
  var t = ref.t;

  var baseLayers = layers.filter(function (layer) { return layer.isBaseLayer; });
  var ref$1 = useState(false);
  var switcherOpen = ref$1[0];
  var setSwitcherOpen = ref$1[1];
  var ref$2 = useState(true);
  var isClosed = ref$2[0];
  var setIsClosed = ref$2[1];
  var ref$3 = useState(
    getVisibleLayer(baseLayers) || baseLayers[0]
  );
  var currentLayer = ref$3[0];
  var setCurrentLayer = ref$3[1];

  /* Images are loaded from props if provided, fallback from layer */
  var images = layerImages
    ? Object.keys(layerImages).map(function (layerImage) { return layerImages[layerImage]; })
    : baseLayers.map(function (layer) { return layer.get('previewImage'); });

  var openClass = switcherOpen ? ' rs-open' : '';
  var hiddenStyle = switcherOpen && !isClosed ? 'visible' : 'hidden';

  var handleSwitcherClick = function () {
    if (baseLayers.length === 2) {
      /* On only two layer options the opener becomes a layer toggle button */
      var nextLayer = baseLayers.find(function (layer) { return !layer.visible; });
      currentLayer.setVisible(false);
      setCurrentLayer(nextLayer);
      nextLayer.setVisible(true);
      return;
    }
    // eslint-disable-next-line consistent-return
    return setSwitcherOpen(true) && setIsClosed(false);
  };

  var onLayerSelect = function (layer) {
    if (!switcherOpen) {
      setSwitcherOpen(true);
      return;
    }
    setCurrentLayer(layer);
    layer.setVisible(true);
    baseLayers.filter(function (l) { return l !== layer; }).forEach(function (l) { return l.setVisible(false); });
    setSwitcherOpen(false);
  };

  /* Get next image for closed button */
  var nextImage = getNextImage(currentLayer, baseLayers, images);

  useEffect(function () {
    /* Ensure correct layer is active on app load */
    if (currentLayer !== getVisibleLayer(baseLayers)) {
      setCurrentLayer(getVisibleLayer(baseLayers) || baseLayers[0]);
    }
  }, [currentLayer, baseLayers]);

  useEffect(function () {
    /* Used for correct layer image render with animation */
    var timeout;
    if (!switcherOpen) {
      timeout = setTimeout(function () {
        setIsClosed(true);
      }, 200);
    } else {
      timeout = setTimeout(function () {
        setIsClosed(false);
      }, 800);
    }
    return function () { return clearTimeout(timeout); };
  }, [switcherOpen]);

  if (!baseLayers || baseLayers.length < 2 || !currentLayer) {
    return null;
  }

  var toggleBtn = (
    React.createElement( 'div', { className: "rs-base-layer-switcher-btn-wrapper" },
      React.createElement( 'div', {
        className: "rs-base-layer-switcher-close-btn", role: "button", onClick: function () { return setSwitcherOpen(false); }, onKeyPress: function (e) { return e.which === 13 && setSwitcherOpen(false); }, tabIndex: switcherOpen ? '0' : '-1', 'aria-label': titles.closeSwitcher, title: titles.closeSwitcher },
        closeButtonImage
      )
    )
  );

  return (
    React.createElement( 'div', { className: ("" + className + openClass) },
      React.createElement( 'div', {
          className: ("rs-base-layer-switcher-button rs-opener" + openClass), role: "button", title: titles.openSwitcher, 'aria-label': titles.openSwitcher, onClick: handleSwitcherClick, onKeyPress: function (e) {
            if (e.which === 13) {
              handleSwitcherClick();
            }
          }, style: getImageStyle(nextImage), tabIndex: "0" },
          React.createElement( 'div', { className: "rs-base-layer-switcher-title" },
            baseLayers.length !== 2
              ? titles.button
              : baseLayers.find(function (layer) { return !layer.visible; }) &&
                t(baseLayers.find(function (layer) { return !layer.visible; }).name)
          ),
          nextImage ? null : React.createElement( 'span', { className: "rs-alt-text" }, t(altText))
        ),
      baseLayers.map(function (layer, idx) {
        var layerName = layer.name;
        var activeClass = layerName === currentLayer.name ? ' rs-active' : '';
        var imageStyle = getImageStyle(
          layerImages ? layerImages[("" + (layer.key))] : layer.get('previewImage')
        );
        return (
          React.createElement( 'div', {
            key: layer.key, className: "rs-base-layer-switcher-btn-wrapper", style: {
              overflow: hiddenStyle,
              zIndex: baseLayers.length - idx,
            } },
            React.createElement( 'div', {
              className: ("rs-base-layer-switcher-button" + openClass), role: "button", title: t(layerName), 'aria-label': t(layerName), onClick: function () { return onLayerSelect(layer); }, onKeyPress: function (e) {
                if (e.which === 13) {
                  onLayerSelect(layer);
                }
              }, style: imageStyle, tabIndex: switcherOpen ? '0' : '-1' },
              React.createElement( 'div', { className: ("rs-base-layer-switcher-title" + activeClass) },
                t(layerName)
              ),
              imageStyle ? null : (
                React.createElement( 'span', { className: "rs-alt-text" }, t(altText))
              )
            )
          )
        );
      }),
      toggleBtn
    )
  );
}

BaseLayerSwitcher.propTypes = propTypes;
BaseLayerSwitcher.defaultProps = defaultProps;

export default BaseLayerSwitcher;

//# sourceMappingURL=BaseLayerSwitcher.js.map