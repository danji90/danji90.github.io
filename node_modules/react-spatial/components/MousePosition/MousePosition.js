function objectWithoutProperties (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }
import React, { useState, useRef, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';
import OLMap from 'ol/Map';
import { createStringXY } from 'ol/coordinate';
import OLMousePosition from 'ol/control/MousePosition';

var propTypes = {
  /**
   * An [ol/map](https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html).
   */
  map: PropTypes.instanceOf(OLMap).isRequired,

  /**
   * List of projections to display.
   */
  projections: PropTypes.arrayOf(
    PropTypes.shape({
      /**
       * The label to display in the select box.
       */
      label: PropTypes.string.isRequired,

      /**
       * The value used to create the options´s projection of the MousePosition control.
       * See [doc](https://openlayers.org/en/latest/apidoc/module-ol_control_MousePosition.html).
       */
      value: PropTypes.string.isRequired,

      /**
       * A function following the  [CoordinateFormat](https://openlayers.org/en/latest/apidoc/module-ol_coordinate.html#~CoordinateFormat).
       */
      format: PropTypes.func,
    })
  ),

  /**
   * The initially selected projection
   */
  projectionValue: PropTypes.shape({
    /**
     * The label to display in the select box.
     */
    label: PropTypes.string.isRequired,

    /**
     * The value used to create the options´s projection of the MousePosition control.
     * See [doc](https://openlayers.org/en/latest/apidoc/module-ol_control_MousePosition.html).
     */
    value: PropTypes.string.isRequired,

    /**
     * A function following the  [CoordinateFormat](https://openlayers.org/en/latest/apidoc/module-ol_coordinate.html#~CoordinateFormat).
     */
    format: PropTypes.func,
  }),

  /**
   * Function triggered on projection's change event.
   * @param {Event} event The change event object.
   * @param {Object} projection The selected projection object.
   */
  onChange: PropTypes.func,
};

var defaultProps = {
  onChange: function () {},
  projections: [
    {
      label: 'EPSG:4326',
      value: 'EPSG:4326',
    },
    {
      label: 'EPSG:3857',
      value: 'EPSG:3857',
    } ],
  projectionValue: null,
};

/**
 * The MousePosition component renders a select box with map projection options
 * and the cursor position in coordinates using the selected projection.
 */
function MousePosition(ref$1) {
  var map = ref$1.map;
  var projections = ref$1.projections;
  var projectionValue = ref$1.projectionValue;
  var onChange = ref$1.onChange;
  var rest = objectWithoutProperties( ref$1, ["map", "projections", "projectionValue", "onChange"] );
  var other = rest;

  var ref$2 = useState(
    projections &&
      ((projectionValue &&
        projections.find(function (p) { return p.value === projectionValue.value; })) ||
        projections[0])
  );
  var projection = ref$2[0];
  var setProjection = ref$2[1];
  var ref$3 = useState();
  var control = ref$3[0];
  var setControl = ref$3[1];
  var ref = useRef();

  useEffect(function () {
    var mousePosition = new OLMousePosition({
      target: ref.current,
      undefinedHTML: '&nbsp;',
      className: '',
    });
    map.addControl(mousePosition);
    setControl(mousePosition);

    return function () {
      map.removeControl(mousePosition);
    };
  }, []);

  useEffect(function () {
    if (!projection || !control) {
      return;
    }
    control.setProjection(projection.value);
    control.setCoordinateFormat(projection.format || createStringXY(4));
  }, [projection, control]);

  useEffect(function () {
    if (projections) {
      var proj =
        (projectionValue &&
          projections.find(function (p) { return p.value === projectionValue.value; })) ||
        projections[0];
      setProjection(proj);
    }
  }, [projectionValue]);

  var onChangeCb = useCallback(
    function (evt) {
      var newProj = projections.find(function (opt) { return evt.target.value === opt.value; });
      setProjection(newProj);
      onChange(evt, newProj);
    },
    [projections]
  );

  if (!projection || !projections || !projections.length) {
    return null;
  }

  return (
    // eslint-disable-next-line react/jsx-props-no-spreading
    React.createElement( 'div', Object.assign({}, { className: "rs-mouse-position" }, other),
      React.createElement( 'select', {
        className: "rs-select", value: projection.value, onChange: onChangeCb },
        projections.map(function (option) { return (
          React.createElement( 'option', { key: option.value, value: option.value },
            option.label
          )
        ); })
      ),
      React.createElement( 'span', { ref: ref, className: "rs-coordinates" })
    )
  );
}

MousePosition.propTypes = propTypes;
MousePosition.defaultProps = defaultProps;

export default React.memo(MousePosition);

//# sourceMappingURL=MousePosition.js.map