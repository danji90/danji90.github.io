import 'jest-canvas-mock';
import React from 'react';
import renderer from 'react-test-renderer';
import { act } from 'react-dom/test-utils';
import { configure, mount } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
import MapEvent from 'ol/MapEvent';
import OLMap from 'ol/Map';
import OLView from 'ol/View';
import { TiImage } from 'react-icons/ti';
import NorthArrow from './NorthArrow';

configure({ adapter: new Adapter() });
var olView;
var olMap;

describe('NorthArrow', function () {
  beforeEach(function () {
    olView = new OLView();
    olMap = new OLMap({ view: olView });
  });

  test('should match snapshot with default value.', function () {
    var component;
    renderer.act(function () {
      component = renderer.create(React.createElement( NorthArrow, { map: olMap }));
    });
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  test('should match snapshot with custom attributes.', function () {
    var component;
    renderer.act(function () {
      component = renderer.create(
        React.createElement( NorthArrow, { map: olMap, className: "test-class", tabIndex: 0 })
      );
    });
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  test('should match snapshot with children.', function () {
    var component;
    renderer.act(function () {
      component = renderer.create(
        React.createElement( NorthArrow, { map: olMap },
          React.createElement( TiImage, null )
        )
      );
    });
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  test('should match snapshot rotated.', function () {
    var component;
    renderer.act(function () {
      component = renderer.create(
        React.createElement( NorthArrow, { map: olMap, rotationOffset: 45 })
      );
    });
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  test('should match snapshot with circle.', function () {
    var component;
    renderer.act(function () {
      component = renderer.create(React.createElement( NorthArrow, { circled: true, map: olMap }));
    });
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  test('should react on view rotation (transform: `rotate(20deg)`)', function () {
    var wrapper = mount(React.createElement( NorthArrow, { map: olMap }));
    // Trigger view rotation
    olMap.getView().setRotation(0.3490658503988659);
    act(function () {
      olMap.dispatchEvent(new MapEvent('postrender', olMap));
      // 20 degrees = 0.3490658503988659 radians
    });
    expect(wrapper.html()).toMatchSnapshot();
  });

  test('should react on view rotation with offset (transform: `rotate(10deg)`)', function () {
    var wrapper = mount(React.createElement( NorthArrow, { map: olMap, rotationOffset: -10 }));
    olMap.getView().setRotation(0.3490658503988659);
    act(function () {
      olMap.dispatchEvent(new MapEvent('postrender', olMap));
    });
    expect(wrapper.html()).toMatchSnapshot();
  });

  test('should remove post render event on unmount', function () {
    var wrapper = mount(React.createElement( NorthArrow, { map: olMap, rotationOffset: -10 }));
    // eslint-disable-next-line no-underscore-dangle
    expect(olMap.listeners_.postrender.length).toBe(4);
    wrapper.unmount();
    // eslint-disable-next-line no-underscore-dangle
    expect(olMap.listeners_.postrender.length).toBe(3);
  });
});

//# sourceMappingURL=NorthArrow.test.js.map