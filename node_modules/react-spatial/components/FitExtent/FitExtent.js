function objectWithoutProperties (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }
import React, { useCallback } from 'react';
import PropTypes from 'prop-types';
import OLMap from 'ol/Map';

var propTypes = {
  /**
   * An [ol/map](https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html).
   */
  map: PropTypes.instanceOf(OLMap).isRequired,

  /**
   * The extent to be zoomed.
   */
  extent: PropTypes.arrayOf(PropTypes.number).isRequired,

  /**
   * CSS class  for the fitExtent button.
   */
  className: PropTypes.string,

  /**
   * Button content.
   */
  children: PropTypes.node.isRequired,
};

var defaultProps = {
  className: 'rs-fit-extent',
};

/**
 * The FitExtent component creates a button that updates the current extent of
 * an [ol/map](https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html).
 */
function FitExtent(ref) {
  var map = ref.map;
  var extent = ref.extent;
  var className = ref.className;
  var children = ref.children;
  var rest = objectWithoutProperties( ref, ["map", "extent", "className", "children"] );
  var other = rest;

  var fit = useCallback(function (evt) {
    if (evt.which && evt.which !== 13) {
      return;
    }
    map.getView().cancelAnimations();
    map.getView().fit(extent, map.getSize());
  });

  return (
    React.createElement( 'div', Object.assign({},
      { className: className, role: "button", tabIndex: "0", onClick: fit, onKeyPress: fit }, other),
      children
    )
  );
}

FitExtent.propTypes = propTypes;
FitExtent.defaultProps = defaultProps;

export default FitExtent;

//# sourceMappingURL=FitExtent.js.map