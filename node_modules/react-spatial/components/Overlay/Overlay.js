import React, { Component, useState } from 'react';
import PropTypes from 'prop-types';
import { Resizable } from 're-resizable';
import ResizeHandler from '../ResizeHandler';

var propTypes = {
  /**
   * CSS class added to container.
   */
  className: PropTypes.string,

  /**
   * Children content of the overlay.
   */
  children: PropTypes.node,

  /**
   * Observed element to define screen size.
   */
  observe: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.instanceOf(Element),
    PropTypes.instanceOf(Component),
    PropTypes.shape({ current: PropTypes.instanceOf(Element) }),
    PropTypes.shape({ current: PropTypes.instanceOf(Component) }) ]),

  /**
   * Deactivate the ability to resize the overlay on mobile.
   * /!\ This prop is only used if isMobile (observer width < 768px).
   */
  isMobileResizable: PropTypes.bool,

  /**
   * Size parameters to the Resizable component on mobile.
   * Pass following prop to re-resizable component: 'size', 'defaultSize', 'minHeight' & 'maxHeight'
   * (https://github.com/bokuweb/re-resizable)
   * /!\ This prop is only used if isMobile (observer width < 768px).
   */
  mobileSize: PropTypes.shape({
    minimalHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    maximalHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    defaultSize: PropTypes.shape({
      height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    }),
    size: PropTypes.shape({
      height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    }),
  }),

  /**
   * Minimal width to consider the observed as mobile.
   * Default is 768px.
   */
  thresholdWidthForMobile: PropTypes.number,

  /**
   * Callback when stop resizing
   * Pass following prop to re-resizable component
   * (https://github.com/bokuweb/re-resizable)
   */
  onResizeStop: PropTypes.func,

  /**
   * Callback when start resizing
   * Pass following prop to re-resizable component
   * (https://github.com/bokuweb/re-resizable)
   */
  onResizeStart: PropTypes.func,
};

var defaultMobileSize = {
  defaultSize: {
    width: '100%',
    height: '25%',
  },
  size: undefined,
  maximalHeight: '100%',
  minimalHeight: '25%',
};

var defaultProps = {
  className: null,
  children: null,
  observe: null,
  isMobileResizable: true,
  mobileSize: defaultMobileSize,
  thresholdWidthForMobile: 768,
  onResizeStop: function () {},
  onResizeStart: function () {},
};

/**
 * The Overlay component creates a resizable, swipable overlay <div\>
 */
var Overlay = function (ref) {
  var observe = ref.observe;
  var className = ref.className;
  var children = ref.children;
  var isMobileResizable = ref.isMobileResizable;
  var mobileSize = ref.mobileSize;
  var onResizeStop = ref.onResizeStop;
  var onResizeStart = ref.onResizeStart;
  var thresholdWidthForMobile = ref.thresholdWidthForMobile;

  var ref$1 = useState();
  var isMobile = ref$1[0];
  var setIsMobile = ref$1[1];

  var onResize = function (entries) {
    for (var i = 0; i < entries.length; i += 1) {
      var ref = entries[i].contentRect;
      var width = ref.width;
      setIsMobile(width <= thresholdWidthForMobile);
    }
  };

  var resizableMobileSize;
  if (mobileSize) {
    resizableMobileSize = Object.assign({}, defaultMobileSize, mobileSize);
  }

  return (
    React.createElement( React.Fragment, null,
      observe ? React.createElement( ResizeHandler, { observe: observe, onResize: onResize }) : null,
      isMobile ? (
        React.createElement( Resizable, {
          style: {
            position: 'absolute',
          }, enable: {
            top: isMobileResizable,
            right: false,
            bottom: false,
            left: false,
            topRight: false,
            bottomRight: false,
            bottomLeft: false,
            topLeft: false,
          }, maxHeight: mobileSize && resizableMobileSize.maximalHeight, minHeight: mobileSize && resizableMobileSize.minimalHeight, handleComponent: {
            top: React.createElement( 'div', { className: "tm-overlay-handler" }, "â€”"),
          }, onResizeStart: onResizeStart, onResizeStop: onResizeStop, handleStyles: {
            top: {
              top: '-20px',
              height: '20px',
              padding: '20px 0',
              width: '100%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
            },
          }, size: resizableMobileSize.size, defaultSize: mobileSize && resizableMobileSize.defaultSize, className: ("tm-overlay-mobile" + (className ? (" " + className) : '')) },
          React.createElement( 'div', { className: "tm-overlay-mobile-content" }, children)
        )
      ) : (
        React.createElement( 'div', { className: ("tm-overlay" + (className ? (" " + className) : '')) },
          children
        )
      )
    )
  );
};

Overlay.propTypes = propTypes;
Overlay.defaultProps = defaultProps;

export default Overlay;

//# sourceMappingURL=Overlay.js.map