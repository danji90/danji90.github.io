import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { act } from 'react-dom/test-utils';
import { configure, mount } from 'enzyme';
import renderer from 'react-test-renderer';
import Adapter from 'enzyme-adapter-react-16';
import ResizeObserver from 'resize-observer-polyfill';
import { Resizable } from 're-resizable';
import Overlay from './Overlay';

jest.mock('resize-observer-polyfill');

configure({ adapter: new Adapter() });

var propTypes = {
  isMobileResizable: PropTypes.bool,
  thresholdWidthForMobile: PropTypes.number,
};

var defaultProps = {
  isMobileResizable: undefined,
  thresholdWidthForMobile: undefined,
};

var BasicComponent = function (ref$1) {
  var thresholdWidthForMobile = ref$1.thresholdWidthForMobile;
  var isMobileResizable = ref$1.isMobileResizable;

  var ref$2 = useState(null);
  var ref = ref$2[0];
  var setRef = ref$2[1];

  return (
    React.createElement( React.Fragment, null,
      React.createElement( 'div', {
        ref: function (node) {
          if (node !== ref) {
            setRef(node);
          }
        }, className: "observer" }),
      React.createElement( Overlay, {
        observe: ref, thresholdWidthForMobile: thresholdWidthForMobile, isMobileResizable: isMobileResizable }, "Test content")
    )
  );
};
BasicComponent.propTypes = propTypes;
BasicComponent.defaultProps = defaultProps;

describe('Overlay', function () {
  test('should match snapshot.', function () {
    var component = renderer.create(React.createElement( Overlay, null, "Test content" ));
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  test('should react on observe resize.', function () {
    var wrapper = mount(React.createElement( BasicComponent, null ));
    var target = wrapper.find('.observer').getDOMNode();

    act(function () {
      // The mock class set the onResize property, we just have to run it to
      // simulate a resize
      ResizeObserver.onResize([
        {
          target: target,
          contentRect: {
            width: 200,
            height: 200,
          },
        } ]);
    });
    wrapper.update();

    expect(wrapper.find('.tm-overlay').length > 0).toBe(false);
    expect(wrapper.find('.tm-overlay-mobile').length > 0).toBe(true);
  });

  test('should force mobile overlay display on big screen.', function () {
    var wrapper = mount(
      React.createElement( BasicComponent, { thresholdWidthForMobile: Infinity })
    );
    var target = wrapper.find('.observer').getDOMNode();

    act(function () {
      ResizeObserver.onResize([
        {
          target: target,
          contentRect: {
            width: 1200,
            height: 200,
          },
        } ]);
    });
    wrapper.update();

    expect(wrapper.find('.tm-overlay').length > 0).toBe(false);
    expect(wrapper.find('.tm-overlay-mobile').length > 0).toBe(true);
  });

  test('should allow resizing with top handler on mobile.', function () {
    var wrapper = mount(React.createElement( BasicComponent, null ));
    var target = wrapper.find('.observer').getDOMNode();

    // Force resize to make it mobile.
    act(function () {
      ResizeObserver.onResize([
        {
          target: target,
          contentRect: {
            width: 200,
            height: 200,
          },
        } ]);
    });
    wrapper.update();

    var resizableProps = wrapper.find(Resizable).props();

    expect(resizableProps.enable.top).toBe(true);
  });

  test('should not allow resizing with top handler on mobile.', function () {
    var wrapper = mount(React.createElement( BasicComponent, { isMobileResizable: false }));
    var target = wrapper.find('.observer').getDOMNode();

    // Force resize to make it mobile.
    act(function () {
      ResizeObserver.onResize([
        {
          target: target,
          contentRect: {
            width: 200,
            height: 200,
          },
        } ]);
    });
    wrapper.update();

    var resizableProps = wrapper.find(Resizable).props();

    expect(resizableProps.enable.top).toBe(false);
  });
});

//# sourceMappingURL=Overlay.test.js.map