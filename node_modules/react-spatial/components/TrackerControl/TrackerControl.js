import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { IoIosSpeedometer } from 'react-icons/io';
import { FaPlay, FaForward, FaBackward, FaRegDotCircle } from 'react-icons/fa';
import { TrackerLayer } from 'mobility-toolbox-js/ol';

var increaseSpeed = function (speed) {
  var delta = 0.1;
  if (speed >= 1) {
    delta = 1;
  }
  if (speed >= 10) {
    delta = 5;
  }
  var nextSpeed = speed + delta;
  return nextSpeed > 30 ? speed : nextSpeed;
};

var decreaseSpeed = function (speed) {
  var delta = 0.1;
  if (speed > 1) {
    delta = 1;
  }
  if (speed > 10) {
    delta = 5;
  }
  var nextSpeed = speed - delta;
  if (nextSpeed < 0.1) {
    return speed;
  }
  return nextSpeed;
};

var defaultRenderButton = function (icon, onClick, title) {
  return (
    React.createElement( 'div', {
      'aria-label': title, role: "button", onClick: onClick, onKeyPress: onClick, className: "rt-control-button", tabIndex: 0, title: title },
      icon
    )
  );
};

/**
 * TrackerControl allows the user to control the speed of a
 * [mobility-toolbox-js tracker layer](https://mobility-toolbox-js.geops.io/api/class/src/mapbox/layers/TrajservLayer%20js~TrajservLayer%20html-offset-anchor).
 */
function TrackerControl(ref) {
  var className = ref.className;
  var iconDateReset = ref.iconDateReset;
  var iconSpeedDown = ref.iconSpeedDown;
  var iconSpeedReset = ref.iconSpeedReset;
  var iconSpeedUp = ref.iconSpeedUp;
  var iconSpeed = ref.iconSpeed;
  var renderButton = ref.renderButton;
  var trackerLayer = ref.trackerLayer;

  var ref$1 = useState(1);
  var speed = ref$1[0];
  var setSpeed = ref$1[1];

  var onSpeedChange = function (newSpeed) {
    // eslint-disable-next-line no-param-reassign
    trackerLayer.speed = newSpeed;
  };

  var resetDate = function () {
    trackerLayer.setCurrTime(new Date());
  };

  useEffect(function () {
    onSpeedChange(speed);
  }, [speed, onSpeedChange]);

  return (
    React.createElement( 'div', { className: className },
      renderButton(iconDateReset, function () { return resetDate(); }, 'reset date'),
      renderButton(
        iconSpeedDown,
        function () { return setSpeed(decreaseSpeed(speed)); },
        'speed down'
      ),
      renderButton(iconSpeedReset, function () { return setSpeed(1); }, 'speed reset'),
      renderButton(
        iconSpeedUp,
        function () { return setSpeed(increaseSpeed(speed)); },
        'speed up'
      ),
      React.createElement( 'div', { className: "rt-tracker-speed" },
        iconSpeed,
        ("" + (speed < 1 ? speed.toFixed(1) : speed))
      )
    )
  );
}

TrackerControl.propTypes = {
  /**
   * CSS class of the tracker control.
   */
  className: PropTypes.string,

  /**
   * Icon of the date reset button.
   */
  iconDateReset: PropTypes.element,

  /**
   * Icon of the speed down button.
   */
  iconSpeedDown: PropTypes.element,

  /**
   * Icon of the speed up button.
   */
  iconSpeedUp: PropTypes.element,

  /**
   * Icon of the speed reset button.
   */
  iconSpeedReset: PropTypes.element,

  /**
   * Icon speed.
   */
  iconSpeed: PropTypes.element,

  /**
   * Render function for buttons.
   */
  renderButton: PropTypes.func,

  /**
   * Trackerlayer.
   */
  trackerLayer: PropTypes.instanceOf(TrackerLayer).isRequired,
};

TrackerControl.defaultProps = {
  className: 'rt-tracker-control',
  iconDateReset: React.createElement( FaRegDotCircle, null ),
  iconSpeedDown: React.createElement( FaBackward, null ),
  iconSpeedReset: React.createElement( FaPlay, null ),
  iconSpeedUp: React.createElement( FaForward, null ),
  iconSpeed: React.createElement( IoIosSpeedometer, null ),
  renderButton: defaultRenderButton,
};

export default TrackerControl;

//# sourceMappingURL=TrackerControl.js.map