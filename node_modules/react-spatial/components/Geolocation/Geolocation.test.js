import React from 'react';
import renderer from 'react-test-renderer';
import { configure, mount, shallow } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

import 'jest-canvas-mock';
import Map from 'ol/Map';
import View from 'ol/View';
import MapEvent from 'ol/MapEvent';
import Geolocation from './Geolocation';

configure({ adapter: new Adapter() });

var geolocationBackup = global.navigator.geolocation;

var mockGeolocation = function () {
  var mock = {
    clearWatch: jest.fn(),
    getCurrentPosition: jest.fn(),
    watchPosition: function (onSuccess) {
      onSuccess({
        coords: {
          latitude: 47.9913611,
          longitude: 7.84868,
          accuracy: 55,
        },
        timestamp: 1552660077044,
      });
    },
  };

  global.navigator.geolocation = mock;
};

var mockMissingGeolocation = function () {
  delete global.navigator.geolocation;
};

var restoreGeolocation = function () {
  global.navigator.geolocation = geolocationBackup;
};

describe('Geolocation', function () {
  var map;

  beforeEach(function () {
    var target = document.createElement('div');
    var style = target.style;
    style.position = 'absolute';
    style.left = '-1000px';
    style.top = '-1000px';
    style.width = '100px';
    style.height = '100px';
    document.body.appendChild(target);

    map = new Map({
      target: target,
      view: new View({
        center: [0, 0],
        resolutions: [1],
        zoom: 0,
      }),
    });
    map.renderSync();
  });

  afterEach(function () {
    var target = map.getTarget();
    map.setTarget(null);
    if (target && target.parentNode) {
      target.parentNode.removeChild(target);
    }
    map.dispose();
  });

  describe('should match snapshot', function () {
    test('minimum props', function () {
      var component = renderer.create(React.createElement( Geolocation, { map: map }));
      var tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });

    test('with title', function () {
      var component = renderer.create(
        React.createElement( Geolocation, { map: map, title: "Lokalisieren" })
      );
      var tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });

    test('with class name', function () {
      var component = renderer.create(
        React.createElement( Geolocation, { map: map, className: "my-class-name" })
      );
      var tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });
  });

  test('should use children', function () {
    mockGeolocation();

    var wrapper = mount(React.createElement( Geolocation, { map: map }, "test"));

    var text = wrapper.find('.rs-geolocation').first().text();

    expect(text).toBe('test');

    restoreGeolocation();
  });

  describe('button classes', function () {
    test('class should be active', function () {
      mockGeolocation();

      var wrapper = mount(React.createElement( Geolocation, { map: map }));
      var basic = wrapper.getDOMNode();

      wrapper.find('.rs-geolocation').first().simulate('click');

      expect(basic.className).toBe('rs-geolocation rs-active');

      restoreGeolocation();
    });

    test('class should not be active', function () {
      mockGeolocation();

      var wrapper = mount(React.createElement( Geolocation, { map: map }));
      var basic = wrapper.getDOMNode();

      wrapper
        .find('.rs-geolocation')
        .first()
        .simulate('click')
        .simulate('click');

      expect(basic.className).toBe('rs-geolocation ');

      restoreGeolocation();
    });
  });

  test("highlight on first toggle", function () {
    mockGeolocation();

    var component = shallow(React.createElement( Geolocation, { map: map }));
    var instance = component.instance();
    var spy = jest.spyOn(instance, 'highlight');
    instance.toggle();
    expect(spy).toHaveBeenCalled();

    restoreGeolocation();
  });

  test("error function should be called", function () {
    mockMissingGeolocation();

    var ErrorHandler = function ErrorHandler () {};

    ErrorHandler.onError = function onError () {};

    var spy = jest.spyOn(ErrorHandler, 'onError');

    var wrapper = mount(
      React.createElement( Geolocation, { map: map, onError: function () { return ErrorHandler.onError(); } })
    );

    wrapper.find('.rs-geolocation').first().simulate('click');

    expect(spy).toHaveBeenCalled();

    restoreGeolocation();
  });

  describe('map centering', function () {
    test('centers map', function () {
      mockGeolocation();

      var center1 = [742952.8821531708, 6330118.608483334];
      map.getView().setCenter(center1);

      var component = shallow(React.createElement( Geolocation, { map: map }));
      component.instance().toggle();

      var center2 = map.getView().getCenter();
      expect(center1).not.toEqual(center2);

      restoreGeolocation();
    });

    test('no center after drag', function () {
      mockGeolocation();

      var center1 = [742952.8821531708, 6330118.608483334];
      map.getView().setCenter(center1);

      var component = shallow(React.createElement( Geolocation, { map: map, noCenterAfterDrag: true }));
      map.dispatchEvent(new MapEvent('pointerdrag', map));
      component.instance().toggle();

      var center2 = map.getView().getCenter();
      expect(center1).toEqual(center2);

      restoreGeolocation();
    });
  });

  test('custom style function', function () {
    mockGeolocation();

    var styleFunc = jest.fn();

    var component = shallow(
      React.createElement( Geolocation, { map: map, colorOrStyleFunc: styleFunc })
    );
    var instance = component.instance();
    instance.toggle();
    var style = instance.layer.getSource().getFeatures()[0].getStyle();

    expect(style).toBe(styleFunc);

    restoreGeolocation();
  });
});

//# sourceMappingURL=Geolocation.test.js.map