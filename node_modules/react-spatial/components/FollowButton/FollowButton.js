import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { TrackerLayer } from 'mobility-toolbox-js/ol';

var propTypes = {
  /**
   * CSS class of the follow button.
   */
  className: PropTypes.string,

  /**
   * Title.
   */
  title: PropTypes.string,

  /**
   * Line info route identifer.
   */
  routeIdentifier: PropTypes.string.isRequired,

  /**
   * Button is active.
   */
  active: PropTypes.bool.isRequired,

  /**
   * Function triggered on button click.
   */
  onClick: PropTypes.func.isRequired,

  /**
   * Trackerlayer.
   */
  trackerLayer: PropTypes.instanceOf(TrackerLayer).isRequired,

  /**
   * Function to set the map center, Used to follow a train.
   */
  setCenter: PropTypes.func.isRequired,

  /**
   * Children content of the button.
   */
  children: PropTypes.element.isRequired,
};

var defaultProps = {
  className: 'rt-route-follow',
  title: 'Follow',
};

/**
 * Button enables the follow of a selected train.
 */
var FollowButton = /*@__PURE__*/(function (PureComponent) {
  function FollowButton() {
    PureComponent.call(this);
    this.onClick = this.onClick.bind(this);
  }

  if ( PureComponent ) FollowButton.__proto__ = PureComponent;
  FollowButton.prototype = Object.create( PureComponent && PureComponent.prototype );
  FollowButton.prototype.constructor = FollowButton;

  FollowButton.prototype.componentDidUpdate = function componentDidUpdate (prevProps) {
    var this$1 = this;

    var ref = this.props;
    var routeIdentifier = ref.routeIdentifier;
    var active = ref.active;
    var trackerLayer = ref.trackerLayer;
    var onClick = ref.onClick;

    if (routeIdentifier !== prevProps.routeIdentifier) {
      onClick(false);
    }

    if (active !== prevProps.active) {
      if (active && trackerLayer) {
        this.centerOnTrajectory(routeIdentifier);
        this.updateInterval = window.setInterval(function () {
          this$1.centerOnTrajectory(routeIdentifier);
        }, 50);
      } else {
        clearInterval(this.updateInterval);
      }
    }
  };

  FollowButton.prototype.componentWillUnmount = function componentWillUnmount () {
    clearInterval(this.updateInterval);
  };

  FollowButton.prototype.onClick = function onClick () {
    var ref = this.props;
    var active = ref.active;
    var onClick = ref.onClick;
    onClick(!active);
  };

  FollowButton.prototype.centerOnTrajectory = function centerOnTrajectory (routeIdentifier) {
    var ref = this.props;
    var trackerLayer = ref.trackerLayer;
    var setCenter = ref.setCenter;

    var ref$1 = trackerLayer.getVehicle(
      function (r) { return r.routeIdentifier === routeIdentifier; }
    );
    var trajectory = ref$1[0];
    var firstCoord = trajectory && trajectory.coordinate;
    if (firstCoord) {
      setCenter(firstCoord);
    }
  };

  FollowButton.prototype.render = function render () {
    var this$1 = this;

    var ref = this.props;
    var className = ref.className;
    var title = ref.title;
    var active = ref.active;
    var children = ref.children;

    return (
      React.createElement( 'div', {
        'aria-label': title, className: ("" + className + (active ? ' rt-active' : '')), title: title, onClick: this.onClick, onKeyPress: function (e) { return e.which === 13 && this$1.onClick; }, role: "button", tabIndex: 0 },
        children
      )
    );
  };

  return FollowButton;
}(PureComponent));

FollowButton.propTypes = propTypes;
FollowButton.defaultProps = defaultProps;

export default FollowButton;

//# sourceMappingURL=FollowButton.js.map