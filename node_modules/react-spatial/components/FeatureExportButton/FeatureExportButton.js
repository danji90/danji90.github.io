function objectWithoutProperties (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import KMLFormat from 'ol/format/KML';
import { Layer } from 'mobility-toolbox-js/ol';
import KML from '../../utils/KML';

var propTypes = {
  /**
   *  Children content of the Feature export button.
   */
  children: PropTypes.node,

  /**
   * Format to export features (function).
   * Supported formats: https://openlayers.org/en/latest/apidoc/module-ol_format_Feature-FeatureFormat.html
   */
  format: PropTypes.func,

  /**
   * An existing [mobility-toolbox-js Layer](https://mobility-toolbox-js.geops.io/api/identifiers%20html#ol-layers),
   * using a valid [ol/source/Vector](https://openlayers.org/en/latest/apidoc/module-ol_source_Vector.html)
   */
  layer: PropTypes.instanceOf(Layer).isRequired,

  /**
   * Map projection.
   */
  projection: PropTypes.string,
};

var defaultProps = {
  children: null,
  format: KMLFormat,
  projection: 'EPSG:3857',
};

/**
 * The FeatureExportButton component creates a button that exports feature geometries
 * from a [[mobility-toolbox-js Layer](https://mobility-toolbox-js.geops.io/api/identifiers%20html#ol-layers)]
 * containing an [ol/layer/Vector](https://openlayers.org/en/latest/apidoc/module-ol_layer_Vector-VectorLayer.html)
 * with a [ol/source/Vector](https://openlayers.org/en/latest/apidoc/module-ol_source_Vector.html) on click.<br>
 * The default export format is KML, which supports the features' style export.<br>
 * Other formats do not always support style export (See specific format specs).
 */
var FeatureExportButton = /*@__PURE__*/(function (PureComponent) {
  function FeatureExportButton () {
    PureComponent.apply(this, arguments);
  }

  if ( PureComponent ) FeatureExportButton.__proto__ = PureComponent;
  FeatureExportButton.prototype = Object.create( PureComponent && PureComponent.prototype );
  FeatureExportButton.prototype.constructor = FeatureExportButton;

  FeatureExportButton.createFeatureString = function createFeatureString (layer, projection, format) {
    if (format === KMLFormat) {
      return KML.writeFeatures(layer, projection);
    }

    // eslint-disable-next-line new-cap
    return new format().writeFeatures(layer.olLayer.getSource().getFeatures(), {
      featureProjection: projection,
    });
  };

  FeatureExportButton.exportFeatures = function exportFeatures (layer, projection, format) {
    var now = new Date()
      .toJSON()
      .slice(0, 20)
      .replace(/[.:T-]+/g, '');
    var featString = this.createFeatureString(layer, projection, format);

    var formatString = featString
      ? featString.match(/<(\w+)\s+\w+.*?>/)[1]
      : 'xml';

    var fileName = "exported_features_" + now + "." + formatString;
    var charset = document.characterSet || 'UTF-8';
    var type = (formatString === 'kml'
        ? 'data:application/vnd.google-earth.kml+xml'
        : 'data:text/xml') + ";charset=" + charset;

    if (featString) {
      if (window.navigator.msSaveBlob) {
        // ie 11 and higher
        window.navigator.msSaveBlob(new Blob([featString], { type: type }), fileName);
      } else {
        var link = document.createElement('a');
        link.download = fileName;
        link.href = type + "," + (encodeURIComponent(featString));
        link.click();
      }
    }
  };

  FeatureExportButton.prototype.render = function render () {
    var ref = this.props;
    var children = ref.children;
    var layer = ref.layer;
    var projection = ref.projection;
    var format = ref.format;
    var rest = objectWithoutProperties( ref, ["children", "layer", "projection", "format"] );
    var other = rest;

    return (
      React.createElement( 'div', Object.assign({},
        { role: "button", className: "rs-feature-export-button", tabIndex: 0 }, other, { onClick: function () { return FeatureExportButton.exportFeatures(layer, projection, format); }, onKeyPress: function (evt) { return evt.which === 13 &&
          FeatureExportButton.exportFeatures(layer, projection, format); } }),
        children
      )
    );
  };

  return FeatureExportButton;
}(PureComponent));

FeatureExportButton.propTypes = propTypes;
FeatureExportButton.defaultProps = defaultProps;

export default FeatureExportButton;

//# sourceMappingURL=FeatureExportButton.js.map