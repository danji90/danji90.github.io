function objectWithoutProperties (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }
import React, {
  useEffect,
  useRef,
  useCallback,
  useState,
  useMemo,
} from 'react';
import PropTypes from 'prop-types';
import { FaPlus, FaMinus } from 'react-icons/fa';
import { ZoomSlider } from 'ol/control';
import OLMap from 'ol/Map';

var propTypes = {
  /**
   * An [ol/map](https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html).
   */
  map: PropTypes.instanceOf(OLMap).isRequired,

  /**
   * The zoom delta applied on each click.
   */
  delta: PropTypes.number,

  /**
   * Titles HTML attribtues for button.
   */
  titles: PropTypes.shape({
    zoomIn: PropTypes.string,
    zoomOut: PropTypes.stirng,
  }),

  /**
   * Children content of the zoom in button.
   */
  zoomInChildren: PropTypes.node,

  /**
   * Children content of the zoom out button.
   */
  zoomOutChildren: PropTypes.node,

  /**
   * Display a slider to zoom.
   */
  zoomSlider: PropTypes.bool,
};

var defaultProps = {
  titles: {
    zoomIn: 'Zoom in',
    zoomOut: 'Zoom out',
  },
  zoomInChildren: React.createElement( FaPlus, { focusable: false }),
  zoomOutChildren: React.createElement( FaMinus, { focusable: false }),
  zoomSlider: false,
  delta: 1,
};

var updateZoom = function (map, zoomAction) {
  map.getView().cancelAnimations();
  var zoom = map.getView().getZoom();

  map.getView().animate({ zoom: zoom + zoomAction });
};

/**
 * The Zoom component creates a zoom wrapper containing zoom-in and zoom-out buttons
 * and an optional [ol/ZoomSlider](https://openlayers.org/en/latest/apidoc/module-ol_control_ZoomSlider-ZoomSlider.html).
 */
function Zoom(ref$1) {
  var map = ref$1.map;
  var titles = ref$1.titles;
  var zoomInChildren = ref$1.zoomInChildren;
  var zoomOutChildren = ref$1.zoomOutChildren;
  var zoomSlider = ref$1.zoomSlider;
  var delta = ref$1.delta;
  var rest = objectWithoutProperties( ref$1, ["map", "titles", "zoomInChildren", "zoomOutChildren", "zoomSlider", "delta"] );
  var other = rest;

  var ref = useRef();
  var ref$2 = useState();
  var currentZoom = ref$2[0];
  var setZoom = ref$2[1];

  var zoomIn = useCallback(
    function (evt) {
      if (!evt.which || evt.which === 13) {
        updateZoom(map, delta);
      }
    },
    [map]
  );

  var zoomOut = useCallback(
    function (evt) {
      if (!evt.which || evt.which === 13) {
        updateZoom(map, -delta);
      }
    },
    [map]
  );

  var zoomInDisabled = useMemo(function () {
    return (
      currentZoom >=
      map.getView().getConstrainedZoom(map.getView().getMaxZoom())
    );
  }, [currentZoom]);

  var zoomOutDisabled = useMemo(function () {
    return (
      currentZoom <=
      map.getView().getConstrainedZoom(map.getView().getMinZoom())
    );
  }, [currentZoom]);

  useEffect(function () {
    /* Trigger zoom update to disable zooms on max and min */
    var zoomListener = function () { return setZoom(map.getView().getZoom()); };
    map.on('moveend', zoomListener);

    var control;
    if (zoomSlider && ref.current) {
      control = new ZoomSlider();
      // We don't want to navigate to the zoom slider using TAB navigation.
      control.element.firstElementChild.tabIndex = -1;
      // Set the zoom slider in the custom control wrapper.
      control.setTarget(ref.current);
      map.addControl(control);
    }
    return function () {
      map.un('moveend', zoomListener);
      if (control) {
        map.removeControl(control);
      }
    };
  }, [map, zoomSlider, ref.current]);

  return (
    // eslint-disable-next-line react/jsx-props-no-spreading
    React.createElement( 'div', Object.assign({}, { className: "rs-zooms-bar" }, other),
      React.createElement( 'button', {
        type: "button", tabIndex: 0, className: "rs-zoom-in", title: titles.zoomIn, onClick: zoomIn, onKeyPress: zoomIn, disabled: zoomInDisabled },
        zoomInChildren
      ),
      zoomSlider ? React.createElement( 'div', { className: "rs-zoomslider-wrapper", ref: ref }) : null,
      React.createElement( 'button', {
        type: "button", tabIndex: 0, className: "rs-zoom-out", title: titles.zoomOut, onClick: zoomOut, onKeyPress: zoomOut, disabled: zoomOutDisabled },
        zoomOutChildren
      )
    )
  );
}

Zoom.propTypes = propTypes;
Zoom.defaultProps = defaultProps;

export default React.memo(Zoom);

//# sourceMappingURL=Zoom.js.map