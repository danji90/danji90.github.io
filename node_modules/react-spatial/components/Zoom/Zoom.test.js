import React from 'react';
import renderer from 'react-test-renderer';
import { configure, shallow, mount } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
import { act } from 'react-dom/test-utils';
import MapEvent from 'ol/MapEvent';
import OLView from 'ol/View';
import OLMap from 'ol/Map';
import Zoom from './Zoom';

configure({ adapter: new Adapter() });

describe('Zoom', function () {
  test('should match snapshot.', function () {
    var map = new OLMap({});
    var component = renderer.create(React.createElement( Zoom, { map: map }));
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  test('should match snapshot with custom attributes', function () {
    var map = new OLMap({});
    var component = renderer.create(
      React.createElement( Zoom, { map: map, className: "foo", tabIndex: -1, title: "bar" })
    );
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  test('should match snapshot with zoom slider', function () {
    var map = new OLMap({});
    var component = renderer.create(React.createElement( Zoom, { map: map, zoomSlider: true }));
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  [
    ['click', {}],
    ['keypress', { which: 13 }] ].forEach(function (evt) {
    test(("should zoom in on " + (evt[0]) + "."), function () {
      var ref;

      var map = new OLMap({ view: new OLView({ zoom: 5 }) });
      var zooms = shallow(React.createElement( Zoom, { map: map }));
      (ref = zooms
        .find('.rs-zoom-in')
        .first())
        .simulate.apply(ref, evt);

      expect(map.getView().getZoom()).toBe(6);
    });

    test(("should zoom in on " + (evt[0]) + " (delta: 0.3)."), function () {
      var ref;

      var map = new OLMap({ view: new OLView({ zoom: 5 }) });
      var zooms = shallow(React.createElement( Zoom, { map: map, delta: 0.3 }));
      (ref = zooms
        .find('.rs-zoom-in')
        .first())
        .simulate.apply(ref, evt);

      expect(map.getView().getZoom()).toBe(5.3);
    });

    test(("should zoom out on " + (evt[0]) + "."), function () {
      var ref;

      var map = new OLMap({ view: new OLView({ zoom: 5 }) });
      var zooms = shallow(React.createElement( Zoom, { map: map }));
      (ref = zooms
        .find('.rs-zoom-out')
        .first())
        .simulate.apply(ref, evt);

      expect(map.getView().getZoom()).toBe(4);
    });

    test(("should zoom out on " + (evt[0]) + " (delta: 0.3)."), function () {
      var ref;

      var map = new OLMap({ view: new OLView({ zoom: 5 }) });
      var zooms = shallow(React.createElement( Zoom, { map: map, delta: 0.3 }));
      (ref = zooms
        .find('.rs-zoom-out')
        .first())
        .simulate.apply(ref, evt);

      expect(map.getView().getZoom()).toBe(4.7);
    });
  });

  test('should remove zoomSlider control on unmount.', function () {
    var map = new OLMap({});
    var spy = jest.spyOn(map, 'removeControl');
    var spy2 = jest.spyOn(map, 'addControl');
    var wrapper = mount(React.createElement( Zoom, { map: map, zoomSlider: true }));
    expect(spy).toHaveBeenCalledTimes(0);
    wrapper.unmount();
    expect(spy).toHaveBeenCalledTimes(1);
    expect(spy.mock.calls[0][0]).toBe(spy2.mock.calls[0][0]);
  });

  test('should disable zoom-in button on mount with max zoom..', function () {
    var map = new OLMap({
      view: new OLView({ maxZoom: 20, zoom: 20 }),
    });
    var spy = jest.spyOn(map.getView(), 'setZoom');
    var wrapper = mount(React.createElement( Zoom, { map: map }));
    act(function () {
      map.dispatchEvent(new MapEvent('moveend', map));
    });
    wrapper.update();
    expect(wrapper.find('.rs-zoom-in').prop('disabled')).toEqual(true);
    wrapper.find('.rs-zoom-in').first().simulate('click');
    expect(spy).toHaveBeenCalledTimes(0);
  });

  test('should disable zoom-out button on mount with min zoom.', function () {
    var map = new OLMap({
      view: new OLView({ minZoom: 2, zoom: 2 }),
    });
    var spy = jest.spyOn(map.getView(), 'setZoom');
    var wrapper = mount(React.createElement( Zoom, { map: map }));
    act(function () {
      map.dispatchEvent(new MapEvent('moveend', map));
    });
    wrapper.update();
    expect(wrapper.find('.rs-zoom-out').prop('disabled')).toEqual(true);
    wrapper.find('.rs-zoom-out').first().simulate('click');
    expect(spy).toHaveBeenCalledTimes(0);
  });
});

test('should disable zoom-out button when reaching min zoom.', function () {
  var map = new OLMap({
    view: new OLView({ minZoom: 2, zoom: 3 }),
  });
  var spy = jest.spyOn(map.getView(), 'setZoom');
  var wrapper = mount(React.createElement( Zoom, { map: map }));
  wrapper.find('.rs-zoom-out').first().simulate('click');
  expect(spy).toHaveBeenCalledTimes(1);
  act(function () {
    map.dispatchEvent(new MapEvent('moveend', map));
  });
  wrapper.update();
  expect(wrapper.find('.rs-zoom-out').prop('disabled')).toEqual(true);
});

//# sourceMappingURL=Zoom.test.js.map