import React, { PureComponent } from 'react';
import qs from 'query-string';
import PropTypes from 'prop-types';
import { TrackerLayer } from 'mobility-toolbox-js/ol';

var propTypes = {
  /**
   * CSS class of the filter button.
   */
  className: PropTypes.string,

  /**
   * Title.
   */
  title: PropTypes.string,

  /**
   * Line info route identifer.
   */
  routeIdentifier: PropTypes.string.isRequired,

  /**
   * Button is active.
   */
  active: PropTypes.bool.isRequired,

  /**
   * Function triggered on button click.
   */
  onClick: PropTypes.func.isRequired,

  /**
   * Trackerlayer.
   */
  trackerLayer: PropTypes.instanceOf(TrackerLayer).isRequired,

  /**
   * Children content of the button.
   */
  children: PropTypes.element.isRequired,
};

var defaultProps = {
  className: 'rt-route-filter',
  title: 'Filter',
};

/**
 * Button enables the filtering of a selected train.
 */
var FilterButton = /*@__PURE__*/(function (PureComponent) {
  function FilterButton () {
    PureComponent.apply(this, arguments);
  }

  if ( PureComponent ) FilterButton.__proto__ = PureComponent;
  FilterButton.prototype = Object.create( PureComponent && PureComponent.prototype );
  FilterButton.prototype.constructor = FilterButton;

  FilterButton.prototype.updatePermalink = function updatePermalink (isRemoving) {
    var ref = this.props;
    var routeIdentifier = ref.routeIdentifier;

    var parameters = qs.parse(window.location.search.toLowerCase());
    if (isRemoving) {
      delete parameters.tripnumber;
    } else {
      parameters.tripnumber = parseInt(routeIdentifier.split('.')[0], 10);
    }

    var qStr = qs.stringify(parameters, { encode: false });
    var search = "?" + qStr;
    var ref$1 = window.location;
    var hash = ref$1.hash;
    window.history.replaceState(undefined, undefined, ("" + search + (hash || '')));
  };

  FilterButton.prototype.toggleFilter = function toggleFilter (routeIdentifier) {
    var assign;

    var ref = this.props;
    var trackerLayer = ref.trackerLayer;
    var active = ref.active;
    var onClick = ref.onClick;
    var activated = !active;

    if (trackerLayer) {
      if (activated) {
        this.updatePermalink(false);
        (assign = routeIdentifier.split('.'), trackerLayer.tripNumber = assign[0]);
      } else {
        this.updatePermalink(true);
        trackerLayer.tripNumber = null;
      }
    }

    onClick(activated);
  };

  FilterButton.prototype.render = function render () {
    var this$1 = this;

    var ref = this.props;
    var className = ref.className;
    var title = ref.title;
    var routeIdentifier = ref.routeIdentifier;
    var active = ref.active;
    var children = ref.children;
    var toggle = function () { return this$1.toggleFilter(routeIdentifier); };

    return (
      React.createElement( 'div', {
        'aria-label': title, className: ("" + className + (active ? ' rt-active' : '')), title: title, onClick: toggle, onKeyPress: function (e) { return e.which === 13 && toggle(); }, role: "button", tabIndex: 0 },
        children
      )
    );
  };

  return FilterButton;
}(PureComponent));

FilterButton.propTypes = propTypes;
FilterButton.defaultProps = defaultProps;

export default FilterButton;

//# sourceMappingURL=FilterButton.js.map