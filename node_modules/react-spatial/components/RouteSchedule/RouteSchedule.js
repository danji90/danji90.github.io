/* eslint-disable react/no-unused-prop-types */
/* eslint-disable react/prop-types */
import React from 'react';
import PropTypes from 'prop-types';
import { TrackerLayer } from 'mobility-toolbox-js/ol';
import { bgColors } from 'mobility-toolbox-js/common/trackerConfig';
import {
  getHoursAndMinutes,
  getDelayString,
} from 'mobility-toolbox-js/common/timeUtils';
import ReactTransitPropTypes from '../../propTypes';
import firstStation from '../../images/RouteSchedule/firstStation.png';
import station from '../../images/RouteSchedule/station.png';
import lastStation from '../../images/RouteSchedule/lastStation.png';

/**
 * Returns a color class to display the delay.
 * @param {Number} time Delay time in milliseconds.
 */
var getDelayColor = function (time) {
  var secs = Math.round(((time / 1800 / 2) * 3600) / 1000);
  if (secs >= 3600) {
    return 'dark-red';
  }
  if (secs >= 500) {
    return 'middle-red';
  }
  if (secs >= 300) {
    return 'light-red';
  }
  if (secs >= 180) {
    return 'orange';
  }
  return 'green';
};

/**
 * Returns true if the train doesn't stop to the station.
 * @param {Object} stop Station information.
 */
var isNotStop = function (stop) {
  return !stop.arrivalTime && !stop.departureTime;
};

/**
 * Returns if the station has already been passed by the vehicule.
 * @param {Object} stop Station information.
 */
var isPassed = function (stop, time) {
  // Sometimes stop.departureDelay is undefined.
  var timeToCompare = stop.departureTime || stop.arrivalTime || 0;
  var delayToCompare = stop.departureDelay || stop.arrivalDelay || 0;
  return !isNotStop(stop) && timeToCompare + delayToCompare <= time;
};

var getStationImg = function (index, length) {
  var src = station;
  if (index === 0) {
    src = firstStation;
  } else if (index === length - 1) {
    src = lastStation;
  }
  return src;
};

/**
 * Returns an image for first, middle or last stations.
 * @param {Number} index Index of the station in the list.
 * @param {Number} length Length of the stations list.
 */
var defaultRenderStationImg = function (stations, index, length) {
  var src = getStationImg(index, length);
  return React.createElement( 'img', { src: src, alt: "routeScheduleLine", className: "rt-route-icon" });
};

var defaultRenderStation = function (ref) {
  var lineInfos = ref.lineInfos;
  var onStationClick = ref.onStationClick;
  var trackerLayer = ref.trackerLayer;
  var renderStationImg = ref.renderStationImg;
  var stop = ref.stop;
  var idx = ref.idx;

  var stationId = stop.stationId;
  var arrivalDelay = stop.arrivalDelay;
  var departureDelay = stop.departureDelay;
  var arrivalTime = stop.arrivalTime;
  var departureTime = stop.departureTime;
  var cancelled = stop.cancelled;
  var stationName = stop.stationName;
  var stations = lineInfos.stations;
  var isFirstStation = idx === 0;
  var isLastStation = idx === stations.length - 1;
  var isStationPassed = isPassed(stop, trackerLayer.currTime);
  var isNotStation = isNotStop(stop);
  return (
    React.createElement( 'div', {
      key: stationId, role: "button", className: [
        'rt-route-station',
        isStationPassed ? ' rt-passed' : '',
        isNotStation ? ' rt-no-stop' : '' ].join(''), onClick: function (e) { return onStationClick(stop, e); }, tabIndex: 0, onKeyPress: function (e) { return e.which === 13 && onStationClick(stop, e); } },
      React.createElement( 'div', { className: "rt-route-delay" },
        typeof arrivalDelay === 'undefined' || isFirstStation || cancelled ? (
          ''
        ) : (
          React.createElement( 'span', {
            className: ("rt-route-delay-arrival" + (" " + (getDelayColor(
              arrivalDelay
            )))) },
            ("+" + (getDelayString(arrivalDelay)))
          )
        ),
        typeof departureDelay === 'undefined' || isLastStation || cancelled ? (
          ''
        ) : (
          React.createElement( 'span', {
            className: ("rt-route-delay-departure" + (" " + (getDelayColor(
              departureDelay
            )))) },
            ("+" + (getDelayString(departureDelay)))
          )
        )
      ),
      React.createElement( 'div', { className: "rt-route-times" },
        React.createElement( 'span', {
          className: ("rt-route-time-arrival " + (cancelled ? 'rt-route-cancelled' : '')) },
          getHoursAndMinutes(arrivalTime)
        ),
        React.createElement( 'span', {
          className: ("rt-route-time-departure " + (cancelled ? 'rt-route-cancelled' : '')) },
          getHoursAndMinutes(departureTime)
        )
      ),
      renderStationImg(stations, idx, stations.length, isNotStation),
      React.createElement( 'div', { className: cancelled ? 'rt-route-cancelled' : '' }, stationName)
    )
  );
};

var renderRouteIdentifier = function (ref) {
  var routeIdentifier = ref.routeIdentifier;
  var longName = ref.longName;

  // first part of the id, without leading zeros.
  var id = parseInt(routeIdentifier.split('.')[0], 10);
  if (!longName.includes(id)) {
    return (" (" + id + ")");
  }
  return null;
};

var defaultRenderHeader = function (ref) {
  var lineInfos = ref.lineInfos;
  var renderHeaderButtons = ref.renderHeaderButtons;

  var vehicleType = lineInfos.vehicleType;
  var shortName = lineInfos.shortName;
  var longName = lineInfos.longName;
  var color = lineInfos.color;
  var backgroundColor = lineInfos.backgroundColor;
  var destination = lineInfos.destination;
  var routeIdentifier = lineInfos.routeIdentifier;
  return (
    React.createElement( 'div', { className: "rt-route-header" },
      React.createElement( 'span', {
        className: "rt-route-icon", style: {
          backgroundColor: backgroundColor || bgColors[vehicleType],
          color: color || 'black',
        } },
        shortName
      ),
      React.createElement( 'div', { className: "rt-route-title" },
        React.createElement( 'span', { className: "rt-route-name" }, destination),
        React.createElement( 'span', null,
          longName,
          renderRouteIdentifier(lineInfos)
        )
      ),
      React.createElement( 'div', { className: "rt-route-buttons" },
        renderHeaderButtons(routeIdentifier)
      )
    )
  );
};

var defaultRenderFooter = function (props) {
  var lineInfos = props.lineInfos;
  var renderCopyright = props.renderCopyright;
  if (!lineInfos.operator && !lineInfos.publisher) {
    return null;
  }
  return React.createElement( 'div', { className: "rt-route-footer" }, renderCopyright(Object.assign({}, props)));
};

var defaultRenderLink = function (text, url) {
  return (
    React.createElement( 'div', { className: "rt-route-copyright-link" },
      url ? (
        React.createElement( 'a', { href: url, target: "_blank", rel: "noreferrer" },
          text
        )
      ) : (
        React.createElement( React.Fragment, null, text )
      )
    )
  );
};

var defaultRenderCopyright = function (ref) {
  var lineInfos = ref.lineInfos;

  return (
    React.createElement( 'span', { className: "rt-route-copyright" },
      lineInfos.operator &&
        defaultRenderLink(lineInfos.operator, lineInfos.operatorUrl),
      lineInfos.operator && lineInfos.publisher && React.createElement( 'span', null, " - " ),
      lineInfos.publisher &&
        defaultRenderLink(lineInfos.publisher, lineInfos.publisherUrl),
      lineInfos.license && React.createElement( 'span', null, " (" ),
      lineInfos.license &&
        defaultRenderLink(lineInfos.license, lineInfos.licenseUrl),
      lineInfos.license && ')'
    )
  );
};

var propTypes = {
  /**
   * CSS class of the route schedule wrapper.
   */
  className: PropTypes.string,

  /**
   * Trajectory stations informations.
   */
  lineInfos: ReactTransitPropTypes.lineInfos,

  /**
   * Trackerlayer.
   */
  trackerLayer: PropTypes.instanceOf(TrackerLayer).isRequired,

  /**
   * Render Header of the route scheduler.
   */
  renderHeader: PropTypes.func,

  /**
   * Render Footer of the route scheduler.
   */
  renderFooter: PropTypes.func,

  /**
   * Render Copyright of the route scheduler.
   */
  renderCopyright: PropTypes.func,

  /**
   * Render the status of the station image.
   */
  renderStationImg: PropTypes.func,

  /**
   * Render a station.
   */
  renderStation: PropTypes.func,

  /**
   * Function triggered on station's click event.
   */
  onStationClick: PropTypes.func,

  /**
   * Function to render header buttons.
   */
  renderHeaderButtons: PropTypes.func,
};

var defaultProps = {
  className: 'rt-route-schedule',
  lineInfos: null,
  renderHeader: defaultRenderHeader,
  renderStation: defaultRenderStation,
  renderStationImg: defaultRenderStationImg,
  renderCopyright: defaultRenderCopyright,
  renderFooter: defaultRenderFooter,
  renderHeaderButtons: function () { return null; },
  onStationClick: function () {},
};

/**
 * RouteSchedule displays information, stops and punctuality about the clicked route.
 */
function RouteSchedule(props) {
  var lineInfos = props.lineInfos;
  var className = props.className;
  var renderStation = props.renderStation;
  var renderHeader = props.renderHeader;
  var renderFooter = props.renderFooter;

  if (!lineInfos) {
    return null;
  }

  return (
    React.createElement( 'div', { className: className },
      renderHeader(Object.assign({}, props)),
      React.createElement( 'div', { className: "rt-route-body" },
        lineInfos.stations.map(function (stop, idx) { return renderStation(Object.assign({}, props, {stop: stop, idx: idx})); }
        )
      ),
      renderFooter(Object.assign({}, props))
    )
  );
}

RouteSchedule.propTypes = propTypes;
RouteSchedule.defaultProps = defaultProps;

export default React.memo(RouteSchedule);

//# sourceMappingURL=RouteSchedule.js.map