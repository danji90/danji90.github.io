/* eslint-disable import/no-unresolved */
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { geopsTheme, Header, Footer } from '@geops/geops-ui';
import {
  Hidden,
  ClickAwayListener,
  Collapse,
  List,
  ListItem,
  Link,
} from '@material-ui/core';
import Open from '@material-ui/icons/ArrowDropDownTwoTone';
import Close from '@material-ui/icons/ArrowDropUpTwoTone';
import { ThemeProvider } from '@material-ui/core/styles';
import Version from 'react-styleguidist/lib/client/rsg-components/Version';
import Styled from 'react-styleguidist/lib/client/rsg-components/Styled';
import docConfig from '../../doc/doc-config.json';

var styles = function (ref) {
  var obj, obj$1;

  var mq = ref.mq;
  return ({
  root: {
    backgroundColor: 'white',

    '& .MuiAutocomplete-root': {
      margin: '20px 0',
      width: 300,
    },
  },
  version: {
    padding: '10px 0 0 10px',
  },
  content: {
    top: 100,
    bottom: 0,
    height: 'calc(100vh - 60px)',
    position: 'fixed',
    width: '100%',
    zIndex: 0,
  },
  scrollable: ( obj = {
    overflowY: 'scroll',
    height: 'calc(100vh - 100px)'
  }, obj[mq.small] = {
      top: 40,
      position: 'absolute',
      width: '100%',
      height: 'calc(100vh - 140px)',
    }, obj ),
  main: ( obj$1 = {
    maxWidth: 1000,
    padding: [[15, 30]],
    paddingLeft: 230,
    paddingTop: 55,
    margin: [[0, 'auto']]
  }, obj$1[mq.small] = {
      padding: 15,
    }, obj$1.display = 'block', obj$1 ),
  sidebar: {
    backgroundColor: '#EFEFEF',
    border: '#e8e8e8 solid',
    borderWidth: '0 1px 0 0',
    position: 'fixed',
    top: 100,
    left: 0,
    bottom: 0,
    width: '200px',
    overflow: 'auto',
  },
  dropdown: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: '0 10px 0',
    position: 'fixed',
    backgroundColor: '#efefef',
    height: 40,
    width: '100%',
    zIndex: 99999,
    color: '#6987a1',
    borderBottom: '1px solid #6987a1',
  },
});
};

export function StyleGuideRenderer(ref) {
  var classes = ref.classes;
  var children = ref.children;
  var version = ref.version;
  var toc = ref.toc;
  var hasSidebar = ref.hasSidebar;

  var ref$1 = useState();
  var apiKey = ref$1[0];
  var setApiKey = ref$1[1];
  var ref$2 = useState(false);
  var dropdownOpen = ref$2[0];
  var toggleDropdown = ref$2[1];
  var ref$3 = useState();
  var expanded = ref$3[0];
  var expandSection = ref$3[1];
  var ref$4 = useState('Components');
  var selected = ref$4[0];
  var setSelected = ref$4[1];
  useEffect(function () {
    fetch('https://developer.geops.io/publickey')
      .then(function (response) { return response.json(); })
      .then(function (data) {
        setApiKey(data.key);
      })
      .catch(function () {
        setApiKey('error');
        // eslint-disable-next-line no-console
        console.error('Request to get the apiKey failed');
      });
  }, []);

  if (!apiKey) {
    return null;
  }

  // Makes apiKey accessible for all components.
  window.apiKey = apiKey;

  return (
    React.createElement( ThemeProvider, { theme: geopsTheme },
      React.createElement( 'div', { className: classes.root },
        React.createElement( Header, {
          title: docConfig.appName, tabs: [{ label: 'Code', href: ("" + (docConfig.githubRepo)) }] }),
        React.createElement( 'div', { className: classes.content },
          React.createElement( Hidden, { smUp: true },
            React.createElement( 'div', {
              role: "button", type: "button", className: classes.dropdown, onClick: function () { return toggleDropdown(!dropdownOpen); }, onKeyDown: function (e) {
                if (e.keyCode === 13) {
                  toggleDropdown(!dropdownOpen);
                }
              }, tabIndex: 0 },
              selected,
              dropdownOpen ? React.createElement( Close, null ) : React.createElement( Open, null )
            ),
            React.createElement( Collapse, { in: dropdownOpen, timeout: "auto", unmountOnExit: true },
              React.createElement( ClickAwayListener, { onClickAway: function () { return toggleDropdown(false); } },
                React.createElement( List, {
                  component: "div", disablePadding: true, style: {
                    width: '100%',
                    overflow: 'auto',
                    maxHeight: 'calc(100vh - 150px)',
                    top: 40,
                    backgroundColor: 'white',
                    boxShadow: '0px 10px 15px #35353520',
                    zIndex: 99999,
                  } },
                  toc.props.sections.slice(1).map(function (section) {
                    return [
                      React.createElement( ListItem, {
                        key: section.name, button: true, onClick: function () {
                          return expanded === section.name
                            ? expandSection()
                            : expandSection(section.name);
                        }, style: {
                          fontWeight: 'bold',
                          color: '#6987a1',
                          borderTop: '1px solid #e8e8e8',
                        } },
                        section.name
                      ),
                      React.createElement( Collapse, {
                        key: ((section.name) + "-components"), in: expanded === section.name, timeout: "auto", unmountOnExit: true },
                        section.components.map(function (component) {
                          return (
                            React.createElement( ListItem, {
                              key: component.name, button: true, style: { paddingLeft: 32 }, onClick: function () {
                                setSelected(component.name);
                                toggleDropdown(false);
                              }, tabIndex: -1, selected: selected === component.name },
                              React.createElement( Link, {
                                style: { display: 'block', width: '100%' }, href: ("#" + (component.name.toLowerCase())) },
                                component.name
                              )
                            )
                          );
                        })
                      ) ];
                  })
                )
              )
            )
          ),
          React.createElement( 'div', { className: classes.scrollable },
            React.createElement( Hidden, { xsDown: true },
              React.createElement( 'div', { className: classes.sidebar },
                React.createElement( 'header', { className: classes.version },
                  version && React.createElement( Version, null, version )
                ),
                hasSidebar ? toc : null
              )
            ),
            React.createElement( 'main', { className: classes.main }, children),
            React.createElement( Footer, null )
          )
        ),
        React.createElement( 'div', { id: "promo" },
          React.createElement( 'a', {
            href: docConfig.githubRepo, target: "_blank", rel: "noopener noreferrer" },
            React.createElement( 'div', { id: "promo-text" }, "Fork me on GitHub")
          )
        )
      )
    )
  );
}

StyleGuideRenderer.defaultProps = {
  version: null,
};

StyleGuideRenderer.propTypes = {
  classes: PropTypes.object.isRequired,
  children: PropTypes.node.isRequired,
  version: PropTypes.string,
  toc: PropTypes.node.isRequired,
  hasSidebar: PropTypes.bool.isRequired,
};

export default Styled(styles)(StyleGuideRenderer);

//# sourceMappingURL=StyleGuide.js.map